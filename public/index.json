[{"categories":["编程技术"],"contents":"getTimezoneOffset() 方法 方法返回 UTC 时间和本地时间之间的时差，以分钟为单位。\n 世界协调时间 (UTC) 是世界时间标准设定的时间, UTC 时间与 GMT 时间（格林威治时间）相同。\n 测一下我所在时区和标准时区的时间差\nfunction myDate () { var d = new Date(); var n = d.getTimezoneOffset(); console.log(n) } myDate(); // PS E:\\demo\u0026gt; node 1.js // -480 也就是 480分钟（8个小时），北京时间是东八区，刚好与格林威治时间相差8个小时，这说明 getTimezoneOffset() 方法是很有效的。\n接下来利用这个方法，判断一下当前时区是否为夏令时。\nconst time1 = new Date(2021, 0, 1); const time2 = new Date(2021, 6, 1); if (time1.getTimezoneOffset() != time2.getTimezoneOffset()) { console.log(\u0026#39;夏令时\u0026#39;); } else { console.log(\u0026#39;非夏令时\u0026#39;); } // PS E:\\demo\u0026gt; node 1.js // 非夏令时 ","date":"2021-10-22T00:00:00Z","permalink":"https://imzsh.com/posts/20211022/","section":"posts","tags":["js"],"title":"通过 getTimezoneOffset() 方法判断当前时区是否为夏令时"},{"categories":["生活随笔"],"contents":"好长时间没回老家了，这次本想借着国庆七天回家一趟，顺便处理一些其他的事情。所以我从9月30日晚，与家人一同驾车回家。\n艰难的回家之路 刚上高速跑得很快，原以为已经错开出行高峰期，结果发现是我想多了，不出意外的堵在高速上。\n导航呢，这时候也是推荐不走高速，直接从国道走（真的是后悔），然后我们就下了高速，结果这个导航给我整的有点蒙，在临安绕来绕去，11点从杭州出发，凌晨3点还在临安出不去，国道都在堵车，然后没办法只能就地休息，困得实在不行了，其实睡也睡不舒服，跑夜车都是这个样子。\n睡到5点多，这时候已经是10月1日了，继续出发，按照导航走，结果走到了一个盘山公路，不知道叫什么山，没注意看。\n大概走了3个小时，盘山公路弯弯曲曲的，九转十八弯。不过风景还行，权当安慰自己出来旅游了。\n中午才从山里出来，这时候在安徽境内，接近六安。\n大家随便弄点泡面吃了吃，继续出发，已经是1号下午了。跑到下午5点多的时候，距离老家还有100公里左右，再来两个小时差不多就到了。结果发生了一些小意外，导致轮胎爆了，然后处理事故到后半夜，修好车也不能走了，身心疲惫，就地开了个宾馆休息，一夜的深度睡眠真的很爽，以后再也不熬夜了，难受死。\n早上睡到9点半起，简单收拾一下，10点出发，也没有吃饭，不太饿，打算一口气开回家，也是不负众望，午饭前就赶到县城了。\n好久没回家，发现物价真的低，四个人吃的撑死，最后没吃完，把剩下的菜打包带回去，结账也才150左右。不过工资水平也和物价水平差不多，然后就引发了我的一个新的思考，以后是否可以回县城养老。\n 回家碎碎念\u0026hellip;照片(无)\n 6号踏上返程的道路，7号回到杭州，真的身心疲惫。又是一路的夜车，在服务区休息了两个小时也顶不了多大的用。\n到杭州之后就开始胃疼了，大致算了一下，7天，有4天都在路上奔波，吃的都是饼干泡面，实在是扛不住，到这边之后吃完饭洗了个澡直接睡到下午六点，起来还是精神有些萎靡，我估计至少得三天才能缓成正常。毕竟年纪大了，真的痛苦。\n关于开车出行的反思 长了个记性，以后再也不开学出行跑长途了，特别节假日，火车七八个小时，睡一觉就能解决的问题搞得那么复杂，不过也是因为带了一些行李的缘故。下次就打算行李直接寄回去，随身背个包，然后坐火车轻装上阵，岂不是美滋滋。\n吐槽高速的一些事情 安徽段高速真的不行，管理不到位，救援迟缓，在安徽境内高速上堵车的时候，应急车道基本没闲着，私家车直接跑，路过别的省份基本很少有这种现象，而且出现事故的时候，救援迟缓，交管不到位，直接导致堵车堵了很长时间，我在河南段，浙江段跑的时候，看到事故都是处理的很快，基本没有太长的堵车现象。\n","date":"2021-10-07T00:00:00Z","permalink":"https://imzsh.com/posts/20211007/","section":"posts","tags":["出行"],"title":"有关国庆出行的感想"},{"categories":["编程技术"],"contents":"先写一个简单的 html 页面出来\n\u0026lt;style\u0026gt; /* ... */ \u0026lt;/style\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;html\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;css\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;js\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 通过 Math.random() 属性可以随机生成一个数字，然后通过转化为十六进制的方法进行处理，下面就是随机生成 6 位数字的代码，并进行转化的代码。\nconst randomHex = () =\u0026gt; `#${Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, \u0026#34;0\u0026#34;)}`; 可以在控制台输出看一下结果，随机生成了一个结果 #62113b。\n接下来就需要将这个颜色传给上面的 li 标签，首先需要将所有的 li 遍历然后生成一个数组，可以使用 for 循环进行遍历。\nvar arr = document.getElementsByTagName(\u0026#39;li\u0026#39;), temp = []; for (var i = 0; i \u0026lt; arr.length; i++) { temp.push(arr[i].innerHTML); } 然后再对数组进行循环处理，每个 li 标签要要运行一遍随机生成颜色，并且传给自身。同样也是通过 for 循环进行操作。\nvar li = document.getElementsByTagName(\u0026#34;li\u0026#34;); for (var i = 0; i \u0026lt; li.length; i++) { for (var num = 0; num \u0026lt; li.length; num++) { li[num].style.background = randomHex(); } } 这些事件都是在页面加载完成之后运行的，所以需要通过 window.onload 写入事件，然后把所有的代码合在一起。\n看看效果如果。\n把这些复制下来放到本地运行一下就可以看到效果了。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;随机生成颜色\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { display: flex; justify-content: center; padding-top: 100px; } ul { list-style: none; padding: 0; display: flex; } li { width: 100px; height: 40px; color: #333; display: flex; justify-content: center; align-items: center; margin-right: 30px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;html\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;css\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;js\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;script\u0026gt; const randomHex = () =\u0026gt; `#${Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, \u0026#34;0\u0026#34;)}`; console.log(randomHex()); var arr = document.getElementsByTagName(\u0026#39;li\u0026#39;), temp = []; for (var i = 0; i \u0026lt; arr.length; i++) { temp.push(arr[i].innerHTML); } window.onload = function () { var li = document.getElementsByTagName(\u0026#34;li\u0026#34;); for (var i = 0; i \u0026lt; li.length; i++) { for (var num = 0; num \u0026lt; li.length; num++) { li[num].style.background = randomHex(); } } } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 如果有更好的写法，欢迎评论!\n","date":"2021-09-29T00:00:00Z","permalink":"https://imzsh.com/posts/20210929/","section":"posts","tags":["js"],"title":"使用js随机生成背景颜色"},{"categories":["编程技术"],"contents":"Cusdis 是一个界面清爽、注重隐私的轻量级 (~5kb gzip) 评论系统，可以很方便地与 React、Vue 或其他博客系统结合，并且还提供了一个后台来管理所有的评论。\n由于 Cusdis 自称是 Disqus 的替代方案，因此它还支持一键从 Disqus 导入、支持邮件通知等功能。\n官方地址: https://cusdis.com/\n他通常是用于静态博客的一个第三方评论系统，但是官方文档没有提供如何在 hugo 中使用的参数，我也是报错了多次才琢磨出来。\n1. 本地部署 根据提示，注册账号，然后 Add website ，建立一个仓库。\n进入它，然后点击 setting。\nEmbed Code 会提供几行代码以及一些 api,复制他们。\ndata-app-id 是注册时自动生成的，注意保密，每个人都不一样。\n\u0026lt;div id=\u0026#34;cusdis_thread\u0026#34; data-host=\u0026#34;https://cusdis.com\u0026#34; data-app-id=\u0026#34;xxxxxxxxx\u0026#34; data-page-id=\u0026#34;{{ PAGE_ID }}\u0026#34; data-page-url=\u0026#34;{{ PAGE_URL }}\u0026#34; data-page-title=\u0026#34;{{ PAGE_TITLE }}\u0026#34; \u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script async defer src=\u0026#34;https://cusdis.com/js/cusdis.es.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 将这些代码复制到本地主题的 comments.html 文件内（就是评论的那个模块，每个主题或许都不一样，注意分辨）。\n这个时候如果你 hugo server 基本都会报错，因为没有修改 {{ PAGE_ID }} 等内容，这不是 hugo 官方提供的参数，按照我下面的格式，将 id, url, title 重写一下即可。\n\u0026lt;div id=\u0026#34;cusdis_thread\u0026#34; data-host=\u0026#34;https://cusdis.com\u0026#34; data-app-id=\u0026#34;c1d43485-e8a7-4895-972e-247eddaf242d\u0026#34; data-page-id=\u0026#34;{{ .RelPermalink }}\u0026#34; data-page-url=\u0026#34;{{ .RelPermalink }}\u0026#34; data-page-title=\u0026#34;{{ .Title }}\u0026#34; \u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script async defer src=\u0026#34;https://cusdis.com/js/cusdis.es.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 保存重新 hugo server 即可。\n 这样做的好处是当你接受一条评论信息后，审核列表可以清楚地标明来自哪一篇文章。通常大多数博客都提供了这么一个功能。\n 2. 邮箱提醒 除了必备的评论功能， Cusdis 还提供了一个非常快速的邮箱提醒功能，不需要绑定密匙，直接输入自己的邮箱即可。\n先勾选这个 Email Notification，然后点击下方的 Advanced Notification Settings (高级通知设置)\n就可以进入设置，输入自己的邮箱。\n3. 中文化 默认的评论和提示文字均为英文，对我们很不友好，这里提供一个不错的解决方案，在引入 Cusdis 之后，顺便复制引入下面这段代码。\n\u0026lt;script\u0026gt; window.CUSDIS_LOCALE = { \u0026#34;powered_by\u0026#34;: \u0026#34;评论由 Cusdis 提供\u0026#34;, \u0026#34;post_comment\u0026#34;: \u0026#34;发送\u0026#34;, \u0026#34;loading\u0026#34;: \u0026#34;加载中\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;邮箱地址 (可选)\u0026#34;, \u0026#34;nickname\u0026#34;: \u0026#34;昵称\u0026#34;, \u0026#34;reply_placeholder\u0026#34;: \u0026#34;回复内容...\u0026#34;, \u0026#34;reply_btn\u0026#34;: \u0026#34;回复\u0026#34;, \u0026#34;sending\u0026#34;: \u0026#34;发送中...\u0026#34;, \u0026#34;mod_badge\u0026#34;: \u0026#34;管理员\u0026#34;, \u0026#34;content_is_required\u0026#34;: \u0026#34;内容不能为空\u0026#34;, \u0026#34;nickname_is_required\u0026#34;: \u0026#34;昵称不能为空\u0026#34;, \u0026#34;comment_has_been_sent\u0026#34;: \u0026#34;评论已发送，管理员审核通过后会展示\u0026#34; } \u0026lt;/script\u0026gt; 。。。\n","date":"2021-09-16T00:00:00Z","permalink":"https://imzsh.com/posts/20210916/","section":"posts","tags":["博客"],"title":"hugo 如何使用 Cusdis ?"},{"categories":["编程技术"],"contents":"数字递增，顾名思义就是数字不断增加，数字递增的效果就是要一定时间内，让数字有一个增加的特效，一般用于强调某个内容。\n用 jquery 也很好处理，大概就是下面这些。\n data-to 属性代表最后想要递增到的数值 data-speed 代表数值想要递增的过程时间  class=\u0026quot;num-ber\u0026quot; 和 id=\u0026quot;count-number\u0026quot; 按照这个填入。\n\u0026lt;p\u0026gt; \u0026lt;span class=\u0026#34;num-ber\u0026#34; id=\u0026#34;count-number\u0026#34; data-to=\u0026#34;40\u0026#34; data-speed=\u0026#34;1000\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;+ \u0026lt;/p\u0026gt; 引入 jquery 之后再添加下面的 js 代码。\n$.fn.countTo = function (a) { a = a || {}; return $(this).each(function () { var c = $.extend({}, $.fn.countTo.defaults, { from: $(this).data(\u0026#34;from\u0026#34;), to: $(this).data(\u0026#34;to\u0026#34;), speed: $(this).data(\u0026#34;speed\u0026#34;), refreshInterval: $(this).data(\u0026#34;refresh-interval\u0026#34;), decimals: $(this).data(\u0026#34;decimals\u0026#34;) }, a); var h = Math.ceil(c.speed / c.refreshInterval), i = (c.to - c.from) / h; var j = this, f = $(this), e = 0, g = c.from, d = f.data(\u0026#34;countTo\u0026#34;) || {}; f.data(\u0026#34;countTo\u0026#34;, d); if (d.interval) { clearInterval(d.interval) } d.interval = setInterval(k, c.refreshInterval); b(g); function k() { g += i; e++; b(g); if (typeof (c.onUpdate) == \u0026#34;function\u0026#34;) { c.onUpdate.call(j, g) } if (e \u0026gt;= h) { f.removeData(\u0026#34;countTo\u0026#34;); clearInterval(d.interval); g = c.to; if (typeof (c.onComplete) == \u0026#34;function\u0026#34;) { c.onComplete.call(j, g) } } } function b(m) { var l = c.formatter.call(j, m, c); f.html(l) } }) }; $.fn.countTo.defaults = { from: 0, to: 0, speed: 1000, refreshInterval: 100, decimals: 0, formatter: formatter, onUpdate: null, onComplete: null }; function formatter(b, a) { return b.toFixed(0) } $(\u0026#34;#count-number\u0026#34;).data(\u0026#34;countToOptions\u0026#34;, { formatter: function (b, a) { return b.toFixed(0).replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, \u0026#34;,\u0026#34;) } }); $(\u0026#34;.num-ber\u0026#34;).each(count); function count(a) { var b = $(this); a = $.extend({}, a || {}, b.data(\u0026#34;countToOptions\u0026#34;) || {}); b.countTo(a) }; ","date":"2021-09-14T00:00:00Z","permalink":"https://imzsh.com/posts/20210914/","section":"posts","tags":["jquery"],"title":"使用jq做一个数字递增效果"},{"categories":["编程技术"],"contents":"复制到 console 即可运行。\nstime = Date.parse(new Date()); result = {} count = 0 flag = true while (flag) { obj = await fetch(\u0026#39;https://api.juejin.cn/growth_api/v1/lottery/draw\u0026#39;, { method: \u0026#39;POST\u0026#39;, credentials: \u0026#34;include\u0026#34;, headers: { \u0026#39;Content-type\u0026#39;: \u0026#39;application/json; charset=UTF-8\u0026#39; } }) .then(res =\u0026gt; { obj = res.json() return obj }) if (obj.err_no === 0) { if (obj.data.lottery_name in result) { result[obj.data.lottery_name] += 1 } else { result[obj.data.lottery_name] = 1 } count ++ } else { flag = false } } etime = Date.parse(new Date()) console.log(\u0026#34;抽奖次数为：\u0026#34; + count) console.log(\u0026#34;抽奖花费时间为：\u0026#34;, (etime - stime)/1000 + \u0026#34; 秒\u0026#34; ) console.log(\u0026#34;抽奖奖品明细\u0026#34;) Object.keys(result).forEach(key =\u0026gt; console.log(\u0026#34;奖品：\u0026#34; + key + \u0026#34;--数量：\u0026#34; + result[key] )) ","date":"2021-09-13T00:00:00Z","permalink":"https://imzsh.com/posts/20210913/","section":"posts","tags":["脚本"],"title":"掘金抽奖脚本"},{"categories":["生活随笔"],"contents":" inappropriate 不合适的，不合时宜的 refinement 精炼，提纯，改进（形容表示再一次，进一步，再次改进） convey 转告，传达，运输  If you leave a message, I\u0026#39;ll convey it to him. \u0026lt;!-- 如果你愿意留下口信，我会转告他的。 --\u0026gt; broaden 拓宽，增长（知识） broad 宽广的，广阔的 promotion(n.) 提升，晋升（多用于职场）  His promotion means a raise in salary. \u0026lt;!-- 他的提升意味着要增加薪水。 --\u0026gt; forebear 祖先，祖宗（不特指某一辈分的人，常用语: 祖祖辈辈） theory 理论，学说，原理，原则 verdor 小贩，供应商 practice 训练，实践，习惯  This bad practice will gradually die out. \u0026lt;!-- 这个坏习惯会逐渐消失。 --\u0026gt; prefix 前缀  ","date":"2021-09-07T00:00:00Z","permalink":"https://imzsh.com/posts/20210907/","section":"posts","tags":["学习英语"],"title":"英语单词背诵笔记"},{"categories":["编程技术"],"contents":"npm install下载依赖包的时候出现下面错误，请求失败。\nnpm ERR! FetchError: request to https://registry.npm.taobao.org/cnpm failed, reason: connect ECONNREFUSED 127.0.0.1:1181 调试过后发现是本地代理的问题，取消它。\nnpm config delete proxy npm config delete https-proxy npm install 成功运行，完毕。\n","date":"2021-08-19T11:15:00Z","permalink":"https://imzsh.com/posts/20210819/","section":"posts","tags":["报错","npm"],"title":"npm install 报错和取消本地代理的问题"},{"categories":["生活随笔"],"contents":"关于这个博客的构成 这个就放在最前面吗，算是起到一个统计整理的作用。\n博客基础的框架使用是 hugo, 前端样式是自己慢慢构思的，可能是因为没有设计师的天分吧，构思出来的 UI 就很奇怪。\n我也尽量将色彩往黑白上靠，就是为了避免色彩的冲突造成阅读的不适，以文字为主体，也可以将我的重心转移到写文章上来。\n然后通过本地渲染构建了 public 静态文件，我将这些文件推送到服务器上，服务器的配置是最基础的1h2g，不过已经完全可以满足个人正常使用了，这样可以提升访问速度。同时的话，我在 Github 备份了源码，这样就不用害怕如果有什么突发事件。\n而且，通过 Github ，我在 vercel 也构建了一个备份网站，基于 rope 可以直接生成一个项目网站，也是非常实用。\n 2021.07.21落笔\n写这篇文章，大概是想回顾一下自己从写第一篇博客，一直到现在的心理历程吧！但是动笔的时候，又突然改变想法了。决定好好审视一下自己的内心，“我为什么要写博客？”\n伊始 故事最开始源于2020年五月份，当时我正频临毕业之际，正处于找工作的状态，对前途还是有些迷茫的，不知道未来该怎么走，往哪方面发展，再加上对自己不够自信，可能有些焦虑吧。\n但是不论心态怎么变化，生活总是要继续的，在闲暇之余我浏览很多技术网站，希望可以提升自己，当时我比较热衷于csdn 和博客园吧，两个比较大的中文博客网站，不论是学习和查资料，百度出来的内容基本都是这两个网站的文章。然后在平时学习累计的过程中，我也会写一些笔记或者总结的内容，开始我是直接存放在本地，后来我放在 Gayhub 上面。\n Gayhub: 又名，Github. 全球最大的同性交友网站，在这里你可以畅快的交流技术，copy code 。\n 但是上过这个网站的人都懂，它的速度是多么的令人着急。虽然后来学会了一些科学上网的方法，但是还是很不爽，所以我把目光投向了技术交流平台，论坛社区。我开始试着在把笔记放在 csdn 上面，当做博客发布出去，至今还保留一些浅显易懂的文章在我的 csdn 账号上，不过许久没有登陆了。\n接触 有一天，一个做前端的朋友给我推荐了一本书，叫做《Web全栈工程师的自我修养》，作者是余果，之前我还写过一篇读后感，感兴趣的话也可以读一下，https://shuxhan.com/post/33.html\n 挺好的一本书，也很畅销，读完电子版的，我还专门为此买了一本纸质的书，表示支持一下作者。\n 然后了解到作者在大学时期就开始写个人博客，在深入了解过程中，我觉得他的思想真的不错，写的内容也很有深度，虽然很多文章跟技术无关，但是不可否认是好文章。（现在他已经转到微信公告号了，有兴趣搜一下：余果的专栏）。然后我就对他挺感兴趣的，以及对于个人博客这件事也突然有了更多的兴趣。\n我感觉这是一个自己的私人领域，可以自由发挥，更像是自己盖了一栋房子，至于房子盖成什么样，就看自己的能力了。\n一开始我选择的是 hexo 静态博客，他有很多优势，免费，部署快，可以不断的白嫖 github 仓库存储，包括文章，图片等，只要你愿意折腾，总有办法可以解决。\n然后还有很多大佬开发了各种各样的插件，还有各种第三方平台。hexo 官网的主题也是相当丰富，都是个人开发者做出来，总能找到自己喜欢的那一款。\n为此我还开发一款轻量的纯文字主题，simple99，感兴趣的话可以在官方列表搜索到，这里就不贴链接了，有夹带私货的嫌疑。\n之后，我就把自己之前写的笔记都放在了这个博客中，部署之后自己查看的时候，也挺有成就感的。\n本质  隔了两个月，开始继续更新这篇博客，接下来我会持续讲述自己的道路\u0026hellip;\n 不知不觉已经写了一年的博客，从最开始兴奋，冲动，到现在的平息了内心的悸动，这一场心理历程，其实走的颇为坎坷。\n中间有一段时间，频繁更换博客程序，hexo, hugo, halo, wordpress, typecho\n最后终于确定了 hugo,一方面因为它是静态的系统，不需要服务器和数据库，可以随意在任何支持的平台部署（虽然最后我还是为了速度，将它部署在服务器上），而且它渲染的速度相当快，当文章越来越多时，使用 hexo 会渲染10多秒，让我感到很难受，因此我选择了速度更快的 hugo 。\n度过那段时间后，我感觉自己内心平静了很多，不会再为这些事情而折腾，处于一个平静期的状态。我想，这大概就是每个博主都要经历的阶段吧，抛去花里胡哨的外表，直击博客的本质。\n我把它总结出四个字 \u0026mdash; 记录、分享。\n现在我认识很多新的博主，大部分都是刚刚接触，内心感官就是新奇，渴望部署一个让自己满意的博客，我都会指点一些细节和心得，也很开心。毕竟，在这个博客衰败，碎片化信息的时代，还有人能喜欢这个圈子，这确让人感到开心。\n我会鼓励他们自己动手解决问题，然后进行思考，得出结果，这无疑是很令各位博主有成就感的。\n有时候我也会写一些教程，或者开发的小插件分享出去，有需要的伙伴就可以到搜索引擎输入关键字，或许可以看到我的文章，这也让我感到荣幸。\n反思 很多时候，我都会审视自己，在这个时代要不要继续坚持下去写博客，大部分人做的都是公众号，自媒体等等。这也是时代的趋势。然后我自己慢慢思考，拨开云雾见光明，我发现我想要的不是自媒体那样的感觉，我更渴望拥有自己的一片净土，偶尔放一些新奇的玩意，然后写写自己的生活记录和一些技术笔记。\n我知道自己的水平远达不到大神的地步，单纯的想写点东西。仅此而已，不为其他。\n","date":"2021-07-21T00:00:00Z","permalink":"https://imzsh.com/posts/20210721/","section":"posts","tags":["博客","总结","感想"],"title":"关于我为什么要写博客？"},{"categories":["编程技术"],"contents":" 接口链接：http://121.196.166.173/img/img.php 展示demo：http://121.196.166.173/img\n 前言 为了写博客以及其他的一些用途，我使用服务器搭建了一个连接 github 仓库的上传网页，并且在数据库中记录上传的信息，比如缩略名、时间戳和图片链接。分别对应 GitHub 仓库中的图片，但是后期我发现在 GitHub 查看图片非常别扭，因此我打算写一个可展示图片的网页，把 GitHub 仓库中的图片通过链接展示出来，当然我们不可能一张张复制，还好有数据库。\n看一下具体内容\n写一个接口 很好，拥有我们需要的字段。事不宜迟，直接开动，下面是完成的接口代码。\n\u0026lt;?php header(\u0026#39;Content-Type:application/json; charset=utf-8\u0026#39;); header(\u0026#34;Access-Control-Allow-Origin:*\u0026#34;); $servername = \u0026#34;localhost\u0026#34;; $username = \u0026#34;imgbed\u0026#34;; $password = \u0026#34;imgbed\u0026#34;; $dbname = \u0026#34;imgbed\u0026#34;; // 创建连接 $conn = new mysqli($servername, $username, $password, $dbname); // 检测连接 if ($conn-\u0026gt;connect_error) { die(\u0026#34;连接失败: \u0026#34; . $conn-\u0026gt;connect_error); } // imgmd5 名称转md5 // imguploadtime 上传时间戳 // imgurl 链接 // 上传 ip $sql = \u0026#34;select imgmd5,imguploadtime,imgurl,imguploadip from remote_imgs \u0026#34;; $result = $conn-\u0026gt;query($sql); if ($result-\u0026gt;num_rows \u0026gt; 0) { // 输出数据  while($row = $result-\u0026gt;fetch_assoc()) { $data[]=$row; } $json = json_encode($data,JSON_UNESCAPED_UNICODE|JSON_PRETTY_PRINT);//把数据转换为JSON数据.  exit($json) ; } else { echo \u0026#34;未查询到结果！\u0026#34;; } $conn-\u0026gt;close(); ?\u0026gt; 分别将缩略名，时间戳，图片链接，和上传ip通过 json 格式导出，非常完美。 接口链接：http://121.196.166.173/img/img.php\n使用 ajax 进行调用 然后只需要在前端将接口调用，然后简单写一个页面即可，下面是 html 代码,，通过 ajax 调用。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;图床\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .container { max-width: 1000px; margin: 40px auto; display: flex; flex-wrap: wrap; justify-content: space-between; } .item { width:300px; /* height: 300px; */ overflow: hidden; border: 2px solid #bbb; margin-bottom: 24px; } .item a{ display: block; width: 300px; /* height: 300px; */ overflow: hidden; } .item img{ max-width: 300px; max-height: 300px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.shuxhan.com/jquery3.6.0.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var str = \u0026#39;\u0026#39;; $.ajax({ url: \u0026#39;http://121.196.166.173/img/img.php\u0026#39;, type: \u0026#39;get\u0026#39;, dataType: \u0026#39;json\u0026#39;, async: false, success: function (data) { $.each(data, function (i, item) { console.log(item) list = \u0026#34;\u0026lt;div class=\u0026#39;item\u0026#39;\u0026gt;\u0026lt;p\u0026gt;缩略名：\u0026#34; + item.imgmd5 + \u0026#34;\u0026lt;/p\u0026gt;\u0026#34; + \u0026#34;\u0026lt;p\u0026gt;时间戳：\u0026#34; + item.imguploadtime + \u0026#34;\u0026lt;/p\u0026gt;\u0026#34; + \u0026#34;\u0026lt;a target=\u0026#39;_blank\u0026#39; href=\u0026#39;\u0026#34;+ item.imgurl +\u0026#34;\u0026#39;\u0026gt;\u0026lt;img src=\u0026#39;\u0026#34; + item.imgurl + \u0026#34;\u0026#39;\u0026gt;\u0026lt;/a\u0026gt;\u0026#34; + \u0026#34;\u0026lt;p\u0026gt;上传ip：\u0026#34; + item.imguploadip + \u0026#34;\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;\u0026#34; str += list; }), $(\u0026#34;.container\u0026#34;).html(str); console.log(\u0026#39;数据请求成功\u0026#39;) }, error: function () { console.log(\u0026#39;数据请求失败\u0026#39;) } }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 最后我把这个页面传到我的服务器当中，可以看一下效果 http://121.196.166.173/img\n时间仓促，我也没使用更好的 ui 进行优化，只是大致写一下这个过程，待到以后具体使用时，我会对这个展示图片的页面进一步优化。\n","date":"2021-07-09T21:03:00Z","permalink":"https://imzsh.com/posts/20210709/","section":"posts","tags":["ajax","数据库","图床"],"title":"将数据库中的图片信息导出并调用"},{"categories":["生活随笔"],"contents":"从6月8日世界海洋日开始，南大洋将被认定为世界第五大洋。世界上就有七大洲，五大洋啦！中学课文需要改一改了。\n美国国家地理学会宣布，南极洲周围海域将被称为南大洋，并正式承认南大洋为地球第五大洋。\n南大洋是海洋生态系统的重要家园，也是南半球的焦点。它直接包围着南极洲，从大陆的海岸线一直延伸到南纬 60 度。\n海洋的边界与其他四个大洋中的三个相连——大西洋、印度洋和太平洋。但南大洋与其它大洋的不同之处在于，它在很大程度上不是由周围的陆地决定的，而是由于内部有一股洋流，这片水域很独特。\n","date":"2021-06-10T15:39:00Z","permalink":"https://imzsh.com/posts/20210610/","section":"posts","tags":["地理"],"title":"冷知识世界新增一个大洋变成五大洋"},{"categories":["编程技术"],"contents":"如何在 vue 中完成一次接口的调用？首选就是 axios，方便快捷又好用，支持各种 api ,封装也很方便。\n先用 node 安装一下。\nnpm install axios 然后在 main.js 文件中引入。\nimport axios from \u0026#39;axios\u0026#39; import VueAxios from \u0026#39;vue-axios\u0026#39; Vue.use(VueAxios, axios) 以我的一个工程目录作为实例，看一下代码。\n// ListThere.vue  // html 代码 ... \u0026lt;div\u0026gt;{{ info }}\u0026lt;/div\u0026gt; ... // js 代码 import axios from \u0026#34;axios\u0026#34;; export default { name: \u0026#34;ListThere\u0026#34;, data() { return { ... }; }, components: { ... }, methods: { ... }, mounted() { axios .get(\u0026#34;http://api.h-camel.com/api?mod=interview\u0026amp;ctr=issues\u0026amp;act=today\u0026#34;) .then((response) =\u0026gt; (this.info = response)) }, }; 数据成功的被取到，然后需要将它在页面中展示出来。使用 vue 自带的 v-for 列表渲染。\n\u0026lt;ul class=\u0026#34;list-api-show\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in show\u0026#34; :key=\u0026#34;index\u0026#34;\u0026gt; {{ item.title }} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 然后通过 axios 把数据指向 v-for.\nmounted() { axios // ...  .then((response) =\u0026gt; (this.show = response.data.result.today)) } 数据成功取出然后展示在 v-for 里面。\n当然了，这是成功的情况，加入失败了呢？我们需要浏览器给出提示，所以 axios 给出了一个 api \u0026mdash; err 语法。\nmounted() { axios // ...  .catch(function (error) { if (error.response) { console.log(error.response.data); console.log(error.response.status); console.log(error.response.headers); console.log(\u0026#39;err\u0026#39;) } else if (error.request) { console.log(error.request); console.log(\u0026#39;err\u0026#39;) } else { console.log(\u0026#39;Error\u0026#39;, error.message); console.log(\u0026#39;err\u0026#39;) } console.log(error.config); console.log(\u0026#39;err\u0026#39;) }); } 如果接口有问题，或者我们调用时代码写错了，都会给出报错提示，具体什么样的错误会有什么样的警告，需要我们一一去经历摸索。\n","date":"2021-06-08T21:02:00Z","permalink":"https://imzsh.com/posts/20210608/","section":"posts","tags":["ajax","vue","axios"],"title":"在 vue 中使用 axios 调用数据"},{"categories":["编程技术"],"contents":"为了方便写一些东西，pc端和手机端都可以同步，我用leanote搭建了一个在线笔记，但是必须在服务器后台运行一个指令\nbase run.sh 不然就访问不了端口，我也不可能时刻在终端保持指令运行，所以就需要把指令放在服务器后台，让它自己保持运行，刚好有这么一插件 Supervisor管理器 2.2 。\n是一款免费的Python插件，点击下载即可，然后进入设置。\n点击添加进程守护。\n把进程环境目录和启动命令都填好，名称就随便写个自己能分辨出来的就行，最后点击确定。\n让它一直保持启动状态就可以，其他的不用动，以后就不用打开服务器终端输入指令了，直接在浏览器访问端口，就可以访问网页。\n如果为了更方便，做个反代处理即可。\n","date":"2021-05-30T11:37:00Z","permalink":"https://imzsh.com/posts/20210530/","section":"posts","tags":["服务器","网站","宝塔"],"title":"宝塔如何实现进程守护？"},{"categories":["编程技术"],"contents":"1.问题  css 中使用动画属性会和同标签下的fixed属性冲突，导致定位失效，那么该如何解决他呢？\n 2.分析 简单说一下问题产生的背景，昨天夜里我想给我的博客页面做一个简单的动画，浏览器刷新的时候从下往上渐现的效果，代码如下：\n/* index-container类名是页面的主体部分 */ .index-container { opacity: 0; animation-name: index; animation-duration: 0.7s; animation-fill-mode: forwards; } /* 一个简单的动画实现 */ @keyframes index { 0% { transform: translateY(100px); opacity: 0; } 100% { transform: translateY(0); opacity: 1; } } 运行之后发现，动画可以很好的显示，但是当我翻阅文章详情的时候发现，目录固定失效了。\n按照原来的设置是当页面往下滑动的时候，目录会紧贴浏览器的顶部，方便跳转和查看目录，但是现在它已经不能紧贴了。看一下浏览器设置，属性确实生效了，但是页面并没有显示我们想要的结果。\n之前我写目录固定事件的时候用的是 scroll 事件，然后昨天写动画，绑定的 onload 事件，我初步判断是两个 window 冲突了，导致第二个失效，所以我就改了一种写法，用 addEventListener 事件监听执行他们，但最终无论怎么写，目录固定始终不能生效。\n昨天熬得太晚了，就没管它放在那了，今天一早我就去张鑫旭的网站查了一下，果然有这么一个问题。\n参考文章：https://www.zhangxinxu.com/wordpress/2015/05/css3-transform-affect/\n但是文章只是介绍了问题产生的原因，并没有明确给出一个好的解决办法。\n3.方法 虽然没有明确的方法，但是给了我一个思路，因为动画中的一些属性，比如 scale、translate 等，会造车容器的宽高重新计算，而 fixed 属性则依赖于规定的一个像素值，所以当执行动画的时候，页面的高度发生了变化，所以 fixed 不能安心的执行自己的任务了。\n原因找到了，方法自然而然就出来了，看图（图很丑，手画的，能理解意思就行）\n这是我最开始的布局，我将动画绑定给 红色框 的容器了，而目录就在红色框内，所以失效。\n现在我重新布局一下，\n目录依旧处于侧边，但是我将他和通常的侧边栏分开成两个容器了，现在我把动画绑定给 主体部分 和 侧边栏 ，这样目录就和绑定动画的标签分开了。\n再到页面测试，发现没有任何问题，动画效果和目录固定互不影响。\n很快乐，又可以愉快地折腾了！\n","date":"2021-05-27T21:42:00Z","permalink":"https://imzsh.com/posts/20210527/","section":"posts","tags":["css"],"title":"css 中 fixed 定位属性和动画的冲突问题及解决方法"},{"categories":["编程技术"],"contents":" 转载自：https://www.moeor.com/26.html\n 前言 本教程讲解Oracle Database Express Edition (XE) Release 11.2.0.2.0 (11gR2)版本的下载安装教程！\n该版本是一个便携式安装版本，直接安装，就可以了，非常方便。\n由于官网的更新，找不到以前那种提供客户端服务端的安装了，所以这里不再讲解！\n准备 访问Oracle官网下载该版本数据库。下载时需要登录账号，可百度搜索共享的Oracle账号！\n下载地址：https://www.oracle.com/database/technologies/xe-prior-releases.html\n选择适合自己的系统版本，本文以Win10为例。建议使用下载工具或者科学上网，下载更快！\n安装Oracle 下载后解压缩，双击打开文件夹中的 “setup.exe\u0026quot; 安装程序，等待程序启动，进入安装程序。\n开始安装，单击“下一步”\n选择“我接受本许可协议中的条款”，然后单击“下一步”。\n这一步是选择安装位置，由于文件程序比较大，建议安装D盘。新建一个Oracle文件夹，点击“浏览”，选择文件夹，注意查看目标文件夹，文件路径，然后单击“下一步”。\n设置数据库的登录口令，即数据库密码，建议简单一点，比如：root，然后单击“下一步”。\n单击“安装”，开始安装。\n安装过程比较慢，耐心等待安装完成！\n安装完成后，单击“完成”，即Oracle 11gR2已经安装完成了。\n安装完成会在桌面新建一个图标，打开可以通过以web形式访问数据库。\n双击打开，可能会弹出以下错误提示，这个是没有影响的，安装完成后重启一点电脑就可以了！\n验证数据库 选择桌面生成的图标\n鼠标右键打开文件所在位置，弹出文件夹，往上翻，在文件夹中找到bin文件夹。\n双击，进入bin文件夹，往下翻，找到sqlplus.exe程序。\n双击运行。\n输入用户名：system （统一默认都是system），回车\n输入口令：（刚才安装时设置的口令），口令输入是不显示的，直接回车就行了。\n若出现 “连接到: Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production” 语句时，则安装成功！\n","date":"2021-05-13T14:51:00Z","permalink":"https://imzsh.com/posts/20210513/","section":"posts","tags":["数据库","转载"],"title":"Oracle数据库安装教程（超详细）"},{"categories":["编程技术"],"contents":"1.前言 本文从Typecho 简介开始讲解，其中包括服务器的选择，以及域名注册，服务器系统选择 ，宝塔安装，环境配置，Typecho安装包括中间的防采坑注意事项，为您提供完整的保姆级搭建流程，请珍惜哦！\n如果不喜欢前面的啰嗦讲解，请跳过，直接从宝塔安装开始。\n不喜勿喷，谢谢！\n2.Typecho简介 Typecho 基于PHP5开发，支持多种数据库，是一款内核强健﹑扩展方便﹑体验友好﹑运行流畅的轻量级开源博客程序。\nTypecho 非常简洁，仅仅 7 张数据表，加上不足 400KB 的代码，就实现了完整的插件与模板机制。超低的 CPU 和内存使用率，足以发挥主机的最高性能。\n原生支持 Markdown 语法，易读更易写。支持 BAE/GAE/SAE 等各类云主机，即使面对突如其来的高访问量，也能轻松应对。\nTypecho 的默认模板和后台，全部采用了响应式设计。所以Typecho的大多数自制模板，都采用了自适应设计。\n现在Typecho 拥有很多用户，完整的生态，各种功能插件和简洁优美的主题，是做博客的不二选择，相信你会喜欢上她简洁的风格！\n3.准备 服务器+域名\n搭建Typecho 博客需要使用服务器或者虚拟机，最近也看到一篇使用Vercel+Mysql搭建Typecho的文章，但是这种是使用外部Mysql服务的 ，相比使用服务器或者虚拟机这种还是不太方便配置和管理的。使用服务器相比虚拟机会更加的好用。\n**注：**本文只讲解服务器的搭建流程，虚拟机请参考！\n**服务器选择：**推荐去腾讯云或阿里云,有学生机（9元/月）可供选择，腾讯云还是25岁以下免学生认证的，学生价续费三次，所以有条件可以选择1年购买和续费，腾讯的还有免费升配置，，阿里云的学生机下架了，但是也可以买为新用户提供的，建议选择 轻量应用服务器，1h2g的配置完全够用，流量也完全够用。\n腾讯云：https://cloud.tencent.com/act/campus\n阿里云：https://developer.aliyun.com/plan/grow-up\n如果你买不了这种，也可以去其他服务商买新用户优惠的服务器，建议选择大厂。\n选择服务器要看下地区，如果是大陆地区的服务器，需要去其对应的服务商进行域名备案，否者你无法使用，如果是香港地区或者国外的服务器，则不需要进行备案。\n**注：**阿里和腾讯这两种轻量应用服务器都是需要 备案的，如果嫌麻烦或者不想备案，可选择其他地区的服务器！\n备案操作有些复杂，也需要好几天的时间，但是备案也有备案的好处，比如使用国内的CDN加速等。另请仔细参考各服务商提供的流程，要注意看清备案流程上的注意事项，防止备案驳回浪费时间。\n相比国外和香港的服务器，使用大陆的服务器在国内的访问速度是最好的，当然如果你搞外国业务当我没说。。。\n**域名选择：**域名选择很简单，去各大服务商注册一个就完事了，喜欢什么就注册什么，但是如果你要备案使用大陆服务器，一定不要注册不支持备案的域名，当然绝大多数都是支持备案的。另各大服务商也有新用户注册域名优惠活动，在百度仔细找一下就行了。 腾讯云：https://cloud.tencent.com/act/domainsales\n阿里云：https://wanwang.aliyun.com/domain\n华为云：https://activity.huaweicloud.com/domain1.html\n下面开始搭建流程：\n4.LNMP环境 首先我们要搭建的就是LNMP环境，LNMP代表的就是：Linux系统下Nginx+MySQL+PHP这种网站服务器架构。\nLinux 是一类Unix计算机操作系统的统称，是目前最流行的免费操作系统。代表版本有：debian、centos、ubuntu、fedora、gentoo等。\nNginx 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。\nMysql 是一款安全、跨平台、高效的，并与 PHP、Java 等主流编程语言紧密结合的数据库系统。\nPHP 是一种在服务器端执行的嵌入HTML文档的脚本语言。\n当然如果你不喜欢使用Nginx，或者Mysql，请自行更换其它的，这里不过多介绍！\nLinux系统的话，本文使用Centos 8系统讲解。\n搭建LNMP环境，我们可以选择自行下载对应的安装包，然后在Centos系统中，安装Nginx，Mysql，PHP等，这种纯动手的方式，非常麻烦和复杂，在后期进行多网站管理和配置HTTPS证书，以及网站伪静态配置时非常麻烦。\n所以本文讲解使用宝塔面板来进行安装部署环境！\n5.宝塔是什么 宝塔面板是一款服务器管理软件，支持windows和linux系统，可以通过Web端轻松管理服务器，提升运维效率。例如：创建管理网站、FTP、数据库，拥有可视化文件管理器，可视化软件管理器，可视化CPU、内存、流量监控图表，计划任务等功能。\n宝塔面板拥有极速方便的一键配置与管理，可一键配置服务器环境（LAMP/LNMP/Tomcat/Node.js），一键部署SSL，异地备份；提供SSH开启关闭服务，SSH端口更改，禁ping，防火墙端口放行以及操作日志查看；CPU、内存、磁盘IO、网络IO数据监测，可设置记录保存天数以及任意查看某天数据；\n计划任务可按周期添加执行，支持SHELL脚本，提供网站、数据库备份以及日志切割，且支持一键备份到又拍云存储空间，或者其他云存储空间里；通过web界面就可以轻松管理安装所用的服务器软件，还有实用的扩展插件；集成方便高效的文件管理器，支持上传、下载、打包、解压以及文件编辑查看。\n进入搭建正题：\n6.安装宝塔 选择服务器时，选择系统镜像，不要选择服务商提供的应用镜像，操作系统选择Centos，版本的话7和8都可以。当然你也可以选择其他系统，，，\n接着到服务商的控制台，找到你的服务器，进入控制台，重置密码。\n然后在安全\u0026ndash;》防火墙那里添加规则。\n端口范围8888，其他默认，备注随意。\n**注：**如果你不添加 8888，安装宝塔以后你是进不去的，安装宝塔以后可以修改宝塔的进入端口，再修改一下这里就可以了！\n使用SSH工具连接你的服务器，如果没有SSH工具也可以使用控制台那里提供的远程连接！\n在终端界面输入一下命令开始安装！\nCentos安装命令：\nyum install -y wget \u0026amp;\u0026amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh \u0026amp;\u0026amp; sh install.sh 不同操作系统有不同的安装命令，详情请去宝塔官网查看！\n遇到安装提示直接输入：y\n安装完成后如下:\n在浏览器中访问外网面板地址。\n**注：**如果你刚才没有在服务器控制台安全防火墙那里添加端口8888是打不开的。\n使用username和password登录宝塔面板，点击我已阅读并同意“《用户协议》”后进入宝塔面板！\n进入宝塔面板后，会弹出一键安装环境套件选择界面，这时我们选择左边的LNMP环境！\nNginx 1.18，Mysql 5.6（如果服务器内存在2g以上可以选择5.7），PHP 7.4（php建议版本选择7.0以上），Pure-Ftpd 1.0.49，phpMyAdmin 5.0（这是一个可以在浏览器页面管理数据库的软件程序，要在服务器控制台安全防火墙那里添加端口888，否则无法打开）\n安装方式有两个，极速安装（安装速度快，节省时间），编译安装（安装速度超级慢，有时会卡死，但会提升服务器性能），可自行选择。本文以极速安装为例！\n安装过程：\n安装完成后，会提示绑定宝塔账号，点击免费注册，去注册一个，然后绑定就可以了！\n**说明：**建议，安装完成后，左侧，面板设置，设置下面板的登录信息，修改一下登录入口，用户名，密码和端口。 注： 如果修改面板设置中的端口，也要在服务器控制台安全防火墙那里修改端口。\n7.安装Typecho 访问Typecho 官网，点击立即下载，点击下载1.1正式版。\n下载完成后，得到一个1.1-17.10.30-release.tar.gz压缩包，解压后可以看到里面有一个build文件夹，文件夹里面便是Typecho程序文件。\n先域名解析一下，去你的域名服务商，控制台找到你的域名，解析，添加记录。主机记录填写@，www或者blog其他的都可以（你填写的是什么就要以什么访问，比如填写www便是www.xxx.com等），记录类型A类型，记录值填写自己服务器的IP地址（如果不知道，可查看宝塔页面的左上角），确认就可以了！\n打开宝塔页面，左侧\u0026ndash;》网站\u0026ndash;》添加站点\n添加域名，数据库选择Mysql utf-8，填写数据库账号和密码以及对应的PHP版本，然后提交。\n这里可以先设置一下站点，点击站点右侧的设置，需要设置的有伪静态，SSL证书，，，\n伪静态选择typecho，然后保存。\nSSL证书，选择宝塔SSL证书，申请证书，填写相关信息，提交资料等申请成功就可以了。\n如果申请失败，可以去域名服务商那里，有提供单域名免费SSL证书，然后选择其他证书，上传证书，开启右上角的强制HTTPs就可以了。\n关闭设置窗口，点击根目录下的路径地址**/www/wwwroot/你的域名**，直接进入根目录文件夹，删除index.html文件。\n点击上传，弹出窗口，点击上传文件，找到下载的Typecho压缩包，打开，然后开始上传，上传完毕关闭窗口。\n解压该压缩包后（删除压缩包），得到build文件夹，进入其文件夹内，选择文件名旁边的框，全选文件，右上角选择剪贴，然后回到上一级根目录下，黏贴，然后删掉没用的build文件夹就可以了。\n到这一步，浏览器输入你的域名，就可以安装Typecho了。\n如有在上方遇到Deprecated: Function get_magic_quotes_gpc() is deprecated in /www/wwwroot/woshishabi.top/var/Typecho/Common.php on line 208报错，不用管，没什么影响。\n点击下一步，进入初始化配置，这一步需要填写修改的是数据库用户名（添加站点时设置的数据库账号，如果忘了可去宝塔面板页面左侧，数据库查看），数据库密码，数据库名（数据库名和数据库用户名是一样的！），用户名，登录密码，邮件地址，确认，开始安装。\n不出意外，安装成功！\n现在再浏览器访问域名，便可以查看你的Typecho博客了，当然现在是默认主题，还是比较丑的。\n去百度你喜欢的主题下载，然后上传根目录/usr/themes/目录里面，在后台外观设置中更换。各主题教程以及配置教程都有主题文档。\n插件安装是将下载的插件上传根目录/usr/plugin/ 目录里面，在后台设置中启用插件，设置插件。\n你的后台面板地址就是你的域名/admin，用设置的用户名和密码登录就可以了！\n基本的安装到此为止了，下面说一些优化问题！\n8.优化 **永久链接：**对文章和页面进行重写地址，可以去掉地址栏中的index.php，对seo也是很友好的。\n启用重写功能，选择文章路径，选择你喜欢的风格，也可以自定义风格，下面有可选参数，本站使用的是个性化定义 /{cid}.html 。然后保存设置，会出现（重写功能检测失败, 请检查你的服务器设置，如果你仍然想启用此功能, 请勾选这里。），勾选这里，再次点击保存设置就可以了。\n 原文地址来自我的好友：https://www.moeor.com/24.html\n ","date":"2021-05-11T22:29:00Z","permalink":"https://imzsh.com/posts/20210511/","section":"posts","tags":["博客","转载","typecho"],"title":"Typecho博客搭建及优化教程(详细)"},{"categories":["编程技术"],"contents":"我想很多小伙伴在写博客的时候都能遇到一个令人头疼的问题，某一篇文章想用 iframe 引入一个外链视频，但是大小总是有问题，宽度可以固定到 100% ，但是高度比如用实际高度来表示，比如 100px, 200px，诸如此类。\n但是问题来了，在不同的页面宽度下，视频的高度是一致的，就会导致一个很麻烦的问题,\n看下面两个图，\npc端\n移动端\n很明显，在pc端正常显示的视频，放到移动端高度就错位了，很不美观。\n解决这个问题，可以同媒体查询，但是显然费时费力，还不那么完美。\n其实很简单，只需要不到10行代码即可完美实现。\n  引入 jq ，（一般网站默认都有这个文件）\n  加上一段 js 代码，最好放在网站底部， \u0026lt;/body\u0026gt; 前即可。\n  $(\u0026#39;iframe\u0026#39;).wrap(\u0026#39;\u0026lt;p class=\u0026#34;iframe\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\u0026#39;) 在css文件的底部加上:  .iframe{ position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; } .iframe iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } 这个时候再访问带有 iframe 视频的网页，不管宽度如何变化，高度可以随视频自适应。\n例如这个网页，可以看一下效果: https://shuxhan.com/posts/2021-05-07-breathing-wild/\n","date":"2021-05-09T18:50:00Z","permalink":"https://imzsh.com/posts/20210509/","section":"posts","tags":["css","博客"],"title":"网站引入iframe视频，如何实现高度自适应?"},{"categories":["生活随笔"],"contents":" 2021许嵩第8张全创作专辑《呼吸之野》首支曲目《乌鸦》5月7日正式发行。\n 《乌鸦》 我们都曾领受过误解、怀疑、孤立，都品尝过爱而不得或种种挫败的滋味，都有过觉得“一切都糟透了”的时候……但感伤过后，却还是会相信“一切都会好起来的”，还是会为了反转剧情而振作前行——也许是为了心里最在乎的人，也许是因为心底笃定的信念。被生活不断刮蹭的脆弱羽翼之下，有着强韧的骨架。许嵩以从未讨喜的乌鸦为第一视角，飞抵呼吸之野。\n人生不过一场呼吸。呼吸不停，则生命与思考不止。当人们习惯于蒙上口罩生活，畅快呼吸日渐成为一种奢侈。比这更为奢侈的，是袒露真心的酣畅对谈，是呼吸于野，吐纳心声。《呼吸之野》从冷色调里起笔，以自如沉着的笔触，描摹情感与境遇。十首音乐，如十场呼吸冥想般令人全神贯注。许嵩在想象与写实的互照里，在温柔与凛冽的交汇处，在浪漫与生猛的切换中，记述着生活与思考。\n在《呼吸之野》里，古典气质与当代元素浑然一体。许嵩构建了有别于其过往作品的音乐语汇，有承接亦有创新。《呼吸之野》是赤诚、饱满且充满细节的，它能够让人在专注聆听时回归内心深处。\n为拍摄专辑平面相片及音乐录影带，许嵩与二十余人拍摄团队进驻高原上人迹罕至的原始森林。帐篷帘幕外，旷野篝火，雪山江河，独行旅人，构成一幅冷暖交汇的静谧画卷。\n《呼吸之野》专辑10首曲目将于5月7日-5月14日陆续上线!\n\r《假摔》 暴雪天的十字街头，车来人往川流不息，却如临旷野。\n歌里的故事也许是真实发生的生活影像，也许是虚构的文本创作，但究竟是实是虚，就像歌里的“真摔”与“假摔”一样，真假虚实在裁判们心里有自己的答案。而切换到故事里主人公的角度来看，摔过的跟头吃过的苦，只有自己知道，很难期待无关人士的理解。\n《假摔》是印有许嵩独特标记的叙事性写作，极短的篇幅寥寥数笔就勾勒出故事轮廓。如同一个诚恳而又情绪饱满的目击者，把你带去故事里的现场，却不直接留下他的主观评价，只由你自行体会。故事现场的“假摔”与球场、与人生赛场上的“假摔”互为映照，有着极大的玩味空间。\n音乐方面，电子音色铺陈出冰天雪地氛围，生猛鼓点像钝器般无情敲击，副歌的短旋律乐句不断往复，以及电子摇滚曲风经典的节奏型，这些元素共同营造出极寒雪地的麻木感。后半段步步推进至顶点，直到一声放肆呼喊与一声沉闷的“砰”，猛地击中人心后戛然而止。《假摔》既有关怀的温度，也有反思的冷峻，它在冷暖交汇处，不断引发着心里的强降雪。\n《冰柜》 许嵩+黄龄\n当深情与决绝相互碰撞\n既是窜动的电光石火\n也是致命的寒气冰霜\n《冰柜》以惊悚悬疑电影为灵感原点，推演至情感关系的探讨。表层是充满戏剧张力的冷峻叙事，内里是丰富饱满的寓意，内外同步推进。与「惊鸿一面」的黄龄在七年之后再度合唱，默契诠释歌中角色与情感。\n《冰柜》由许嵩创作及制作。迷离的电子乐音色营造出扑朔迷离的诡谲气氛，影像感十足，引人入胜。歌曲在幽微的呼吸声中起始，随后二人交替着不疾不徐地抛出意象，到副歌时揭开面纱，接着以奇诡的Bridge段落，一步步将气氛推至高潮。\n《科幻》 脑海里 记忆与幻想交织 亦真亦幻 爱在散场之后 才给出关于爱的答案 ——我们把美满 托付「科幻」\n2021许嵩第8张全创作专辑「呼吸之野」 第四支曲目「科幻」5月13日正式发行\n歌曲从星云浩渺的氛围和隐约的电子频率声里起始，古典气息和R\u0026amp;B节拍梦幻联动，让心神跟随许嵩感而不伤的真挚演绎，飘忽在回忆的宇宙中。\n像一场返璞归真的童梦，像一则年少的浪漫寓言。爱之得失，在他的歌与诗里聚合成辽阔原野。聆听「科幻」，一切都在脑海，一切又都已抛之脑后。\n结尾咚咚的鼓声，如心跳不停，如呼吸不止，如爱一直延续。\n发行完毕 人生不过一场呼吸。呼吸不停，则生命与思考不止。当人们习惯于蒙上口罩生活，畅快呼吸日渐成为一种奢侈。比这更为奢侈的，是袒露真心的酣畅对谈，是呼吸于野，吐纳心声。\n《呼吸之野》从冷色调里起笔，以自如沉着的笔触，描摹情感与境遇。十首音乐，如十场呼吸冥想般令人全神贯注。许嵩在想象与写实的互照里，在温柔与凛冽的交汇处，在浪漫与生猛的切换中，记述着生活与思考。\n在《呼吸之野》里，古典气质与当代元素浑然一体。许嵩构建了有别于其过往作品的音乐语汇，有承接亦有创新。《呼吸之野》是赤诚、饱满且充满细节的，它能够让人在专注聆听时回归内心深处。\n为拍摄专辑平面相片及音乐录影带，许嵩与二十余人拍摄团队进驻高原上人迹罕至的原始森林。帐篷帘幕外，旷野篝火，雪山江河，独行旅人，构成一幅冷暖交汇的静谧画卷。\n呼，向外输出，吸，向内滋长，一呼一吸间，许嵩始终坚持用作品与听众进行交互。自2009年发行首张专辑至今12年里，许嵩已一人作词、作曲、演唱、制作、策划8张个人专辑以及近50首原创单曲，佳作不断。2019年举办“寻宝游戏”巡回演唱会大获好评后，许嵩折返到潜心创作的生活状态，以新作《呼吸之野》再一次展现了强大的创作能量。\n","date":"2021-05-07T21:48:00Z","permalink":"https://imzsh.com/posts/20210507/","section":"posts","tags":["音乐"],"title":"呼吸之野"},{"categories":["生活随笔"],"contents":" 文章作者: 江江_Jan 文章链接: https://blog.jannns.com/posts/Kieslowski-and-his-reality/ 版权声明: 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请注明来自 江卮可乐！\n 前言 克日什托夫·基耶斯洛夫斯基（以下简称基氏），20世纪波兰著名导演，其作品**《蓝白红三部曲》（也称三色系列），被许多评论家视为电影史的巅峰。**\n比起身份上电影人的定义，基氏本人更像是一个哲学家、斗争者。他立足于现实生活，擅长用冷静陈述的方式表达对世界的感知，热衷于揭露生活的残酷本质和人性的阴暗内里，并甘愿为【自由的表达】和外界抗衡。\n**我对基氏作品的感知是客观且冷静（甚至有点冷漠）。**他的叙事似乎不带任何感情色彩，但回味起来却能感受到他对生命的热爱。\n基氏的电影没有二元的善恶对错。残暴的杀人犯可以是为妹妹之死隐忍数年的无助青年（《杀人短片》）；权威物理教授会因为相信科学而亲手葬送自己的幼子（《十诫：第一诫》）；少年会因为精神爱情的破灭而赴死（《爱情短片》）；深爱多年的人是否能因为被证实无血缘而在一起（《十诫：父女情深》）……一些人生困境真实摆在眼前时，比起一些脸谱化的选择，我认为基氏的电影更接近生活的本质，也可能是我个人认同的生活本质。\n总之他的电影蛮有意思的，值得挖掘的东西也很多，自己最近沉迷其中无法自拔。\n基耶斯洛夫斯基如是说 第一次看基耶斯洛夫斯基的电影是《蓝白红三部曲》，四年前，马哲课老师的推荐。看完感觉三观都没了。女主为什么毁了丈夫遗作却念念不忘？她怎么可以这么对待默默爱她那么多年的人？她为什么对破坏自己婚姻的人那么好？…被一大堆灵魂提问炙烤以后，我默默告诫自己以后不要再看欧洲电影了，超出我的认知范围，感情方面尤其跟不上西方人思路。（当然“不看欧洲电影”这个flag?，后来因为被其他优秀电影疯狂打脸。）\n可能因为叙事方式或者文化背景的原因，欧洲电影没有很强的渲染力（美国大片那种看完就热血沸腾的感觉），它热衷于描绘的都是一些很细小很日常挺东西，无论好的还是不好的都客观的摊在你面前，有时候甚至感觉它的道德边界是模糊的（《两小无猜》令我头大），但回味起来，这些电影表达方式可能戏剧化，但对情感的表述很真实，确定的、不确定的、果断的、犹豫的……它告诉我们生活本来就是残酷的，但也会提示你生活中有很多不容忽视的小美好、值得我们的期待和爱护。\n基氏热衷于揭露生活的残酷真相和人性的阴暗面。（可能这也是他电影十分吸引我的原因，我喜欢真实。）他的早期作品都是纪录片，力求反映真实的社会生活，后来因为一些社会原因和本身对纪录片表达方式的失望，他才开始拍摄剧情片。\n他所处的时代比较动荡，人们渴望真正的自由。\n**他用自己的方式替人们发声，与外部抗衡。**朋友问他为什么不索性做政客去改变环境，他只是表达不适合自己，他在做的是自己应该做的事情。\n对他观点感兴趣的朋友可以在去b站看纪录片《基耶斯洛夫斯基如是说》。\n我比较认同他对人性的看法。\n一旦某种特性在人们心中扎了根，很难改变。性善性恶这种论题没有定论，也说不清这个“本”应该追溯哪里，但就未来而言，现在就是本，我比较相信“日久见人心”这个古话，人的本性经不起时间考验。\n这是一段废话\n突然想到前两年网上疯传的**原生家庭理念，仿佛我们所有的性格缺陷，**只要归在原生家庭的问题上就可以结束了。这个理念让很多人找到了共鸣，大家可以理直气壮的指责原生家庭带给自己的伤害，所以在遇到一些问题时没法很好解决。但这种指责行为只是一种毫无意义的负面情绪宣泄，于家于己都毫无益处。\n我从不否认原生家庭会给人影响，《野草莓》里探讨的持续三代的情感疏离，《小偷家族》里典型东方家庭的内敛……个体在遭受重大事件时性格都会受到影响，更何况耳濡目染的家庭。但我觉得原生家庭概念的提出不是为了创造家庭矛盾、或者给自己的问题找开脱，而是给个体更多素材（比如家人互动模式）去找到解决问题的方法。\n 以下内容含大量剧透及解析，请慎重阅读。\n图源豆瓣或自截。\n 蓝白红三部曲之蓝故事梗概 茱莉在一场意外中失去了丈夫和幼女，不堪回忆烦扰的她选择重新开始生活。清空过去的家、切断和过去人们的联系，但情感方面的东西，始终无法像切断物质关系一样简单，能够清理的干干净净。媒体四处渗透她的生活、想要她续写她丈夫的遗作，丈夫的助手一直爱着他、默默关心着她，最重要的是，她脑海中总是回荡着她和丈夫一起创作的交响乐…一个电视采访让她意外发现这首乐曲和另一个女人有关，并且她还有了丈夫的骨肉……\n和贯穿全剧的交响乐相契合，故事也可以分成四个乐章。\n第一乐章 常以奏鸣曲或快板形式表现。常常是两个具冲突性的主题交替上演，在最后突出首要主题。\n电影开头是一段行车的镜头。基氏通过一家人的默契互动、小女孩玩糖纸的动作、街边玩耍的路人，来表现这一天的平常以及这个家庭的和谐氛围。\n突然，车离奇的撞上了路外的树。\n第二乐章 复三部曲式或变奏曲，慢板。\n女主茱莉的丈夫、女儿，因为车祸和她阴阳两隔。寻死不成，她开始漫长的适应过程。\n茱莉变卖了家里的东西，安顿园丁和管家的生活， 以决绝的方式和一直对她存有感情的助手道别，自己搬进市区的公寓，想要忘记过去生活的痕迹。\n但是不适就像水一样无缝隙的将她包围。过去的生活习惯、一起创作的乐曲、国家要她续写交响曲的请求…人们的互动总是强行把她拉进生活中。\n第三乐章 小步舞曲或谐谑曲，中、快板。\n茱莉不想与周围世界产生关联，但是她控制不了他人。莫名和同栋公寓的prostitute产生了联系以后，她的平静生活慢慢被打破，一次意外看到的电视节目把茱莉彻底逼回现实。助手接受国家委托，续写本已被她销毁的交响曲；丈夫生命中还有另一个女子。原本小心封存的回忆突然就炸开了。她去找助手，责问他凭什么去续写这首乐曲；她去找亡夫的情人，却只能“平静”接受对方已有丈夫骨肉的事实……（女主这段表演真的很精彩）\n茱莉重新审视自己的生活、感情。她把准备变卖的房产赠给了丈夫的情人；重新投入作曲，把一直萦绕在脑内的旋律写出来…\n第四乐章 终曲。通常是快板，经常采用会选取时或者回旋奏鸣曲式。也就是对主题进行呼应。\n电影的最后是本剧的高潮，像走马灯一样回顾了茱莉的遭遇。戴着爱的十字架的男孩突然惊醒、在过去徘徊的母亲永远的沉寂、混乱生活的prostitute的沉思、及情人对新生儿的微笑…伴着最终成曲，回顾了茱莉这段人生经历。\n导演的布局真的太妙了，每一个要素都紧紧地联系在一起。蓝色基调、交响乐贯穿全剧，既烘托氛围，又表达茱莉沉默背后压抑的感情……\n后记 本来想把三色系列都写一遍，但好几遍《蓝》看下来感觉还是需要时间去消化。基耶斯洛夫斯基的电影值得反复看的，不同的人生阶段应该也会有不同的看法。\n一人所学有限，若有疏漏，还请大家批评指正。\n","date":"2021-04-24T11:47:00Z","permalink":"https://imzsh.com/posts/20210424/","section":"posts","tags":["转载","电影"],"title":"基耶斯洛夫斯基和他的现实"},{"categories":["编程技术"],"contents":"一、搭建 docsify 是一个类似 vuepress, gitbook 等静态文档程序，但是对比之前，个人还是喜欢 docsify 的风格和源码。不想要那么多附带的功能，能满足写文章，目录的功能就行了。\n点击查看demo.\n打开终端输入指令，把本地环境搭建起来：\nnpm install docsify-cli -g 初始化文档：\ndocsify init ./docs 本地运行：\ndocs serve 然后在浏览器打开 localhost:3000 就可以查看了。\n二、页面 我觉得最基本的页面就三个\n _navbar.md  导航栏\n* [关于](/) 然后在 index.html 调用。\nwindow.$docsify = { ... loadNavbar: true, ... } 如图：\n_sidebar.md  侧边栏\n* [基于docsify搭建一个文档](基于docsify搭建一个文档.md) 在 index.html 调用。\nwindow.$docsify = { ... loadSidebar: true, ... } 如图：\nREADME.md  主页\n## about  博客地址：[https://shuxhan.com](https://shuxhan.com) 作者：shuxhan 时间：2021.04.20 本文档作为博客的文章备份，如果对文章有一些其他的评论可以直接点击链接到原地址。 如图：\n","date":"2021-04-21T20:19:00Z","permalink":"https://imzsh.com/posts/20210421/","section":"posts","tags":["文档"],"title":"基于 docsify 搭建一个文档"},{"categories":["生活随笔"],"contents":"清明时节雨纷纷，路上行人欲断魂。\n云栖竹径 ","date":"2021-04-03T16:13:00Z","permalink":"https://imzsh.com/posts/20210403/","section":"posts","tags":["旅游"],"title":"清明时节雨纷纷"},{"categories":["编程技术"],"contents":"之所以学习 Python ，本意是想写一些脚本之类的程序，用来在浏览器爬一些自己想要的文字，图片等资料，这些程序其实 GitHub 蛮多的，但奈何我对后端的语言一窍不通，直接拿过来给我用我都不会。\n因此就萌生了先学习 Python 基础知识的想法，一直听说廖雪峰的 Python 教程写的不错，这次趁着这个机会要好好研读一番。也没想说用的多牛逼，至少希望能为自己浅薄的技术栈再增加一点光彩，毕竟我也曾梦想成为一个全栈开发。\n下载安装完 Python 环境,就开始学习吧！\n运行我的第一个python程序 print(\u0026#39;hello,world\u0026#39;) 数据类型 在 Python 中，能直接处理的数据类型有几种，整数、浮点数、字符串、布尔值、空值、变量。\n这与其他语言其实差别并不大，数据类型基本都是相似的，大概只有变量有自己的特性，所以我单独拿出来记录一下。\n变量 python 是一门动态语言，在赋值时可以不断改变，比如：\na = 123 print(a) # 终端输出数值 123 a = \u0026#39;abc\u0026#39; print(a) # 终端输出字符串 abc 这是允许的，而在 Java 中则不行，它是一门静态语言，如果多次赋值会报错。相对来说，动态语言更灵活，当然，各有利弊罢了。\n并且在赋值上面有一个逻辑顺序，比如定义一个 a = 'a' 的变量。在 Python 中其实走了两步，先创造了一个字符串 a ，然后将这个字符串赋值给变量 a 。\n其实这在数学上是有些反逻辑的，x = x + 2 这个计算是行不通的在数学上，但是在计算机中，先计算 x + 2 ，然后将其赋值给左侧的 x ，这是计算机的逻辑。\nx = 1 x = x + 2 print(x) # 3 其实很多计算机语言都是如此，比如我们所熟知的 js 等等。\n如果有多个变量相互赋值的话，都是一行一行执行\na = 1 b = a a = 2 print(a) print(b) 最后输出的结果分别是 2, 1\n Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。 对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。 注意：Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在-2147483648-2147483647。 Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。\u0026mdash;《廖雪峰的官方网站》\n 字符串和编码 Python 提供了两个处理编码的属性，ord 和 chr\nord(\u0026#39;舒\u0026#39;) # 33298 # 将字符串转换为整数表示 chr(33298) # \u0026#39;舒\u0026#39; # 将整数表示的内容转换为字符串 list list 类似于 js 中的 Array，是多个数据的列表，写法如下\n\u0026gt;\u0026gt;\u0026gt; classmates = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] \u0026gt;\u0026gt;\u0026gt; classmates [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] 这时候我们就可以说变量 classmates 是一个 list。\n有一个 len() 可以输出 list 元素的个数\n\u0026gt;\u0026gt;\u0026gt; len(classmates) \u0026gt;\u0026gt;\u0026gt; 3 同时 list 也有索引，从 0 开始，最后一个索引是 len(classmates)-1，同时如果想直接输出最后一个元素，可以使用 classmates[-1].\n\u0026gt;\u0026gt;\u0026gt; classmates[-1] \u0026gt;\u0026gt;\u0026gt; \u0026#39;c\u0026#39; 既然都可以用 -1 表示最后一个元素，能不能用 -2 表示倒数第二个呢？答案是可以的。\n\u0026gt;\u0026gt;\u0026gt; classmates[-2] \u0026gt;\u0026gt;\u0026gt; \u0026#39;b\u0026#39; 另外需要注意的是，在使用索引时不可超出范围，否则会报出下面的错误。\n\u0026gt;\u0026gt;\u0026gt; classmates[4] Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; IndexError: list index out of range list 是一个可变的有序列表，可以往里面添加或者删除元素。\n append 在末尾添加元素  \u0026gt;\u0026gt;\u0026gt; classmates.append(\u0026#39;d\u0026#39;) \u0026gt;\u0026gt;\u0026gt; classmates [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;] insert 在指定位置添加元素  其中 1 是索引，表示在索引为 1 的地方插入元素，后面的元素自然往后顺延。\n\u0026gt;\u0026gt;\u0026gt; classmates.insert(1, \u0026#39;d\u0026#39;) \u0026gt;\u0026gt;\u0026gt; classmates [\u0026#39;a\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] pop 删除末尾的元素  \u0026gt;\u0026gt;\u0026gt; classmates.pop() \u0026#39;c\u0026#39; # 输出的时候被删除的元素 \u0026gt;\u0026gt;\u0026gt; classmates [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;] pop(i) 删除指定位置的元素  \u0026gt;\u0026gt;\u0026gt; classmates.pop(1) \u0026#39;b\u0026#39; # 输出被删除的元素 \u0026gt;\u0026gt;\u0026gt; classmates [\u0026#39;a\u0026#39;, \u0026#39;c\u0026#39;] \u0026gt;\u0026gt;\u0026gt; ","date":"2021-04-01T16:21:00Z","permalink":"https://imzsh.com/posts/20210401/","section":"posts","tags":["笔记","python"],"title":"我的 python 学习笔记"},{"categories":["编程技术"],"contents":"问题产生于需求，因为项目需要适配pc和移动端多套布局，所以某些元素在特定的宽度下会产生错位的现象。\n如果是在css中，可以很好的判断，使用媒体查询可以实时检测页面的宽度，从而给予标签不同的属性。\n@media (max-width:768px){ ... } 在js下可以使用下面这种方法\nwindow.addEventListener(\u0026#39;load\u0026#39;, function() { window.addEventListener(\u0026#39;resize\u0026#39;, function() { console.log(window.innerWidth) var w = window.innerWidth; ... } }) }) 具体操作的细节可以尝试一下，还是很不错的一个方法，同时注意 window ，因为这是个例子我就直接写了，实际编码中，慎用 window 事件。\n","date":"2021-03-26T14:24:00Z","permalink":"https://imzsh.com/posts/20210326/","section":"posts","tags":["js"],"title":"实时监听页面的变化"},{"categories":["编程技术"],"contents":"有一个需求，滚轮滚动到相应位置的时候执行当前的动画，这个动画在footer里面，而网页的主体通过ajax进行渲染，我在js里面调用ajax渲染数据，然后再获取主体的高度，滚动到该高度的时候执行动画。\n本地测试了一下没什么问题，该有的效果都有了。放在服务器上测试发现无论怎么写，都是先获取主体的高度，然后才进行数据的渲染。那么必然高度是一个极小的值，不符合我想要的属性。\n我大致想了两种解决办法，均以失败告终，本地是ajax先执行，服务器是js先执行。\n 让获取高度的事件时间延时500ms，发现最后获取不到事件了； 将该事件写在ajax的success回调里面，结果是只有打开网页第一次能够成功，然后不管刷新多少次均无效，事件被屏蔽，所以方法二也被废除；  最后我想到了，ajax不就是一种异步方法，我将其改为同步不就行，先让ajax执行完在执行js事件。\nasync: false, 我在ajax里面写了async这个方法，false 意思是将其默认为同步获取数据，很好，回到服务器打开控制台，发现是先渲染了数据，才获取了主体的高度，问题得以解决。\n 当然这样做有弊端的，如果接口出问题，ajax渲染失败，那么整个网页的js都将执行不了。不过我想真到了数据都渲染不出的地方，访问网页就没有意义了，所以最后我采用了这种方法。\n ","date":"2021-03-22T15:12:00Z","permalink":"https://imzsh.com/posts/20210322/","section":"posts","tags":["ajax"],"title":"ajax 和 js 事件的执行顺序"},{"categories":["编程技术"],"contents":" 起因是因为IE10不兼容es6，所以引发了一系列的问题。\n 一 使用ajax拼接字符串有很多方法，最简单的莫过于使用es6的语法中的关键符号，\nstr += `\u0026lt;li class=\u0026#34;wrap-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pic-wrap\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pic\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pic-son\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34; ` + item.link + `\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34; ` + item.pic+ `\u0026#34; alt=\u0026#34;缩略图\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;pic-main\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pic-title\u0026#34;\u0026gt; \u0026lt;span\u0026gt;编号：\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; ` + item.title + ` \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;pic-guide\u0026#34;\u0026gt; ` + item.guide + ` \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;pic-link\u0026#34; id=\u0026#34;picLink\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34; ` + item.link + ` \u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;预览\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; ` 可以很快的把模版字符串写好，但是正因为它是es6的新特性，因此对于低版本的浏览器兼容性不太好，报错无效字符。\n二 因此还有一种较为麻烦的写法\u0026quot; '' \u0026quot; ，使用单引号和双引号将标签和字符串连接起来。因为太过繁琐，所以需要特别仔细的查看，一不小心漏个符号，就会导致网页报错。\np = \u0026#34;\u0026lt;li class=\u0026#39;wrap-item\u0026#39;\u0026gt;\u0026#34; +\u0026#34;\u0026lt;div class=\u0026#39;pic-wrap\u0026#39;\u0026gt;\u0026#34; +\u0026#34;\u0026lt;div class=\u0026#39;pic\u0026#39;\u0026gt;\u0026#34; +\u0026#34;\u0026lt;div class=\u0026#39;pic-son-wrap\u0026#39;\u0026gt;\u0026#34; +\u0026#34;\u0026lt;div class=\u0026#39;pic-son\u0026#39;\u0026gt;\u0026#34; +\u0026#34;\u0026lt;a href=\u0026#39;\u0026#34;+item.link+\u0026#34;\u0026#39;\u0026gt;\u0026#34; +\u0026#34;\u0026lt;img src=\u0026#39;\u0026#34;+item.pic+\u0026#34;\u0026#39; alt=\u0026#39;缩略图\u0026#39;\u0026gt;\u0026#34; +\u0026#34;\u0026lt;/a\u0026gt;\u0026#34; +\u0026#34;\u0026lt;/div\u0026gt;\u0026#34; +\u0026#34;\u0026lt;/div\u0026gt;\u0026#34; +\u0026#34;\u0026lt;div class=\u0026#39;pic-main\u0026#39;\u0026gt;\u0026#34; +\u0026#34;\u0026lt;div class=\u0026#39;pic-title\u0026#39;\u0026gt;\u0026#34; +\u0026#34;\u0026lt;span\u0026gt;\u0026#34;+\u0026#34;编号：\u0026#34;+\u0026#34;\u0026lt;/span\u0026gt;\u0026#34;+\u0026#34;\u0026lt;span\u0026gt;\u0026#34;+item.title+\u0026#34;\u0026lt;/span\u0026gt;\u0026#34; +\u0026#34;\u0026lt;/div\u0026gt;\u0026#34; +\u0026#34;\u0026lt;div class=\u0026#39;pic-guide\u0026#39;\u0026gt;\u0026#34; +item.guide +\u0026#34;\u0026lt;/div\u0026gt;\u0026#34; +\u0026#34;\u0026lt;div class=\u0026#39;pic-link\u0026#39; id=\u0026#39;picLink\u0026#39;\u0026gt;\u0026#34; +\u0026#34;\u0026lt;a href=\u0026#39;\u0026#34;+item.link+\u0026#34;\u0026#39;\u0026gt;\u0026#34; +\u0026#34;预览\u0026#34; +\u0026#34;\u0026lt;/a\u0026gt;\u0026#34; +\u0026#34;\u0026lt;/div\u0026gt;\u0026#34; +\u0026#34;\u0026lt;/div\u0026gt;\u0026#34; +\u0026#34;\u0026lt;/div\u0026gt;\u0026#34; +\u0026#34;\u0026lt;/div\u0026gt;\u0026#34; +\u0026#34;\u0026lt;/li\u0026gt;\u0026#34; str += p; 在不同的情况下使用不同的方法，多掌握几种方法总是不亏的，能适用与各种开发环境。\n","date":"2021-03-22T14:54:00Z","permalink":"https://imzsh.com/posts/20210322/","section":"posts","tags":["ajax"],"title":"ajax拼接模版字符串的几种方法"},{"categories":["编程技术"],"contents":"通过jquery进行ajax请求数据是一种较为简便的方式，我简单写了一个本地的data.json文件，然后用get请求数据，下面是部分代码\n// ajax 请求获取数据 function picShow(){ var str = \u0026#39;\u0026#39;; $.ajax({ url:\u0026#39;./js/data.json\u0026#39;, type:\u0026#39;get\u0026#39;, dataType:\u0026#39;json\u0026#39;, success:function(data){ console.log(\u0026#39;success\u0026#39;) }, error: function() { console.log(\u0026#39;error\u0026#39;) } }) } picShow(); 但是这样做有一个弊端，无法在本地预览，因为浏览器禁止客户端直接获取本地数据，这也算一个跨域问题了，不过这也是为了保证用户的安全。当然这对前端来说很不爽！\n其实解决的方法也很简单，通过node服务，用live server在本地跑一下，就可以让ajax获取数据，当然还有其他更好的解决方法，或者直接在服务器跑，通过jsonp等等。\nlive server 不明白的可以百度看看，也是一个技巧。\n","date":"2021-03-19T13:01:00Z","permalink":"https://imzsh.com/posts/20210319/","section":"posts","tags":["ajax","js"],"title":"用ajax请求获取数据"},{"categories":["编程技术"],"contents":"  IE10不支持箭头函数，写js的时候慎用。\n  IE10下对js的语法要求严格，正常参数后如果没有多余的代码，写个,会报错，如果加了删掉就OK，Chrome下不会产生影响。\n  zoom属性能不用，尽量别用。我在Chrome使用zoom进行大小调整，放到IE10运行，整个页面都错位了，找半天才想起来之前给一个容器设置了zoom: 1.1;，真是让人头大。\n  IE10下img标签自带白边，在默认样式里面设置border: none;即可。\n  img { border: none; }  IE10能兼容大部分的html5新标签，唯独不能兼容 main。\n  box-shadow 阴影属性其实IE10是支持的，但是需要注意语法问题，在普通浏览器color可以用rgba,#等写法，但是在IE10下，只能通过#000000写法，#和六位的颜色标记，不可以简写，否则不生效。\n  IE10不兼容es6新语法。\n  ","date":"2021-03-18T22:15:00Z","permalink":"https://imzsh.com/posts/20210318/","section":"posts","tags":["IE","浏览器"],"title":"IE10的兼容性处理"},{"categories":["编程技术"],"contents":"页面监听是我们经常用的一个功能，下面两个段代码表示两个事件，分别在页面滚动500px和1000px的时候触发，在代码中使用了箭头函数。\nwindow.addEventListener(\u0026#39;scroll\u0026#39;, () =\u0026gt; { var scrollTop = document.documentElement.scrollTop if (scrollTop \u0026gt; 500) { console.log(\u0026#39;滚动了500px\u0026#39;) } }) window.addEventListener(\u0026#39;scroll\u0026#39;, () =\u0026gt; { var scrollTop = document.documentElement.scrollTop if (scrollTop \u0026gt; 1000) { console.log(\u0026#39;滚动了1000px\u0026#39;) } }) 但是后面又要求代码兼容到IE10，就不能采用这种写法了。然后我就想使用原生的function写法。\nwindow.onscroll = function() { // ... } 在用的过程中我发现，如果只有一个window.scroll没有任何问题，但是如果有多个window.scroll，后面的就不会生效。\n那么如何解决这个问题呢？\nwindow.scroll只能存在一次，第一个会生效，后面的不生效，可以通过js处理这个问题。\nfunction addEvent(type, toDo) { if (window.attachEvent) { window.attachEvent(\u0026#39;on\u0026#39; + type, function() { toDo.call(window) }) } else { window.addEventListener(type, toDo, false) } } addEvent(\u0026#39;scroll\u0026#39;, function(){ console.log(\u0026#39;第一次调用window.scroll\u0026#39;) } addEvent(\u0026#39;scroll\u0026#39;, function(){ console.log(\u0026#39;第一次调用window.scroll\u0026#39;) } 运行一下，多个scroll可以同时运行。\n","date":"2021-03-17T21:55:00Z","permalink":"https://imzsh.com/posts/20210317/","section":"posts","tags":["IE"],"title":"window.scroll 方法只能存在一次该如何解决？"},{"categories":["编程技术"],"contents":"$(\u0026#34;#test\u0026#34;).click(function () { $(\u0026#39;html,body\u0026#39;).animate({ \u0026#39;scrollTop\u0026#39;: \u0026#39;0\u0026#39; }, 500,) }) 这行代码使用的是jquery的写法，一个500毫秒的动画，这样写在Chrome浏览器等没问题，可以正常运行。\n但是今天在写项目的过程中，要求代码兼容到IE10，没办法，被迫在IE浏览器下运行，结果发现这行代码会报错。这是怎么回事呢？\n简单分析一下，这有点类似js中定时器的写法，setimeout，两个参数，分别代表指定的时间，和定时时间。\n而animate是动画的属性，这个时间共花费500毫秒执行完毕。但是这个不是重点，为什么会报错呢？\n这时候我注意到500后面的,，我突然想到一种可能，先把,删掉。果然不出我所料。控制台不会报错了。\n我猜测，这是由IE的机制引起的，浏览器识别到,的时候，会自动默认后面跟有语句，但是如果空着不写，与浏览器预期的后果不同，就会产生报错。可能IE内核要求也比较严格吧。\n","date":"2021-03-16T10:29:00Z","permalink":"https://imzsh.com/posts/20210316/","section":"posts","tags":["IE","css"],"title":"IE10下`,`符号不能留白"},{"categories":["编程技术"],"contents":"ps：先说点题外话，因为工作的原因很久没更新博客了，最近也是告一段落，处理一了一些事情之后可以安心坐下来，把我的博客重新整理一下。\n今天要讲的是 css3 的一个新属性 animation，也算是一个回顾吧，我只是将平时如何使用，以及一些技巧分享出来。如果想学习更基础的内容，可以点击链接：https://www.runoob.com/css3/css3-animations.html，网上类似的教程还是蛮多的。\n这篇文章并不细讲动画的基础属性，而是稍微扩展一个话题：怎么让 css3 里面的动画属性看起来更流畅？\n当然在讲之前还是要简单介绍一下 animation 基本属性。\nanimation 属性 animation 属性有下面几个值：\n @keyframes | 动画本身（最重要的） animation-name | 动画的名称 animation-duration | 动画所经历的时间 animation-fill-mode | 当属性为 forwards 时，动画停留在最后一帧  动画主要可以用于一些官网特效，或者自适应的布局。\n如何写一个最基本的动画 动画就是由一个状态到另一个状态的过程，比如从左到右的一个移动过程。\n首先要先了解各个属性具体的作用是什么，就拿从白到黑举个例子吧，首先写一个 @keyframes 的动画过程。\n@keyframes leftright { 0% { transform: translateX(0); } 100% { transform: translateX(100px); } } 这段代码的意思就是有一个名为 leftright 的动画，将容器从左到右移动了 100px。\n然后我们进一步补全这个动画。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;动画\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .demo { width: 100px; height: 100px; background: #000; animation-name: leftright; animation-duration: 1s; } @keyframes leftright { 0% { transform: translateX(0); } 100% { transform: translateX(100px); } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;demo\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 然后我们到浏览器跑一下这个页面试试看，可以看到一个黑色的方块从左右移动了 100px 的距离，总计1秒完成。\n但是这个动画结束的很突兀，容器突然回到原地，这是为什么呢？因为我们没有保留最后一帧，这需要一个属性，最上面我们讲过了。\n.demo { width: 100px; height: 100px; background: #fff; animation-name: leftright; /* 将动画的名称绑定到该标签 */ animation-duration: 1s; /* 给动画的过程设一个时长 */ animation-fill-mode: forwards; /* 动画停留在最后一帧 */ } 运行一下，可以看到动画最后停住了。\n让动画拥有一个惯性 我们仔细观察这个动画，发现他整个过程不拖泥带水，很迅速的完成了，但是我发现一个问题，整个过程不流畅圆滑，很死板，从左到右，一点也不圆滑。\n分析一下，因为缺少了一个日常生活的习惯动画，那就是惯性，这个属性可不存在啊，没法直接设置，只能通过动画本身的属性来进行调整，继续看这一段代码。\n@keyframes leftright { 0% { transform: translateX(0); } 100% { transform: translateX(100px); } } 0%代表开始，100%代表结束，他们指的是一个时间节点，在这个时间点动画要运行到他们指定的位置。\n所以我们可以添加一个新的时间节点，50%，我们让当时间过了一半的时候，方块运行到 120px 的位置，然后再折回来。\n下面是完整的代码，可以复制到本地，自己运行一下试试看。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;动画\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .demo { width: 100px; height: 100px; background: #000; animation-name: leftright; animation-duration: 1s; animation-fill-mode: forwards; } @keyframes leftright { 0% { transform: translateX(0); } 50% { transform: translateX(120px); } 100% { transform: translateX(100px); } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;demo\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 修改完之后，到浏览器看一下效果。\n是不是流畅了很多，有了一种惯性的感觉，这一点在工作中如何遇到写动画的需求就很关键了，怎么让用户的体验更强，是一门技巧。\n虽说这都是一些基础的东西，但是我觉得体验感上去了，网站的回头率才会更高。打一个比方，去某个商城网站购物，整个页面看起来很舒服，特效细节很流畅，是不是就增加了购物的欲望。虽然这么说很浅薄，但是真的会有一些心里作用。\n如何用好动画特效，是一门学问，将 css 玩出花样来，可不是那么简单的。\n","date":"2021-03-14T07:31:00Z","permalink":"https://imzsh.com/posts/20210314/","section":"posts","tags":["css"],"title":"怎么让 css3 里面的动画属性看起来更流畅？"},{"categories":["编程技术"],"contents":"最近正在面试，遇到了很多有意思的东西，比如今天，在面试前先做了一套面试题，其中有这么一道题，觉得挺有意思，之前也没见过，就打算记录下来：\n\u0026lt;!-- chrome浏览器12px字体大小以下无法显示，均显示为12px，应该怎么解决。 --\u0026gt; 我确实有点蒙，在之前写代码的时候，没有遇到过这样的情况，不过既然这样问了，就得想出解决的办法。\n首先我想到之前的一个问题，0.5px 的边框该如何实现，通过 scale(0.5) 可以实现，这是 css3 新属性。\n所以当时我就写了通过 transform:scale() 可以实现。不过后续在面试的中，面试官也没有提及这些问题。\n 回到家之后，吃完饭坐在电脑旁，正准备逛一逛 github ，突然想起来了这么一个问题，就自己测试了一遍：\n\u0026lt;div style=\u0026#34;font-size: 13px;\u0026#34;\u0026gt; 测试 \u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-size: 12px;\u0026#34;\u0026gt; 测试 \u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-size: 11px;\u0026#34;\u0026gt; 测试 \u0026lt;/div\u0026gt; 竟然真的存在这样的问题，Chrome 12px 以下的字体无法正常显示，均显示为12px。\n然后我用 scale 设置了一下属性，\n\u0026lt;div style=\u0026#34;font-size: 13px;\u0026#34;\u0026gt; 测试 \u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-size: 12px;\u0026#34;\u0026gt; 测试 \u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-size: 11px;transform: scale(0.5);\u0026#34;\u0026gt; 测试 \u0026lt;/div\u0026gt; 字体确实可以再次缩小到自己想到的程度，但是存在一些弊端，所有带有长度的属性均被缩小，比如图中的div的长度，本来默认是 100% ，但是显示只有原来的一半了。\n虽然存在这么个问题，但是按照我自己的预估，平时我们浏览的网站基本没有低于12px大小的字体吧！反正我是没有遇到过，我估计面试题也是想考验我们对一些生僻知识的处理吧，不过也不算生僻，前有0.5px，后有12px，其实都大同小异。\n在遇到这个问题的时候，确实可以通过 scale() 处理一下，然后在认真设置其他属性，尽量避免更多的弊端。\n","date":"2021-02-26T22:38:00Z","permalink":"https://imzsh.com/posts/20210226/","section":"posts","tags":["css","浏览器"],"title":"chrome浏览器无法显示12px以下的字体"},{"categories":["编程技术"],"contents":"很多小伙伴在做个人网站或者博客时，总能用到各种各样的图床工具，毕竟在写文章的时候需要插入一些图片，我也不例外，来盘点一下之前用的工具，\n 最开始是找一些免费的图床网站，比如sm.ms等，但是后来为了安全性和稳定性考虑放弃了这种。 然后是在 github，gitee 仓库存储的（缺点就是github访问速度有些尴尬，gitee其实挺好的，但时用起来怪怪的） 阿里云oss储存桶（挺好使的，搭配picgo软件，一年也才9.9，但是链接很尴尬，直接下载，无法右键访问图片，搜过了解决办法，嫌太麻烦就搁置了，至今在那放着） 后来在自己的服务器建一个网站，把图片放进去，使用的时候直接引用链接（缺点就是上传太麻烦，然后就是图片太占内存了，影响服务器的性能） 然后就是今天的重头戏，autoPicCdn ，一款开源软件  也是基于github实现图床功能，后来才知道可以用 jsdelivr 给资源进行加速，autoPicCdn 就是基于这样的功能实现。\n今天就讲讲用宝塔面板配置 autoPicCdn 的流程吧！\n准备工作  进入 github 仓库下载资源到本地。 https://github.com/yumusb/autoPicCdn  在 github 建立一个新的仓库，自由命名，我的是 shuxhan/pic-cdn ，简单易懂 去这个页面 https://github.com/settings/tokens生成一个有写权限的 token（repo：Full control of private repositories 和write:packages 前打勾，然后点击确定，会生成一个 token码，记住它，最好复制到你的记事本，不然一刷新网页就不会再显示了  然后解压。\n上传到服务器 先利用自己的域名添加一个新的站点，比如我使用的是 img.shuxhan.com ，然后建立数据库。\n站点建立成功后，进入目录将默认生成的文件删除，然后点击上传，找到刚才解压的文件，点击上传即可。\n配置文件 找到目录中的 up.php 配置文件，\n将下面两个地方配置好，具体的内容在代码里。\n//必选项 define(\u0026#34;TYPE\u0026#34;,\u0026#34;GITHUB\u0026#34;);//选择github //define(\u0026#34;TYPE\u0026#34;,\u0026#34;GITEE\u0026#34;);//选择gitee，如果使用gitee，需要手动建立master分支，可以看这里 https://gitee.com/help/articles/4122  define(\u0026#34;USER\u0026#34;,\u0026#34;shuxhan\u0026#34;);//你的GitHub/Gitee的用户名  define(\u0026#34;REPO\u0026#34;,\u0026#34;pic-cdn\u0026#34;);//必须是上面用户名下的 公开仓库  define(\u0026#34;MAIL\u0026#34;,\u0026#34;shuxhan@163.com\u0026#34;);//邮箱无所谓，随便写  define(\u0026#34;TOKEN\u0026#34;,\u0026#34;971b0a96ff5af545d5fe081f829cf5542007e70b\u0026#34;); // Github 去这个页面 https://github.com/settings/tokens生成一个有写权限的token（repo：Full control of private repositories 和write:packages前打勾） // gitee 去往这个页面 https://gitee.com/personal_access_tokens //数据库配置文件 //请确保把当前目录下的 pic.sql 导入到你的数据库 $database = array( \u0026#39;dbname\u0026#39; =\u0026gt; \u0026#39;img\u0026#39;,//你的数据库名字  \u0026#39;host\u0026#39; =\u0026gt; \u0026#39;localhost\u0026#39;, \u0026#39;port\u0026#39; =\u0026gt; 3306, \u0026#39;user\u0026#39; =\u0026gt; \u0026#39;img\u0026#39;,//你的数据库用户名  \u0026#39;pass\u0026#39; =\u0026gt; \u0026#39;img\u0026#39;,//你的数据库用户名对应的密码 ); 然后最重要的一步是，将目录下的 pic.sql 导入刚才建立并链接的数据库，先右键复制 pic.sql 文件，然后进入路径\n点击粘贴即可。\n测试访问 打开你的浏览器，输入绑定的站点\n然后随便截个图，然后拖动到上传窗口，显示上传成功，下面是图片的廉价，复制 markdown 可以在写文章的时候使用辣！\n通过 jsdelivr 加速，结果非常令人满意，以后就决定使用 github + jsdelivr + autoPicCdn 来做图床工具啦！\n","date":"2021-02-25T22:41:00Z","permalink":"https://imzsh.com/posts/20210225/","section":"posts","tags":["工具"],"title":"使用宝塔面板安装 autoPicCdn 图床工具"},{"categories":["生活随笔"],"contents":"因为疫情防控等因素，本来打算过年回老家的，但是最终决定留在了杭州，不过也好，还是和家人在一起，倒也落个轻松自在，一起吃吃饭，出去玩玩什么的。\n因此这两天先后去了三个景点。西溪湿地公园，良渚古城遗址，大宋千古情。\n本文依旧是相册，但是我的拍照能力真的还需要很大的提高，随便放几张献丑了。\n西溪 良渚 宋城 ","date":"2021-02-14T23:00:00Z","permalink":"https://imzsh.com/posts/20210214/","section":"posts","tags":["旅游"],"title":"西溪，良渚，宋城"},{"categories":["编程技术"],"contents":"typecho 博客建立完成之后，会发现如果插入一些小表情，页面渲染完之后，表情不会显示，并且表情之后的内容全部消失，导致体验感很差。\n表情无法显示的原因是 uft-8 编码的问题，无法识别小表情，需要将其改成 utf8mb4\n第一步，进入数据库 首先登陆博客后台的数据库，然后点击 sql ，输入下列代码：\nalter table typecho_comments convert to character set utf8mb4 collate utf8mb4_unicode_ci; alter table typecho_contents convert to character set utf8mb4 collate utf8mb4_unicode_ci; alter table typecho_fields convert to character set utf8mb4 collate utf8mb4_unicode_ci; alter table typecho_metas convert to character set utf8mb4 collate utf8mb4_unicode_ci; alter table typecho_options convert to character set utf8mb4 collate utf8mb4_unicode_ci; alter table typecho_relationships convert to character set utf8mb4 collate utf8mb4_unicode_ci; alter table typecho_users convert to character set utf8mb4 collate utf8mb4_unicode_ci; 直接复制，然后点击右下角的执行\n第二步，修改 typecho 配置文件 我使用的宝塔面板，点击左侧 网站 ，然后点击我们这个网站的根目录，进入之后，可以找到一个 config.inc.php 的文件，进入然后滑到最下面。\n**可以发现 'charset' =\u0026gt; 'utf8',**下面我为了更直观的显示，将其注释掉，重新写的，实际操作中，将 utf8 改为 utf8mb4 即可。\n/** 定义数据库参数 */ $db = new Typecho_Db(\u0026#39;Pdo_Mysql\u0026#39;, \u0026#39;typecho_\u0026#39;); $db-\u0026gt;addServer(array ( \u0026#39;host\u0026#39; =\u0026gt; \u0026#39;localhost\u0026#39;, \u0026#39;user\u0026#39; =\u0026gt; \u0026#39;blog\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;blog\u0026#39;, /** \u0026#39;charset\u0026#39; =\u0026gt; \u0026#39;utf8\u0026#39;, */ \u0026#39;charset\u0026#39; =\u0026gt; \u0026#39;utf8mb4\u0026#39;, \u0026#39;port\u0026#39; =\u0026gt; \u0026#39;3306\u0026#39;, \u0026#39;database\u0026#39; =\u0026gt; \u0026#39;blog\u0026#39;, ), Typecho_Db::READ | Typecho_Db::WRITE); Typecho_Db::set($db); 在文章后台重新输入小表情，然后保存回到页面，小表情成功显示了。\n","date":"2021-02-04T19:47:00Z","permalink":"https://imzsh.com/posts/20210204/","section":"posts","tags":["博客","数据库"],"title":"typecho 博客小表情无法显示问题"},{"categories":["编程技术"],"contents":"在浏览掘金社区的时候，发现一个很有意思的小彩蛋，在个人主页将鼠标悬浮在头像上，会不停的加速旋转，我感觉挺有意思，f12 看看这个样式怎么写的，发现用到了 css3 的相关技术。\n下面是具体代码，img 是头像元素，直接写在 hover 中即可。\nimg:hover { transform: rotate(666turn); transition-delay: 1s; transition-property: all; transition-duration: 59s; transition-timing-function: cubic-bezier(.34,0,.84,1); } ps：今天是2021年2月4号，农历腊月二十三，传统的小年，祝朋友们小年愉快。不知不觉，快过年了。\n","date":"2021-02-03T19:43:00Z","permalink":"https://imzsh.com/posts/20210203/","section":"posts","tags":["css"],"title":"掘金个人主页头像旋转效果"},{"categories":["生活随笔"],"contents":"昨天杭州温度很高，应该算是最近一段时间最高的一天了，太阳也很温暖。恰逢周日，便与家人去湘湖转一圈，散散心，看看风景。\n之前也来过一次，但都是在外围看了看，这次深入到内部，发现风景真的不错，杭州最出名的应该算西湖了，但我觉得，湘湖的风光并不逊色于西湖。\n勾践越王城 洗马池 ","date":"2021-02-01T19:48:00Z","permalink":"https://imzsh.com/posts/20210201/","section":"posts","tags":["旅游"],"title":"湘湖游玩相册"},{"categories":["编程技术"],"contents":"一、javascript 由三部分组成 1.ECMAScript（核心） 它规定了语言的组成部分：法语，类型，语句，关键字，操作符等等。\n2.DOM（文档对象模型） DOM 把整个页面映射为一个多层节点结果，开发人员可借助DOM提供的API，轻松地删除、添加、替换或修改任何节点。\n3.BOM（浏览器对象模型） 支持可以访问和操作浏览器窗口的浏览器对象模型，开发人员可以控制浏览器显示的页面以外的部分。\n二、什么是ES5？ 作为ECMAScript第五个版本（第四版因为过于复杂废弃了），浏览器支持情况可看第一副图，增加特性如下。\n1.strict模式 严格模式，限制一些用法，\u0026lsquo;use strict\u0026rsquo;;\n2.Array增加方法 增加了every、some 、forEach、filter 、indexOf、lastIndexOf、isArray、map、reduce、reduceRight方法\nPS： 还有其他方法 Function.prototype.bind、String.prototype.trim、Date.now\n3.Object方法  Object.getPrototypeOf Object.create Object.getOwnPropertyNames Object.defineProperty Object.getOwnPropertyDescriptor Object.defineProperties Object.keys Object.preventExtensions / Object.isExtensible Object.seal / Object.isSealed Object.freeze / Object.isFrozen  PS：只讲有什么，不讲是什么。\n2.什么是ES6? ECMAScript6在保证向下兼容的前提下，提供大量新特性，目前浏览器兼容情况如下：\nES6特性如下：\n  块级作用域 关键字let, 常量const\n  对象字面量的属性赋值简写（property value shorthand）\n  var obj = { // __proto__  __proto__: theProtoObj, // Shorthand for ‘handler: handler’  handler, // Method definitions  toString() { // Super calls  return \u0026#34;d \u0026#34; + super.toString(); }, // Computed (dynamic) property names  [ \u0026#39;prop_\u0026#39; + (() =\u0026gt; 42)() ]: 42 }; 赋值解构  let singer = { first: \u0026#34;Bob\u0026#34;, last: \u0026#34;Dylan\u0026#34; }; let { first: f, last: l } = singer; // 相当于 f = \u0026#34;Bob\u0026#34;, l = \u0026#34;Dylan\u0026#34; let [all, year, month, day] = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/.exec(\u0026#34;2015-10-25\u0026#34;); let [x, y] = [1, 2, 3]; // x = 1, y = 2 函数参数 - 默认值、参数打包、 数组展开（Default 、Rest 、Spread）  //Default function findArtist(name=\u0026#39;lu\u0026#39;, age=\u0026#39;26\u0026#39;) { ... } //Rest function f(x, ...y) { // y is an Array  return x * y.length; } f(3, \u0026#34;hello\u0026#34;, true) == 6 //Spread function f(x, y, z) { return x + y + z; } // Pass each elem of array as argument f(...[1,2,3]) == 6 箭头函数 Arrow functions  (1) 简化了代码形式，默认return表达式结果。\n(2) 自动绑定语义this，即定义函数时的this。如上面例子中，forEach的匿名函数参数中用到的this。\n6.字符串模板 Template strings\nvar name = \u0026#34;Bob\u0026#34;, time = \u0026#34;today\u0026#34;; `Hello ${name}, how are you ${time}?` // return \u0026#34;Hello Bob, how are you today?\u0026#34; Iterators（迭代器）+ for..of  迭代器有个next方法，调用会返回：\n(1) 返回迭代对象的一个元素：{ done: false, value: elem }\n(2) 如果已到迭代对象的末端：{ done: true, value: retVal }\nfor (var n of ['a','b','c']) {\rconsole.log(n);\r}\r// 打印a、b、c\r 生成器 （Generators）\n  Class\n  Class，有constructor、extends、super，但本质上是语法糖（对语言的功能并没有影响，但是更方便程序员使用）。\nclass Artist { constructor(name) { this.name = name; } perform() { return this.name + \u0026#34; performs \u0026#34;; } } class Singer extends Artist { constructor(name, song) { super.constructor(name); this.song = song; } perform() { return super.perform() + \u0026#34;[\u0026#34; + this.song + \u0026#34;]\u0026#34;; } } let james = new Singer(\u0026#34;Etta James\u0026#34;, \u0026#34;At last\u0026#34;); james instanceof Artist; // true james instanceof Singer; // true  james.perform(); // \u0026#34;Etta James performs [At last]\u0026#34; Modules  ES6的内置模块功能借鉴了CommonJS和AMD各自的优点：\n(1) 具有CommonJS的精简语法、唯一导出出口(single exports)和循环依赖(cyclic dependencies)的特点。\n(2) 类似AMD，支持异步加载和可配置的模块加载。\n// lib/math.js export function sum(x, y) { return x + y; } export var pi = 3.141593; // app.js import * as math from \u0026#34;lib/math\u0026#34;; alert(\u0026#34;2π = \u0026#34; + math.sum(math.pi, math.pi)); // otherApp.js import {sum, pi} from \u0026#34;lib/math\u0026#34;; alert(\u0026#34;2π = \u0026#34; + sum(pi, pi)); Module Loaders: // Dynamic loading – ‘System’ is default loader System.import(\u0026#39;lib/math\u0026#39;).then(function(m) { alert(\u0026#34;2π = \u0026#34; + m.sum(m.pi, m.pi)); }); // Directly manipulate module cache System.get(\u0026#39;jquery\u0026#39;); System.set(\u0026#39;jquery\u0026#39;, Module({$: $})); // WARNING: not yet finalized Map + Set + WeakMap + WeakSet  四种集合类型，WeakMap、WeakSet作为属性键的对象如果没有别的变量在引用它们，则会被回收释放掉。\n// Sets var s = new Set(); s.add(\u0026#34;hello\u0026#34;).add(\u0026#34;goodbye\u0026#34;).add(\u0026#34;hello\u0026#34;); s.size === 2; s.has(\u0026#34;hello\u0026#34;) === true; // Maps var m = new Map(); m.set(\u0026#34;hello\u0026#34;, 42); m.set(s, 34); m.get(s) == 34; //WeakMap var wm = new WeakMap(); wm.set(s, { extra: 42 }); wm.size === undefined // Weak Sets var ws = new WeakSet(); ws.add({ data: 42 });//Because the added object has no other references, it will not be held in the set Math + Number + String + Array + Object APIs  一些新的API\nNumber.EPSILON Number.isInteger(Infinity) // false Number.isNaN(\u0026#34;NaN\u0026#34;) // false  Math.acosh(3) // 1.762747174039086 Math.hypot(3, 4) // 5 Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2  \u0026#34;abcde\u0026#34;.includes(\u0026#34;cd\u0026#34;) // true \u0026#34;abc\u0026#34;.repeat(3) // \u0026#34;abcabcabc\u0026#34;  Array.from(document.querySelectorAll(\u0026#39;*\u0026#39;)) // Returns a real Array Array.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior  [0, 0, 0].fill(7, 1) // [0,7,7] [1, 2, 3].find(x =\u0026gt; x == 3) // 3 [1, 2, 3].findIndex(x =\u0026gt; x == 2) // 1 [1, 2, 3, 4, 5].copyWithin(3, 0) // [1, 2, 3, 1, 2] [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;].entries() // iterator [0, \u0026#34;a\u0026#34;], [1,\u0026#34;b\u0026#34;], [2,\u0026#34;c\u0026#34;] [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;].keys() // iterator 0, 1, 2 [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;].values() // iterator \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;  Object.assign(Point, { origin: new Point(0,0) }) Proxies  使用代理（Proxy）监听对象的操作，然后可以做一些相应事情。\nvar target = {}; var handler = { get: function (receiver, name) { return `Hello, ${name}!`; } }; var p = new Proxy(target, handler); p.world === \u0026#39;Hello, world!\u0026#39;; 可监听的操作： get、set、has、deleteProperty、apply、construct、getOwnPropertyDescriptor、defineProperty、getPrototypeOf、setPrototypeOf、enumerate、ownKeys、preventExtensions、isExtensible。\nSymbols  Symbol是一种基本类型。Symbol 通过调用symbol函数产生，它接收一个可选的名字参数，该函数返回的symbol是唯一的。\nvar key = Symbol(\u0026#34;key\u0026#34;); var key2 = Symbol(\u0026#34;key\u0026#34;); key == key2 //false Promises  Promises是处理异步操作的对象，使用了 Promise 对象之后可以用一种链式调用的方式来组织代码，让代码更加直观（类似jQuery的deferred 对象）。\nfunction fakeAjax(url) { return new Promise(function (resolve, reject) { // setTimeouts are for effect, typically we would handle XHR  if (!url) { return setTimeout(reject, 1000); } return setTimeout(resolve, 1000); }); } // no url, promise rejected fakeAjax().then(function () { console.log(\u0026#39;success\u0026#39;); },function () { console.log(\u0026#39;fail\u0026#39;); }); ","date":"2021-01-20T19:58:00Z","permalink":"https://imzsh.com/posts/20210120/","section":"posts","tags":null,"title":"ES5 和 ES6 的区别？"},{"categories":["编程技术"],"contents":"1.webpack 的核心概念  entry（入口）：一个可执行模块或者库的入口。定义了打包后的入口文件。 output（出口）：指示 webpack 如何去输出，以及在哪里输出。 path: 打包文件存放的绝对路径 publicPath: 网站运行时的访问路径 filename: 打包后的文件名 module（模块）：在 webpack 里，一切皆模块，一个模块对应一个文件。webpack 会从配置的 entry 中开始递归找出所有依赖的模块。 chunk（代码块）：一个 chunk 由多个 模块 组合而成。可以将可执行的模块和他所依赖的模块组合成一个 chunk ，这就是打包。 loader（模块转换器）：用于把一个模块原内容按照需求转换成新的内容。例如：es6 转换为 es5，scss 转换为 css 等。 plugin（扩展）：扩展webpack功能的插件。在webpack构建的生命周期节点上加入扩展hook，添加功能。  2.webpack 构建流程  初始化参数：解析 webpack 的配置参数，合并 shell 传入和 webpack.config.js 文件配置的参数，形成最后的配置结果。 开始编译：上一步得到的参数初始化 compiler 对象，注册所有配置的插件，插件监听 webpack 构建生命周期的事件节点，做出相应的反应，执行对象的 run 方法开始执行编译。 确定入口：其配置的 entry 入口，开始解析文件构建的 AST 语法树，找出依赖，递归下去。 编译模块：根据文件类型和 loader 配置，调用所有配置的 loader 对文件进行转换，再找出该模块依赖的模块，再递归本步骤知道所有入口依赖的文件都经过了本步骤的处理。 完成模块编译并输出：递归完后，得到每个文件结果，包含了每个模块及她们之间的依赖关系，根据 entry 配置生成代码块 chunk 。 输出完成：输出所有的 chunk 到文件系统。  3.有哪些常见的 loader ？  babel-loader：把es6转成es5； css-loader：加载css，支持模块化，压缩，文件导入等特性； style-loader：把css代码注入到js中，通过dom操作去加载css； eslint-loader：通过Eslint检查js代码； image-loader：加载并且压缩图片晚间； file-loader：文件输出到一个文件夹中，在代码中通过相对url去引用输出的文件； url-loader：和file-loader类似，文件很小的时候可以base64方式吧文件内容注入到代码中。 source-map-loader：加载额外的source map文件，方便调试。  4.业务场景和对应解决方案 1.单页应用 一个单页应用需要配置一个entry指明执行入口，web-webpack-plugin里的WebPlugin可以自动的完成这些工作：webpack会为entry生成一个包含这个入口的所有依赖文件的chunk，但是还需要一个html来加载chunk生成的js，如果还提取出css需要HTML文件中引入提取的css。\n一个简单的webpack配置文件例子：\nconst { WebPlugin } = require(\u0026#39;web-webpack-plugin\u0026#39;); module.exports = { entry: { app: \u0026#39;./src/doc/index.js\u0026#39;, home: \u0026#39;./src/doc/home.js\u0026#39; }, plugins: [ // 一个WebPlugin对应生成一个html文件  new WebPlugin({ //输出的html文件名称  filename: \u0026#39;index.html\u0026#39;, //这个html依赖的`entry`  requires: [\u0026#39;app\u0026#39;,\u0026#39;home\u0026#39;], }), ], };  说明：require: [\u0026lsquo;app\u0026rsquo;, \u0026lsquo;home\u0026rsquo;]指明这个html依赖哪些entry，entry生成的js和css会自动注入到html中。\n 还支持配置这些资源注入方式，支持如下属性：\n _dist只有在生产环境中才引入的资源； _dev只有在开发环境中才引入的资源； _inline把资源的内容潜入到html中； _ie只有IE浏览器才需要引入的资源。  这些属性可以通过在js里配置，看个简单例子：\nnew WebPlugin({ filename: \u0026#39;index.html\u0026#39;, requires: { app:{ _dist:true, _inline:false, } }, }), 这些属性还可以在模板中设置，使用模板好处就是可以灵活的控制资源的注入点\nnew WebPlugin({ filename: \u0026#39;index.html\u0026#39;, template: \u0026#39;./template.html\u0026#39;, }), \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-cn\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;app?_inline\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;ie-polyfill?_ie\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;react-body\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; WebPlugin插件借鉴了fis3的思想，补足了webpack缺失的以HTML为入口的功能。想了解WebPlugin的更多功能，见文档。\n2.一个项目管理多个单页面 一个项目中会包含多个单页应用，虽然多个单页面应用可以合成一个，但是这样做会导致用户没有访问的部分也加载了，如果项目中有很多的单页应用。为每一个单页应用配置一个entry和WebPlugin？如果又新增，又要新增webpack配置，这样做麻烦，这时候有一个插件web-webpack-plugin里的AutoWebPlugin方法可以解决这些问题。\nmodule.exports = { plugins: [ // 所有页面的入口目录  new AutoWebPlugin(\u0026#39;./src/\u0026#39;), ] }; 分析：\n AutoWebPlugin会把./src/目录下所有每个文件夹作为一个单页页面的入口，自动为所有的页面入口配置一个 WebPlugin 输出对应的html。 要新增一个页面就在 ./src/ 下新建一个文件夹包含这个单页应用所依赖的代码，AutoWebPlugin 自动生成一个名叫文件夹名称的html文件。  3.代码分隔优化 一个好的代码分割对浏览器首屏效果提升很大。\n最常见的react体系：\n 先抽出基础库react react-dom redux react-redux到一个单独的文件而不是和其它文件放在一起打包为一个文件，这样做的好处是只要你不升级他们的版本这个文件永远不会被刷新。如果你把这些基础库和业务代码打包在一个文件里每次改动业务代码都会导致文件hash值变化从而导致缓存失效浏览器重复下载这些包含基础库的代码。所以把基础库打包成一个文件。  // vender.js 文件抽离基础库到单独的一个文件里防止跟随业务代码被刷新 // 所有页面都依赖的第三方库 // react基础 import \u0026#39;react\u0026#39;; import \u0026#39;react-dom\u0026#39;; import \u0026#39;react-redux\u0026#39;; // redux基础 import \u0026#39;redux\u0026#39;; import \u0026#39;redux-thunk\u0026#39;; // webpack配置 { entry: { vendor: \u0026#39;./path/to/vendor.js\u0026#39;, }, } 通过CommonsChunkPlugin可以提取出多个代码块都依赖的代码形成一个单独的chunk。在应用有多个页面的场景下提取出所有页面公共的代码减少单个页面的代码，在不同页面之间切换时所有页面公共的代码之前被加载过而不必重新加载。所以通过CommonsChunkPlugin可以提取出多个代码块都依赖的代码形成一个单独的chunk。  4.构建服务端渲染 服务端渲染的代码要运行在nodejs环境，和浏览器不同的是，服务端渲染代码需要采用commonjs规范同时不应该包含除js之外的文件比如css。\nwebpack配置如下：\nmodule.exports = { target: \u0026#39;node\u0026#39;, entry: { \u0026#39;server_render\u0026#39;: \u0026#39;./src/server_render\u0026#39;, }, output: { filename: \u0026#39;./dist/server/[name].js\u0026#39;, libraryTarget: \u0026#39;commonjs2\u0026#39;, }, module: { rules: [ { test: /\\.js$/, loader: \u0026#39;babel-loader\u0026#39;, }, { test: /\\.(scss|css|pdf)$/, loader: \u0026#39;ignore-loader\u0026#39;, }, ] }, }; 分析一下：\n target: 'node' 指明构建出代码要运行在node环境中。 libraryTarget: 'commonjs2' 指明输出的代码要是 commonjs 规范。 {test: /\\.(scss|css|pdf)$/,loader: 'ignore-loader'} 是为了防止不能在node里执行服务端渲染也用不上的文件被打包进去。  5.fis3迁移到webpack fis3和webpack有很多相似地方也有不同的地方，相似地方：都采用commonjs规范，不同地方：导入css这些非js资源的方式。\nfis3通过@require \u0026lsquo;./index.scss\u0026rsquo;，而webpack是通过require('./index.scss')。\n如果想把fis3平滑迁移到webpack，可以使用comment-require-loader。\n比如：你想在webpack构建是使用采用了fis3方式的imui模块\nloaders:[{ test: /\\.js$/, loaders: [\u0026#39;comment-require-loader\u0026#39;], include: [path.resolve(__dirname, \u0026#39;node_modules/imui\u0026#39;),] }] 5.自定义webpack扩展 如果你在社区找不到你的应用场景的解决方案，那就需要自己动手了写loader或者plugin了。\n在你编写自定义webpack扩展前你需要想明白到底是要做一个loader还是plugin呢？可以这样判断：\n如果你的扩展是想对一个个单独的文件进行转换那么就编写loader剩下的都是plugin。\n其中对文件进行转换可以是像：\n babel-loader把es6转为es5； file-loader把文件替换成对应的url； raw-loader注入文本文件内容到代码中。  1.编写webpack loader 编写loader非常简单，以comment-require-loader为例：\nmodule.exports = function (content) { return replace(content); }; loader的入口需要导出一个函数，这个函数要干的事情就是转换一个文件的内容。\n函数接收的参数content是一个文件在转换前的字符串形式内容，需要返回一个新的字符串形式内容作为转换后的结果，所有通过模块化倒入的文件都会经过loader。从这里可以看出loader只能处理一个个单独的文件而不能处理代码块。可以参考官方文档。\n2. 编写webpack plugin plugin应用场景广泛，所以稍微复杂点。以end-webpack-plugin为例：\nclass EndWebpackPlugin { constructor(doneCallback, failCallback) { this.doneCallback = doneCallback; this.failCallback = failCallback; } apply(compiler) { // 监听webpack生命周期里的事件，做相应的处理  compiler.plugin(\u0026#39;done\u0026#39;, (stats) =\u0026gt; { this.doneCallback(stats); }); compiler.plugin(\u0026#39;failed\u0026#39;, (err) =\u0026gt; { this.failCallback(err); }); } } module.exports = EndWebpackPlugin; loader的入口需要导出一个class，在new EndWebpackPlugin()的时候通过构造函数传入这个插件需要的参数，在webpack启动的时候会先实例化plugin，再调用plugin的apply方法，插件在apply函数里监听webpack生命周期里的事件，做相应的处理。\nwebpack plugin的两个核心概念：\n compiler：从webpack启动到退出只存在一个Compiler，compiler存放着webpack的配置。 compilation：由于webpack的监听文件变化自动编译机制，compilation代表一次编译。  Compiler 和 Compilation 都会广播一系列事件。webpack生命周期里有非常多的事件。\n以上只是一个最简单的demo，更复杂的可以查看 how to write a plugin或参考web-webpack-plugin。\n 参考文章：https://www.cnblogs.com/chengxs/p/11022842.html\n ","date":"2021-01-18T19:59:00Z","permalink":"https://imzsh.com/posts/20210118/","section":"posts","tags":["js","webpack"],"title":"webpack 的核心概念和构建流程"},{"categories":["生活随笔"],"contents":"自从上次更新厨房日记之后，好像过了两个月多，实际上我一直在进阶我的厨艺，为什么没有更新我的厨房日记呢？因为实际在做的过程中我发现，每种菜的组合太多了，没必要组合一次就写一篇攻略，那样就有些做无用功了，没有太大的意义。\n思来想去，我决定了，不再更新做菜的步骤攻略，我想这些攻略网上一抓一大把。把内容着重放在做菜中遇到的一些问题，细节，这样不但可以让我记忆的深刻，还能分享出更多有意思的东西让小伙伴们开心。\n今天做了一道菜，红烧茄子，我在茄子的时候发现皮挺硬的，就在想要不要去皮（不要笑我，因为之前没做过茄子）。想了一会没想出个所以然，直接百度一番，“烧茄子要不要去皮？”，第一条搜索结果是这样说的，\n “不要。营养专家建议在吃茄子的时候最好不要去皮，因在茄子表皮及表皮与肉质的连接部位，含有大量的有益于人体健康的物质，如芦丁、维生素E、维生素P的含量都隐藏在茄子皮中，如果将茄子皮去掉会降低营养价值。”\n 嗯，挺好，不用去皮，但是作为百度谷歌资深用户，怎么可能只相信第一条搜索结果呢？我又往下翻了翻，有一条知乎用户是这样说的\n 茄子去不去皮，关键还是看你做什么菜了。如果是家常茄子，最好是不要去皮；如是是油煎茄子，因为要打花刀的原因，所以也不要去皮；如果是茄子煲，那就非去皮不可了。\n 略加思考，好像说得有那么几分道理，很是欣喜，所以我就采用了他的说法。今天做的是烧茄子，所以不用去皮，直接炒就可以了。\n又增加了一个小技巧。\n结束语：当你在心情不好的时候，或者有心事，可以做一些让你分散注意力的事情，就比如说做菜，不仅可以享受食物，享受生活，内心还可以获得成就感，我感觉这是一举两得的事情。\n","date":"2021-01-17T19:59:00Z","permalink":"https://imzsh.com/posts/20210117/","section":"posts","tags":["厨房"],"title":"小张厨房日记（二）"},{"categories":["生活随笔"],"contents":"最新网上爆出风风火火的一件事，许嵩的《有何不可》被抄袭，抄袭者为罗聪，《简单的幸福》。\n我从14年开始听许嵩的歌，一直到现在，许多年过去了，他的歌依旧脍炙人口，从之前的抒情浪漫情歌，批判社会的思想，一直到现在具体哲学内涵，中华传统思想。大部分都是包揽作词作曲为一身，真的很有才华。\n因为太有才华了，所以被“碰瓷”抄袭。这也算是一场闹剧了。据说嵩哥本人对此没有发表什么看法和言论，一直都是粉丝和公司在发声。\n据网友戏称：“许嵩：这要放十年前，我早写歌骂你了。”，“低情商：这不就是抄袭《有何不可》？高情商：你这《有何不可》唱得有点跑调”。\n令人没有想象到的事，罗聪所在公司发表声明：\n突然感觉有些搞笑，我也不对他再发表什么看法，只希望官方能解决这件事，给我们松鼠一个交代。\n要是靠抄袭就能火的话，还要才华做什么。\n这也一直是我的理念，在写博客的时候，我也很注重版权，引用别人写的文章的时候，我都会申请作者授权，标明出处。同时，对于我自己的文章，如果你想要引用转载，只需要标明出处即可。\n大部分做技术的人应该都是和我抱有一样的想法，喜欢分享，但是可不能张冠李戴，毕竟写文章也是耗费脑细胞的。并不指望能获得什么成绩，只是希望当有人看到你的文章时，解决了自己的问题，有一丝认可足以。\n版权一直是一件很重要的事情，很多年前我们还比较淡漠，但是这几年对版权的重视开始慢慢提升了，审查力度增加，这是一件好事。\n","date":"2021-01-16T20:00:00Z","permalink":"https://imzsh.com/posts/20210116/","section":"posts","tags":null,"title":"许嵩的歌又一次被抄袭！"},{"categories":["编程技术"],"contents":"最近发了很多关于 React 的文章，记录遇到的新技术点，以及在写代码过程中遇到的问题，希望可以帮助到和我遇到同样问题的同学。\n今天分享的是一款基于 React 的富文本编辑器－－Braft Editor。\n Braft Editor 官网：https://braft.margox.cn Github 仓库地址：https://github.com/margox/braft-editor\n 这款插件非常方便，只需要下载然后引入即可直接使用，页面整体风格清新，符合绝大多数人的审美观，支持图片，音视频的插入。\n按照官方的说法，假如你对它的功能还不够满意，不够使用，完全可以扩展它，自己写一个插件来强化他。\n经过我的测试，功能绝对强大，可以满足市面上绝大多数的需求。接下来就说一下如何使用这款插件。\n1.安装 在项目中直接通过 npm 或者 yarn 下载插件：\n# 使用 npm 安装 npm install braft-editor --save # 使用 yarn 安装 yarn add braft-editor 2.使用 新建一个组件 EditorDemo.js，在里面写入下列代码：\n// EditorDemo.js  import React from \u0026#39;react\u0026#39;; import BraftEditor from \u0026#39;braft-editor\u0026#39;; import \u0026#39;braft-editor/dist/index.css\u0026#39;; export default class PageDemo extends React.Component { state = { editorState: BraftEditor.createEditorState(null) } render () { return ( \u0026lt;BraftEditor value={this.state.editorState} onChange={this.handleChange}/\u0026gt; ) } handleChange = (editorState) =\u0026gt; { this.setState({ editorState }) } } 然后引入到 index.js 中去。\n3.运行 写完组件之后，npm start 运行看看效果\n相当不错，页面很简洁，如果觉得样式不喜欢，完全可以自己重新定制风格，非常方便。\n4.文档 如果想使用更多功能、方法，进入 Braft Editor 官方文档吧，还有更多关于它的讲解！\n属性、方法、示例，一应俱全。\n","date":"2021-01-07T20:46:00Z","permalink":"https://imzsh.com/posts/20210107/","section":"posts","tags":["react","组件"],"title":"基于 React 的富文本编辑器－－Braft Editor"},{"categories":["编程技术"],"contents":"关于 React 框架 和 Vue 框架 的对比，用两者写出同一个程序，对比其代码实现的过程，看看它们的差异究竟有多大？\n 转载于：https://blog.csdn.net/csdnnews/article/details/81880378 原文：https://medium.com/javascript-in-plain-english/i-created-the-exact-same-app-in-react-and-vue-here-are-the-differences-e9a1ae8077fd 作者简介：Sunil Sandhu，一位 Web 全栈工程师 + 空想家。 译者：安翔，责编：屠敏\n 众所周知，Vue 和 React 都是目前非常著名的前端框架。我在工作中经常使用 Vue，因此我对它有很深入的了解。同时，我也对 React 充满了好奇，想要学习一下，一探究竟。\n于是我阅读了 React 文档并观看了一些视频教程，虽然这些资料很不错，但是我真正想了解的是 React 与 Vue 之间的不同之处。所谓“不同之处”，我并非想知道它们是否都具有虚拟 DOMS 或者它们如何渲染页面，而是希望有人能够从代码的角度解释这两者之间的差异。我想找到一篇解释这些差异的文章，以便 Vue 或者 React 的初学者可以更好地理解它们两者之间的差异。\n很遗憾，我并未找到一篇这样的文章。于是我意识到必须自己动手来比较 Vue 与 React 之间的异同。在我自力更生的过程中，我用这篇文章记录下了具体过程。\n1.目标 我将会构建一个标准的待办事项应用程序，允许用户添加和删除列表中的项目。这两个应用程序都使用默认的 CLI（command-line interface，命令行界面） 构建，React 使用 create-react-app，Vue 使用 vue-cli。\n两个应用程序的外观如下：\n两个应用程序的 CSS 代码几乎一样，但这些代码的位置存在差异。考虑到这一点，我们来看看这两个应用程序的文件结构：\n你会发现它们的结构几乎完全相同。唯一的区别在于 React App 拥有三个 CSS 文件，而 Vue App 中没有 CSS 文件。这是因为 React 的 create-react-app 组件需要一个附带文件来保存其样式，而 Vue CLI 采用全包方法，其样式在实际组件文件中声明。\n两种不同的策略得到的结果是一样的，相信开发者很快能够掌握这两种不同的策略。开发者可以根据自己的偏好做出选择，你会听到开发社区关于如何构建 CSS 的大量讨论。以上，我们遵循两个 CLI 列出了代码结构。\n在我们进一步讨论之前，先快速看一下典型的 Vue 和 React 组件的外观：\n现在让我们正式开始，深入其中的细节！\n2.如何修改数据 首先，我们需要明白“修改数据”的意思是什么。它听起来有些学术，但实际上很简单，就是把我们已经存储好的数据进行更改。比如，如果我们想把一个人的名字变量从“Jhon”改为“Mark”，我们就需要执行“修改数据”的操作。在这一点上，React 和 Vue 的处理方式有所区别。Vue 本质上会创建一个数据对象，其中的数据可以自由更改；React 则创建一个状态对象，更改数据需要一些额外的操作。React 之所以需要额外的操作有着自己的理由，稍后我会深入介绍。在此之前，我们先看看 Vue 中的数据对象和 React 中的状态对象：\nvue 数据对象 React 状态对象 从图中可以看出，我们传入了相同的数据，但它们的标记方法不同。因此，将初始数据传递到组件的方式非常相似。但正如我们提到的那样，在两个框架中更改数据的方式有所不同。\n假设我们有一个名为 name: ‘Sunil’ 的数据元素。\n在 Vue 中，我们通过调用 this.name 来引用它。我们也可以通过调用 this.name =\u0026lsquo;John\u0026rsquo; 来更新它。这样一来，名字就被成功改为了 “Jhon”。\n在 React 中，我们通过调用 this.state.name 来引用同一段数据。现在关键的区别在于，我们不能简单地写成 this.state.name =\u0026lsquo;John\u0026rsquo;，因为 React 有限制机制，它会阻止这种简单的修改方式。在 React 中，我们需要这样写：this.setState({name：\u0026lsquo;John\u0026rsquo;})。\n虽然这基本上与我们在 Vue 中实现的结果一样，但是 React 的操作更为繁琐，那是因为 Vue 在每次更新数据时默认组合了自己的 setState 版本。 简单来说就是，React 需要 setState，然后更新其内部数据，而对于 Vue 来说，当你更新数据对象的值时它就默认了你的更改意图。 那么为什么 React 没有进行简化，为什么需要 setState 呢？ Revanth Kumar 对此做出了解释：\n “这是因为 React 希望在状态发生变化时重新运行某些生命周期 hook，比如 componentWillReceiveProps、shouldComponentUpdate、componentWillUpdate、render、componentDidUpdate。当你调用 setState 函数时，它知道状态已经改变。如果你直接改变状态，React 将需要做更多工作来跟踪更改以及运行生命周期 hook 等等。所以为了简单起见，React 使用 setState。\u0026quot;\n 3.添加新的待办事项 React 的实现方法 createNewToDoItem = () =\u0026gt; { this.setState( ({ list, todo }) =\u0026gt; ({ list: [ ...list, { todo } ], todo: \u0026#39;\u0026#39; }) ); }; 在 React 中，我们的输入字段有一个名为 value 的属性。这个 value 通过使用几个函数自动更新，这些函数绑定在一起以创建双向绑定。我们通过在输入字段上附加一个 onChange 事件监听器来创建这种形式的双向绑定。看看代码，一探究竟：\n\u0026lt;input type=\u0026#34;text\u0026#34; value={this.state.todo} onChange={this.handleInput}/\u0026gt; 只要输入字段的值发生更改，handleInput 函数就会运行。它通过将状态对象设置为输入字段中的任何内容来更新状态对象内的 todo。handleInput 函数如下：\nhandleInput = e =\u0026gt; { this.setState({ todo: e.target.value }); }; 现在，只要用户按下页面上的 + 按钮添加新项目，createNewToDoItem 函数就会运行 this.setState 并向其传递一个函数。该函数有两个参数，第一个是来自状态对象的整个列表数组，第二个是由 handleInput 函数更新的todo。然后该函数返回一个新对象，该对象包含之前的整个列表，并在其末尾添加todo。整个列表是通过使用扩展运算符添加的。\n最后，我们将 todo 设置为空字符串，它会自动更新输入字段中的 value。\nVue 的实现方法 createNewToDoItem() { this.list.push( { \u0026#39;todo\u0026#39;: this.todo } ); this.todo = \u0026#39;\u0026#39;; } 在 Vue 中，我们的输入字段中有一个名为 v-model 的句柄。这实现了**双向绑定。输入字段代码如下：\n\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;todo\u0026#34;/\u0026gt; V-Model 将输入字段的内容绑定到名为 toDoItem 的数据对象的键（key）上。当页面加载时，我们将 toDoItem 设置为空字符串，比如：todo：' \u0026lsquo;。如果已经存在数据，例如 todo：\u0026lsquo;添加文本处\u0026rsquo;，输入字段将加载添加文本处的输入内容。无论如何，将其作为空字符串，我们在输入字段中键入的任何文本都会绑定到 todo。这实际上是双向绑定（输入字段可以更新数据对象，数据对象可以更新输入字段）。\n因此，回顾前面的 createNewToDoItem() 代码块，我们将 todo 的内容存放到列表数组中 ，然后将 todo 改为空字符串。\n4.删除待办事项 React 的实现方法 deleteItem = indexToDelete =\u0026gt; { this.setState(({ list }) =\u0026gt; ({ list: list.filter((toDo, index) =\u0026gt; index !== indexToDelete) })); }; 尽管 deleteItem 函数位于 ToDo.js 文件中，但是从 ToDoItem.js 文件中引用它也很容易，将 deleteItem() 函数作为 上的 prop 传递：\n\u0026lt;ToDoItem deleteItem={this.deleteItem.bind(this, key)}/\u0026gt; 这会将该函数传递给子组件，使其可以访问。我们绑定了 this 并传递 key 参数，当用户点击删除项时，函数通过 key 区分用户点击的是哪一条 ToDoItem 。然后，在ToDoItem 组件内部，我们执行以下操作：\n\u0026lt;div className=”ToDoItem-Delete” onClick={this.props.deleteItem}\u0026gt;-\u0026lt;/div\u0026gt; 想要引用位于父组件内部的函数，只需引用 this.props.deleteItem 即可。\nVue 的实现方法 onDeleteItem(todo){ this.list = this.list.filter(item =\u0026gt; item !== todo); } Vue 的实现方法稍有不同，我们需要做到以下三点：\n 首先，在元素上调用函数：  \u0026lt;div class=”ToDoItem-Delete” @click=”deleteItem(todo)”\u0026gt;-\u0026lt;/div\u0026gt; 然后我们必须创建一个 emit 函数，将其作为子组件的内部方法（在本例中为ToDoItem.vue），如下所示：  deleteItem(todo) { this.$emit(\u0026#39;delete\u0026#39;, todo) } 之后，你会发现，当我们添加 ToDo.vue的 ToDoItem.vue 时，实际上引用了一个函数：  \u0026lt;ToDoItem v-for=\u0026#34;todo in list\u0026#34; :todo=\u0026#34;todo\u0026#34; @delete=\u0026#34;onDeleteItem\u0026#34; // \u0026lt;-- this :) \t:key=\u0026#34;todo.id\u0026#34; /\u0026gt; 这就是所谓的自定义事件监听器。它会监听任何使用 \u0026lsquo;delete\u0026rsquo; 字符串的触发事件。一旦监听到事件，它会触发一个名为 onDeleteItem 的函数。此函数位于 ToDo.vue 内部，而不是 ToDoItem.vue。如前所述，该函数只是过滤数据对象内的 todo 数组 ，以删除被点击的待办事项。\n在 Vue 示例中还需要注意的是，我们可以在 @click 侦听器中编写 $emit 部分，这样更加简单，如下所示：\n\u0026lt;div class=”ToDoItem-Delete” @click=”$emit(‘delete’, todo)”\u0026gt;-\u0026lt;/div\u0026gt; 如果你喜欢，这样做可以把 3 步减少到 2 步。\nReact 中的子组件可以通过 this.props 访问父函数，而在 Vue 中，你需要从子组件中发出事件，父组件来收集事件。\n5.如何传递事件监听器 React 的实现方法 事件监听器处理简单事件（比如点击）非常直接。我们为待办事项创建了点击事件，用于创建新的待办事项，代码如下：\n\u0026lt;div className=”ToDo-Add” onClick={this.createNewToDoItem}\u0026gt;+\u0026lt;/div\u0026gt; 非常简单，就像使用 vanilla JS 处理内联 onClick 一样。正如前文所述，只要按下回车按钮，设置事件监听器就需要花费更长的时间。这需要输入标签处理 onKeyPress 事件，代码如下：\n\u0026lt;input type=”text” onKeyPress={this.handleKeyPress}/\u0026gt; 该函数只要识别到\u0026rsquo;enter\u0026rsquo;键被按下，它就会触发 createNewToDoItem 函数，代码如下所示：\nhandleKeyPress = (e) =\u0026gt; { if (e.key === ‘Enter’) { this.createNewToDoItem(); } }; Vue 的实现方法 Vue 的事件监听器更加直接。我们只需要使用一个简单的 @ 符号，就可以构建出我们想要的事件监听器。例如，想要添加 click 事件监听器，代码：\n\u0026lt;div class=”ToDo-Add” @click=”createNewToDoItem()”\u0026gt;+\u0026lt;/div\u0026gt;  注意：@click 实际上是 v-on:click 的简写。Vue 事件监听器很强大，你可以为其选择属性，例如 .once 可以防止事件监听器被多次触发。此外，它还包含很多快捷方式。按下回车按钮时，React 就需要花费更长的时间来创建事件监听器，从而创建新的 ToDo 项目。在 Vue，代码如下：\n \u0026lt;input type=”text” v-on:keyup.enter=”createNewToDoItem”/\u0026gt; 6.如何将数据传递给子组件 React 的实现方法 在 React 中，我们将 props 传递到子组件的创建处。比如：\n\u0026lt;ToDoItem key={key} item={todo} /\u0026gt; 此处我们向 ToDoItem 组件传递了两个 prop。之后，我们可以在子组件中通过 this.props 引用它们。因此，想要访问 item.todo prop，我们只需调用this.props.item 。\nVue 的实现方法 在 Vue 中，我们将 props 传递到子组件创建处的方式如下：\n\u0026lt;ToDoItem v-for=\u0026#34;todo in list\u0026#34; :todo=\u0026#34;todo\u0026#34; :key=\u0026#34;todo.id\u0026#34; @delete=\u0026#34;onDeleteItem\u0026#34; /\u0026gt; 我们将它们传递给子组件中的 props 数组，如：props：[\u0026lsquo;id\u0026rsquo;，\u0026lsquo;todo\u0026rsquo;]。然后可以在子组件中通过名字引用它们。\n7.如何将数据发送回父组件 React 的实现方法 我们首先将函数传递给子组件，方法是在我们调用子组件时将其引用为 prop。然后我们通过引用 this.props.whateverTheFunctionIsCalled，为子组件添加调用函数，例如 onClick。然后，这将触发父组件中的函数。删除待办事项一节中详细介绍了整个过程。\nVue 的实现方法 在子组件中我们只需编写一个函数，将一个值发送回父函数。在父组件中编写一个函数来监听子组件何时发出该值的事件，监听到事件之后触发函数调用。同样，删除待办事项一节中详细介绍了整个过程。\n8.总结 我们研究了添加、删除和更改数据，以 prop 形式从父组件到子组件传递数据，以及通过事件监听器的形式将数据从子组件发送到父组件。当然，React 和 Vue 之间存在一些小差异，希望本文的内容有助于理解这两个框架。\n两个应用程序的 GitHub 地址：\n**Vue ToDo：**https://github.com/sunil-sandhu/vue-todo\n**React ToDo：**https://github.com/sunil-sandhu/react-todo\n","date":"2021-01-06T20:47:00Z","permalink":"https://imzsh.com/posts/20210106/","section":"posts","tags":null,"title":"使用 React 与 Vue 创建同一款 App，差别究竟有多大？"},{"categories":["编程技术"],"contents":"create-react-app 脚手架指令可以生成 React 项目，在项目完成之后执行打包命令 npm run build，文件夹内生成 build文件夹，就是打包后的文件，在浏览器运行 index.html 发现页面空白，打开控制台有报错，css 和 js 文件的引用路径有问题。\n浏览 index.html 代码可以发现：\n\u0026lt;!-- index.html --\u0026gt; \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;zh\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width,initial-scale=1\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;theme-color\u0026#34; content=\u0026#34;#000000\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Web site created using create-react-app\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;React App\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;/static/css/main.3394d54e.chunk.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;noscript\u0026gt;You need to enable JavaScript to run this app.\u0026lt;/noscript\u0026gt; \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt;!function (e) { function r(r) { for (var n, l, f = r[0], i = r[1], a = r[2], c = 0, s = []; c \u0026lt; f.length; c++)l = f[c], Object.prototype.hasOwnProperty.call(o, l) \u0026amp;\u0026amp; o[l] \u0026amp;\u0026amp; s.push(o[l][0]), o[l] = 0; for (n in i) Object.prototype.hasOwnProperty.call(i, n) \u0026amp;\u0026amp; (e[n] = i[n]); for (p \u0026amp;\u0026amp; p(r); s.length;)s.shift()(); return u.push.apply(u, a || []), t() } function t() { for (var e, r = 0; r \u0026lt; u.length; r++) { for (var t = u[r], n = !0, f = 1; f \u0026lt; t.length; f++) { var i = t[f]; 0 !== o[i] \u0026amp;\u0026amp; (n = !1) } n \u0026amp;\u0026amp; (u.splice(r--, 1), e = l(l.s = t[0])) } return e } var n = {}, o = { 1: 0 }, u = []; function l(r) { if (n[r]) return n[r].exports; var t = n[r] = { i: r, l: !1, exports: {} }; return e[r].call(t.exports, t, t.exports, l), t.l = !0, t.exports } l.m = e, l.c = n, l.d = function (e, r, t) { l.o(e, r) || Object.defineProperty(e, r, { enumerable: !0, get: t }) }, l.r = function (e) { \u0026#34;undefined\u0026#34; != typeof Symbol \u0026amp;\u0026amp; Symbol.toStringTag \u0026amp;\u0026amp; Object.defineProperty(e, Symbol.toStringTag, { value: \u0026#34;Module\u0026#34; }), Object.defineProperty(e, \u0026#34;__esModule\u0026#34;, { value: !0 }) }, l.t = function (e, r) { if (1 \u0026amp; r \u0026amp;\u0026amp; (e = l(e)), 8 \u0026amp; r) return e; if (4 \u0026amp; r \u0026amp;\u0026amp; \u0026#34;object\u0026#34; == typeof e \u0026amp;\u0026amp; e \u0026amp;\u0026amp; e.__esModule) return e; var t = Object.create(null); if (l.r(t), Object.defineProperty(t, \u0026#34;default\u0026#34;, { enumerable: !0, value: e }), 2 \u0026amp; r \u0026amp;\u0026amp; \u0026#34;string\u0026#34; != typeof e) for (var n in e) l.d(t, n, function (r) { return e[r] }.bind(null, n)); return t }, l.n = function (e) { var r = e \u0026amp;\u0026amp; e.__esModule ? function () { return e.default } : function () { return e }; return l.d(r, \u0026#34;a\u0026#34;, r), r }, l.o = function (e, r) { return Object.prototype.hasOwnProperty.call(e, r) }, l.p = \u0026#34;./\u0026#34;; var f = this.webpackJsonpdemo = this.webpackJsonpdemo || [], i = f.push.bind(f); f.push = r, f = f.slice(); for (var a = 0; a \u0026lt; f.length; a++)r(f[a]); var p = i; t() }([])\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/static/js/2.1902eda2.chunk.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/static/js/main.cbf35db7.chunk.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 发现 css 和 js 文件都是用绝对路径引用的，这是 webpack 打包一贯拥有的问题，将 /static 改成 ./static ，再运行，页面没有问题成功显示。\n但是在写实际项目的时候手动修改相对路径，不但麻烦，而且容易引起其他问题。因此直接在项目的 package.json 配置文件进行修改，添加 \u0026quot;homepage\u0026quot;: \u0026quot;.\u0026quot;\n// package.json { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;homepage\u0026#34;: \u0026#34;.\u0026#34;, // 添加这一行 \u0026#34;dependencies\u0026#34;: { \u0026#34;@babel/core\u0026#34;: \u0026#34;7.12.3\u0026#34;, ... 然后再执行 npm run build ，运行打包后的文件，没有任何问题。\n","date":"2021-01-05T20:54:00Z","permalink":"https://imzsh.com/posts/20210105/","section":"posts","tags":["react"],"title":"React 脚手架项目打包时的路径问题"},{"categories":["编程技术"],"contents":"本文主要写如何在 React 中引入 less 。因为 less 和 css 非常像，因此很容易学习。而且 less 仅对 css 语言增加了少许方便的扩展，这就是 less 如此易学的原因之一。\n1.安装 less npm install less less-loader --save-dev 2.暴露 webpack 文件 利用 npx create-react-app 搭建的 React 项目，默认隐藏 webpack 配置文件，引入 less 需要修改 webpack 配置文件，因此我们需要执行命令暴露 webpack 配置文件。\n 这里需要注意，一旦暴露，无法回退。\n npm run eject 如果这一步失败，执行下列命令：\ngit add . git commit -m \u0026#34;init\u0026#34; 然后再执行 npm run eject\n 注意：暴露 webpack 文件只能在 create-react-app 之初，一旦项目结构发生改变，再进行暴露操作就会失败。所以尽量在项目建立时就进行 npm run eject 操作。\n 3.修改 wenpack.config.js 配置 在合适的位置添加：\n// 放在 // const sassRegex = /\\.(scss|sass)$/; // const sassModuleRegex = /\\.module\\.(scss|sass)$/; // 后面  const lessRegex = /\\.less$/; const lessModuleRegex = /\\.module\\.less$/; // 放在 oneof 数组下  { test: lessRegex, exclude: lessModuleRegex, use: getStyleLoaders( { importLoaders: 2, sourceMap: isEnvProduction \u0026amp;\u0026amp; shouldUseSourceMap, }, \u0026#39;less-loader\u0026#39; ), // Don\u0026#39;t consider CSS imports dead code even if the  // containing package claims to have no side effects.  // Remove this when webpack adds a warning or an error for this.  // See https://github.com/webpack/webpack/issues/6571  sideEffects: true, }, // Adds support for CSS Modules, but using SASS // using the extension .module.scss or .module.sass { test: lessModuleRegex, use: getStyleLoaders( { importLoaders: 2, sourceMap: isEnvProduction \u0026amp;\u0026amp; shouldUseSourceMap, modules: true, getLocalIdent: getCSSModuleLocalIdent, }, \u0026#39;less-loader\u0026#39; ), }, 4.如何使用 less 新建一个 App.less 文件，然后在 App.js 中引入：\nimport \u0026#39;./Map.less\u0026#39; less 语法手册\n","date":"2021-01-04T20:50:00Z","permalink":"https://imzsh.com/posts/20210104/","section":"posts","tags":["react"],"title":"如何在 React 中引入 less？"},{"categories":["编程技术"],"contents":"之前有说到，在 React 中渲染列表的时候，要给每一个数据加一个 key 值，赋予一个确定的标示，而且也详细描述了如何给一个标示，方法知道了，那么为什么要这么做呢？\n在 React 中如何渲染列表？\n在默认条件下，当递归 DOM 节点的子元素时，React 会同时遍历两个子元素的列表；当产生差异时，生成一个 mutation。\n在子元素列表末尾新增元素时，更新开销比较小。比如：\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;first\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;first\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;second\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;third\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; React 会先匹配两个 \u0026lt;li\u0026gt;first\u0026lt;/li\u0026gt; 对应的树，然后匹配第二个元素 \u0026lt;li\u0026gt;second\u0026lt;/li\u0026gt; 对应的树，最后插入第三个元素的 \u0026lt;li\u0026gt;third\u0026lt;/li\u0026gt; 树。\n如果只是简单的将新增元素插入到表头，那么更新开销会比较大。比如：\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Duke\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Villanova\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Connecticut\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Duke\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Villanova\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; React 不会意识到应该保留 \u0026lt;li\u0026gt;Duke\u0026lt;/li\u0026gt; 和 \u0026lt;li\u0026gt;Villanova\u0026lt;/li\u0026gt;，而是会重建每一个子元素 。这种情况会带来性能问题。\nkey\n为了解决上述问题， React 支持 key 属性，当子元素拥有 key 时，React 使用 key 来匹配原有树上的子元素以及最新树上的子元素。以下例子在新增 key 之后使得之前的低效转换变得高效：\n\u0026lt;ul\u0026gt; \u0026lt;li key=\u0026#34;1\u0026#34;\u0026gt;Duke\u0026lt;/li\u0026gt; \u0026lt;li key=\u0026#34;2\u0026#34;\u0026gt;Villanova\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li key=\u0026#34;0\u0026#34;\u0026gt;Connecticut\u0026lt;/li\u0026gt; \u0026lt;li key=\u0026#34;1\u0026#34;\u0026gt;Duke\u0026lt;/li\u0026gt; \u0026lt;li key=\u0026#34;2\u0026#34;\u0026gt;Villanova\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 现在 React 知道只有带着 '0' key 的元素是新元素，带着 '1' 以及 '2' key 的元素仅仅移动了。\n现实场景中，产生一个 key 并不困难。你要展现的元素可能已经有了一个唯一 ID，于是 key 可以直接从你的数据中提取：\n\u0026lt;li key={item.id}\u0026gt;{item.name}\u0026lt;/li\u0026gt; 当以上情况不成立时，你可以新增一个 ID 字段到你的模型中，或者利用一部分内容作为哈希值来生成一个 key。这个 key 不需要全局唯一，但在列表中需要保持唯一。\n最后，你也可以使用元素在数组中的下标作为 key。这个策略在元素不进行重新排序时比较合适，如果有顺序修改，diff 就会变得慢。\n当基于下标的组件进行重新排序时，组件 state 可能会遇到一些问题。由于组件实例是基于它们的 key 来决定是否更新以及复用，如果 key 是一个下标，那么修改顺序时会修改当前的 key，导致非受控组件的 state（比如输入框）可能相互篡改导致无法预期的变动。\n","date":"2021-01-01T20:48:00Z","permalink":"https://imzsh.com/posts/20210101/","section":"posts","tags":["react"],"title":"为什么 key 是必须的？"},{"categories":["编程技术"],"contents":"来源于：https://react.docschina.org/docs/forms.html\n一、表单 在 React 中，html 表单元素的工作方式和其他的 DOM 元素不太一样，因为表单内部通常会保持一些内部的 state，比如下面这个纯 html 表单只接受一个名称：\n\u0026lt;form\u0026gt; \u0026lt;label\u0026gt; 名字: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; 这个表单具有默认的 html 表单行为，即在用户提交表单之后自动刷新页面。如果你在 React 中执行相同的代码，它仍然有效。\n但大多数情况下，使用 JavaScript 函数可以很方便的处理表单的提交， 同时还可以访问用户填写的表单数据。实现这种效果的标准方式是使用“受控组件”。\n受控组件 在 html 中，表单元素比如\u0026lt;input\u0026gt;，\u0026lt;textarea\u0026gt;，\u0026lt;select\u0026gt;，这些表单元素通常自己维护 state，并根据用户输入进行更新。而在 React 中，可变状态（mutable state）通常保存在组件的 state 属性中，并且只能通过使用 setState() 来更新。\n我们可以把两者结合起来，使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。\n例如，如果我们想让前一个示例在提交时打印出名称，我们可以将表单写为受控组件：\nclass NameForm extends React.Component { constructor(props) { super(props); this.state = {value: \u0026#39;\u0026#39;}; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); } handleChange(event) { this.setState({value: event.target.value}); } handleSubmit(event) { alert(\u0026#39;提交的名字: \u0026#39; + this.state.value); event.preventDefault(); } render() { return ( \u0026lt;form onSubmit={this.handleSubmit}\u0026gt; \u0026lt;label\u0026gt; 名字: \u0026lt;input type=\u0026#34;text\u0026#34; value={this.state.value} onChange={this.handleChange} /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; ); } } 由于在表单元素上设置了 value 属性，因此显示的值将始终为 this.state.value，这使得 React 的 state 成为唯一数据源。由于 handlechange 在每次按键时都会执行并更新 React 的 state，因此显示的值将随着用户输入而更新。\n对于受控组件来说，输入的值始终由 React 的 state 驱动。你也可以将 value 传递给其他 UI 元素，或者通过其他事件处理函数重置，但这意味着你需要编写更多的代码。\ntextarea 标签 在 html 中，\u0026lt;textarea\u0026gt; 元素通过其子元素定义其文本：\n\u0026lt;textarea\u0026gt; 测试！ \u0026lt;/textarea\u0026gt; 而在 React 中，\u0026lt;textarea\u0026gt; 使用 value 属性代替。这样，可以使得使用 \u0026lt;textarea\u0026gt; 的表单和使用单行 input 的表单非常类似：\nclass EssayForm extends React.Component { constructor(props) { super(props); this.state = { value: \u0026#39;请撰写一篇关于你喜欢的 DOM 元素的文章.\u0026#39; }; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); } handleChange(event) { this.setState({value: event.target.value}); } handleSubmit(event) { alert(\u0026#39;提交的文章: \u0026#39; + this.state.value); event.preventDefault(); } render() { return ( \u0026lt;form onSubmit={this.handleSubmit}\u0026gt; \u0026lt;label\u0026gt; 文章: \u0026lt;textarea value={this.state.value} onChange={this.handleChange} /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; ); } } 请注意，this.state.value 初始化于构造函数中，因此文本区域默认有初值。\nselect 标签 在 HTML 中，\u0026lt;select\u0026gt; 创建下拉列表标签。例如，如下 html 创建了水果相关的下拉列表：\n\u0026lt;select\u0026gt; \u0026lt;option value=\u0026#34;grapefruit\u0026#34;\u0026gt;葡萄柚\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;lime\u0026#34;\u0026gt;酸橙\u0026lt;/option\u0026gt; \u0026lt;option selected value=\u0026#34;coconut\u0026#34;\u0026gt;椰子\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;mango\u0026#34;\u0026gt;芒果\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; 请注意，由于 selected 属性的缘故，椰子选项默认被选中。React 并不会使用 selected 属性，而是在根 select 标签上使用 value 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。例如：\nclass FlavorForm extends React.Component { constructor(props) { super(props); this.state = {value: \u0026#39;coconut\u0026#39;}; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); } handleChange(event) { this.setState({value: event.target.value}); } handleSubmit(event) { alert(\u0026#39;你喜欢的风味是: \u0026#39; + this.state.value); event.preventDefault(); } render() { return ( \u0026lt;form onSubmit={this.handleSubmit}\u0026gt; \u0026lt;label\u0026gt; 选择你喜欢的风味: \u0026lt;select value={this.state.value} onChange={this.handleChange}\u0026gt; \u0026lt;option value=\u0026#34;grapefruit\u0026#34;\u0026gt;葡萄柚\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;lime\u0026#34;\u0026gt;酸橙\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;coconut\u0026#34;\u0026gt;椰子\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;mango\u0026#34;\u0026gt;芒果\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; ); } } 总的来说，这使得 \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt;, \u0026lt;textarea\u0026gt; 和 \u0026lt;select\u0026gt; 之类的标签都非常相似—它们都接受一个 value 属性，你可以使用它来实现受控组件。\n 注意:你可以将数组传递到 value 属性中，以支持在 select 标签中选择多个选项：\n\u0026lt;select multiple={true} value={[\u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;]}\u0026gt;  文件 input 标签 在 HTML 中，\u0026lt;input type=\u0026quot;file\u0026quot;\u0026gt; 允许用户从存储设备中选择一个或多个文件，将其上传到服务器，或通过使用 JavaScript 的 File API 进行控制。\n\u0026lt;input type=\u0026#34;file\u0026#34; /\u0026gt; 因为它的 value 只读，所以它是 React 中的一个非受控组件。\n处理多个输入 当需要处理多个 input 元素时，我们可以给每个元素添加 name 属性，并让处理函数根据 event.target.name 的值选择要执行的操作。\nclass Reservation extends React.Component { constructor(props) { super(props); this.state = { isGoing: true, numberOfGuests: 2 }; this.handleInputChange = this.handleInputChange.bind(this); } handleInputChange(event) { const target = event.target; const value = target.name === \u0026#39;isGoing\u0026#39; ? target.checked : target.value; const name = target.name; this.setState({ [name]: value }); } render() { return ( \u0026lt;form\u0026gt; \u0026lt;label\u0026gt; 参与: \u0026lt;input name=\u0026#34;isGoing\u0026#34; type=\u0026#34;checkbox\u0026#34; checked={this.state.isGoing} onChange={this.handleInputChange} /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;label\u0026gt; 来宾人数: \u0026lt;input name=\u0026#34;numberOfGuests\u0026#34; type=\u0026#34;number\u0026#34; value={this.state.numberOfGuests} onChange={this.handleInputChange} /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;/form\u0026gt; ); } } 这里使用了 ES6 计算属性名称的语法更新给定输入名称对应的 state 值：\n例如：\nthis.setState({ [name]: value }); 等同于 es5：\nvar partialState = {}; partialState[name] = value; this.setState(partialState); 另外，由于 setState() 自动将部分 state 合并到当前 state, 只需调用它更改部分 state 即可。\n受控输入空值 在受控组件上指定 value 的 prop 会阻止用户更改输入。如果你指定了 value，但输入仍可编辑，则可能是你意外地将 value 设置为 undefined 或 null。\n下面的代码演示了这一点。（输入最初被锁定，但在短时间延迟后变为可编辑。）\nReactDOM.render(\u0026lt;input value=\u0026#34;hi\u0026#34; /\u0026gt;, mountNode); setTimeout(function() { ReactDOM.render(\u0026lt;input value={null} /\u0026gt;, mountNode); }, 1000); 受控组件的替代品 有时使用受控组件会很麻烦，因为你需要为数据变化的每种方式都编写事件处理函数，并通过一个 React 组件传递所有的输入 state。当你将之前的代码库转换为 React 或将 React 应用程序与非 React 库集成时，这可能会令人厌烦。在这些情况下，你可能希望使用非受控组件, 这是实现输入表单的另一种方式。\n成熟的解决方案 如果你想寻找包含验证、追踪访问字段以及处理表单提交的完整解决方案，使用 Formik 是不错的选择。然而，它也是建立在受控组件和管理 state 的基础之上 —— 所以不要忽视学习它们。\n","date":"2020-12-29T13:26:00Z","permalink":"https://imzsh.com/posts/20201229/","section":"posts","tags":["react","笔记"],"title":"React 学习笔记（三）"},{"categories":["生活随笔"],"contents":"年度总结这个东西很有意思（我觉得），可以静下心来好好回顾一下这一年做了些什么事情，希望我能养成这个好习惯，多总结。\n这个博客是我在年中搭建起来了，到现在也将近半年了，没怎么做过seo优化，也没怎么想过推广，就简简单单的写一些自己的东西。更大的原因是我的文笔太拙劣，不敢让人发现，哈哈哈。\n大学四年过的还算充实，学到了自己感兴趣的东西，培养的业余兴趣爱好，旅游爬山等，但有名的大山目前只爬了嵩山（河南境内），因为在郑州读的大学。更远的山也没怎么去过，我给自己定个计划，在两年内爬一次泰山，因为工作太忙咯，不敢说短期内一定有时间。想体会一下\u0026quot;会当凌绝顶，一览众山小\u0026quot;的感觉。\n但是吧，我的大学结束的有些虎头蛇尾的感觉，因为疫情的原因，学校禁止进入，一直到毕业前夕才允许分批次返校，很多同学都没有看到就草草结束大学生活。所以心心念念的毕业照也没有了，本来和朋友商量好一起拍一组有意思的毕业照，真的是今年最大的遗憾了。\n离开校园，见面的机会真的就少了很多，基本都是打打电话，视频什么的，各奔东西，为生活开始忙碌。\n2020年，是让人印象深刻的一年，从一月份爆发的疫情开始，胆战心惊，一直到现在，依旧在全球蔓延，就在前两天看新闻，说英国要严重了，病毒变异，又封城了。真的希望这场疫情赶快过去。\n为什么国外对这方面对管控好像没那么严？真的不理解，或许这就是\u0026quot;向往自由\u0026quot;吧。希望地球每个人都能重视起来，共同对抗病毒，早日结束这一场。\n今年从郑州来到了杭州，换了一个新的环境，在工作中和大家有着共同的目标，学到了很多东西，但是也有一些遗憾，本来打算读两本书的的，下半年读了余果的《全栈工程师的自我修养》和《css世界》，前段时间还写了读书笔记《对全栈的一些思考》，然后十一月份在某宝买了《javascript高级程序设计》，结果因为时间不充足，最后也没读完。\n在这里定一个小目标，2021年一定要读完四本书。\n在技术栈这一块，由 Vue 转向了 React，这里实在想吐槽一句。React 是 Facebook 开发的，Vue 是尤大大开发出来的，感觉写起来思维逻辑不太一样， Vue 的写法更偏向中国程序员的思维方式，React 更偏向外国人，因为我也不是外国人，所以也说不好是一种什么样的思维方式，只是感觉理解起来比 Vue 更难一些。但是因为公司的原因，开始着手 React 开发项目。\n希望在新的一年继续延续下去，在学习更多的技术栈的同时，把自己要做的事情做的更好。\n在杭州待了也有一段时间，这个城市看起来很年轻，很有朝气，可能因为年轻人的占比比较大吧。偶尔出去玩玩，能发现一些以前发现不了的东西，开阔一下自己的眼界。这里夸一下，西湖的风景确实不错，走在苏堤，吹吹风，整个人都放松了。平时压力大了，都会出来走走，但是好像一个人旅游好像缺了点乐趣。\n这两天是圣诞节，虽说是洋节，但是自己也可以乐呵一下，在这里祝愿大家都能在2020年有一个好的结束，画上圆满的句号，迎接新的2021年。\n抽出空闲的时间简单的写了一下总结，就好像跟看电影一样，又回顾了一遍剧情，又得到了不一样的感受。\n你好，自己，明年见。\n","date":"2020-12-25T13:25:00Z","permalink":"https://imzsh.com/posts/20201225/","section":"posts","tags":["总结"],"title":"2020年度总结"},{"categories":["编程技术"],"contents":"一、React 组件是什么？  组件，从概念上类似于 javascript 函数，他接受任意入参（props），并返回作用于描述页面展示内容的 React 元素。\n 组件允许你将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。\n1.创建一个组件 // 函数组件 function Welcome(props) { return \u0026lt;h1\u0026gt;Hello, {props.name}\u0026lt;/h1\u0026gt;; } // class组件 class Welcome extends React.Component { render() { return \u0026lt;h1\u0026gt;Hello, {this.props.name}\u0026lt;/h1\u0026gt;; } } 2.渲染组件 class Welcome extends React.Component { render() { return \u0026lt;h1\u0026gt;Hello, {this.props.name}\u0026lt;/h1\u0026gt;; } } ReactDOM.render( \u0026lt;Welcome /\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) ); 3.组件 React的基础原则有三条，分别是：\n React 界面完全由数据驱动 React 中一切都是组件 props 是 React 组件之间通讯的基本方式  给组件输入一个参数，最终返回一个 React Element,React Element 就是在页面上展示的内容，相当于一个 DOM 节点\nReact 一大核心就是－－万物皆可组件\n 用户界面就是组件 组件可以嵌套包装组成复杂功能 组件可以用来实现副作用  一个复杂的界面可以分割很很多简单的组件，每个简单的组件又可以分割成很多小组件\n 有些类似于类和对象的概念\n 二、组件的划分   **无状态组件：**无状态组件(Stateless Component)是最基础的组件形式，由于没有状态的影响所以就是纯静态展示的作用。基本组成结构就是属性（props）加上一个渲染函数（render）。由于不涉及到状态的更新，所以这种组件的复用性也最强。例如在各UI库中开发的按钮、输入框、图标等等。\n  **有状态组件：**组件内部包含状态（state）且状态随着事件或者外部的消息而发生改变的时候，这就构成了有状态组件（Stateful Component）。有状态组件通常会带有生命周期(lifecycle)，用以在不同的时刻触发状态的更新。在写业务逻辑时常用到，不同场景所用的状态和生命周期也会不同。\n  **容器组件：**为使组件的职责更加单一，耦合性进一步地降低，引入了容器组件(Container Component)的概念。重要负责对数据获取以及处理的逻辑。下文的设计模式也会提到。\n  高阶组件：“高阶组件（HoC）”也算是种组件设计模式。做为一个高阶组件，可以在原有组件的基础上，对其增加新的功能和行为。如打印日志，获取数据和校验数据等和展示无关的逻辑的时候，抽象出一个高阶组件，用以给基础的组件增加这些功能，减少公共的代码。\n  **Render Callback组件：**组件模式是在组件中使用渲染回调的方式，将组件中的渲染逻辑委托给其子组件。也是种重用组件逻辑的方式，也叫render props 模式。\n  三、设计原则 React 的组件其实是软件设计中的模块，其设计原则也需遵从通用的组件设计原则，简单说来，就是要减少组件之间的耦合性（Coupling)，让组件简单，这样才能让整体系统易于理解、易于维护。\n即，设计原则：\n 接口小，props 数量少； 划分组件，充分利用组合（composition）； 把 state 往上层组件提取，让下层组件只需要实现为纯函数。  就像搭积木，复杂的应用和组件都是由简单的界面和组件组成的。划分组件也没有绝对的方法，选择在当下场景合适的方式划分，充分利用组合即可。实际编写代码也是逐步精进的过程，努力做到：\n 功能正常； 代码整洁； 高性能。  ","date":"2020-12-21T13:19:00Z","permalink":"https://imzsh.com/posts/20201221/","section":"posts","tags":["react","组件"],"title":"React －－万物皆可组件"},{"categories":["编程技术"],"contents":"Github：https://github.com/lydiahallie/javascript-questions\n相当不错的一个 Github 仓库，javascript questions ，作者每周都会发布一些有关 javascript 的题目，虽然不难但是考察细节，刷了一会，其实一些很简单的问题，结果因为细节思考不到位直接出错。\n 引用作者的话：我在我的 Instagram 上每天都会发布 JavaScript 的多选问题，并且同时也会在这个仓库中发布。\n  从基础到进阶，测试你有多了解 JavaScript，刷新你的知识，或者帮助你的 coding 面试！\n ","date":"2020-12-19T13:17:00Z","permalink":"https://imzsh.com/posts/20201219/","section":"posts","tags":["js"],"title":"javascript 进阶问题"},{"categories":["编程技术"],"contents":"React 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同\nReact 事件的命名采用小驼峰式（camelCase），而不是纯小写\n使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串\n一、事件处理 1.事件绑定 React 元素的事件处理和 DOM 元素类似，但是在语法上有些区别，比如：\n传统的html：用双引号包裹，后面必须跟参数\n\u0026lt;button onclick=\u0026#34;myfun()\u0026#34;\u0026gt;点击\u0026lt;/button\u0026gt; React：用大括号包裹，后面不跟参数\n\u0026lt;button onclick={myfun}\u0026gt;点击\u0026lt;/button\u0026gt; 一个完整的事件函数代码如下\nclass Demo extends React.Component { render() { // 事件函数  function myfun() { alert(\u0026#39;helo,world\u0026#39;) } return ( // 绑定事件  \u0026lt;button onClick={this.myfun}\u0026gt; Activate Lasers \u0026lt;/button\u0026gt; ) } } ReactDOM.render( \u0026lt;Demo /\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) )  如果方法后面没有()，则需要为这个方法绑定 this\n 2.阻止默认行为 在 React 中还有一个不同的点，不能通过返回 fasle 阻止默认行为， React 提供了一个属性－－preventDefault，可以通过 preventDefault 阻止脚本执行\n看一下传统的 html 和 React 的对比\n\u0026lt;a href=\u0026#34;#\u0026#34; onclick=\u0026#34;alert(\u0026#39;是否弹窗？\u0026#39;);return false\u0026#34;\u0026gt; Click me \u0026lt;/a\u0026gt; 直接在写上 false 就可以阻止脚本执行\nReact 通过 preventDefault 属性阻止脚本执行：\nfunction ActionLink() { function handleClick(e) { e.preventDefault(); console.log(\u0026#39;The link was clicked.\u0026#39;); } return ( \u0026lt;a href=\u0026#34;#\u0026#34; onClick={handleClick}\u0026gt; Click me \u0026lt;/a\u0026gt; ); } 二、条件渲染 在 React 中，可以创建不同的组件来封装各种你需要的行为，然后，根据应用不同的状态，你可以只渲染对应状态下的部分内容。\nReact 中的条件渲染和 javascript 中的一样，使用 if 运算符来表示元素当前的状态，然后让 React 根据他们来更新 UI。\n使用 if..else 语句进行条件渲染 先写一个条件渲染的例子，定义了两个组件，然后通过判断组件 Greeting 中的变量 isLoggedIn 的真伪，让浏览器渲染组件 UserGreeting 或者 GuestGreeting。\n// App.js import React, { Component } from \u0026#39;react\u0026#39; export default class App extends Component { render() { function UserGreeting(props) { return \u0026lt;h3\u0026gt;Welcome back!\u0026lt;/h3\u0026gt;; } function GuestGreeting(props) { return \u0026lt;h3\u0026gt;Please sign up.\u0026lt;/h3\u0026gt;; } function Greeting(props) { const isLoggedIn = props.isLoggedIn; if (isLoggedIn) { return \u0026lt;UserGreeting /\u0026gt;; } return \u0026lt;GuestGreeting /\u0026gt;; } return ( \u0026lt;div\u0026gt; \u0026lt;Greeting isLoggedIn={false} /\u0026gt; \u0026lt;/div\u0026gt; ) } } 最后变量 isLoggedIn 定义了 false，因此，浏览器渲染 `GuestGreeting。\n怎么阻止条件渲染？ 在有些情况下，我们希望能隐藏组件，即使他已经被其他组件渲染。我们可以通过 render 方法返回 null 让组件不渲染。\n下面的示例中，会根据 prop 中 warn 的值来进行条件渲染。如果 warn 的值是 false，那么组件则不会渲染:\nfunction WarningBanner(props) { if (!props.warn) { return null; } return ( \u0026lt;div className=\u0026#34;warning\u0026#34;\u0026gt; Warning! \u0026lt;/div\u0026gt; ); } class Page extends React.Component { constructor(props) { super(props); this.state = {showWarning: true}; this.handleToggleClick = this.handleToggleClick.bind(this); } handleToggleClick() { this.setState(state =\u0026gt; ({ showWarning: !state.showWarning })); } render() { return ( \u0026lt;div\u0026gt; \u0026lt;WarningBanner warn={this.state.showWarning} /\u0026gt; \u0026lt;button onClick={this.handleToggleClick}\u0026gt; {this.state.showWarning ? \u0026#39;Hide\u0026#39; : \u0026#39;Show\u0026#39;} \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } } ReactDOM.render( \u0026lt;Page /\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) ); 三、渲染列表 先看一段代码，我们使用 map() 函数让数组中的每一项变双倍，然后得到一个新的数组 doubled 并打印出来。\nconst numbers = [1, 2, 3, 4, 5]; const doubled = numbers.map((number) =\u0026gt; number * 2); console.log(doubled); // [2,4,6,8,10] 而在 React 中，把数组转换为元素列表的过程是相似的。\n先通过 map() 方法遍历 numbers 数组，将数组中的每个元素变成 \u0026lt;li\u0026gt; 标签，最后将得到的数组赋值给 listItems 。\n然后返回 {listItem} 。\n// Map.js const numbers = [1, 2, 3, 4, 5]; const listItems = numbers.map((number) =\u0026gt; \u0026lt;li\u0026gt;{number}\u0026lt;/li\u0026gt; ); ReactDOM.render( \u0026lt;ul\u0026gt;{listItems}\u0026lt;/ul\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) ); 运行之后浏览器出现 1-5 的无序列表\n1.分离组件 上面就是一个基本的列表渲染的例子，但是数据写死了。接下来我们将数组重构成一个组件，以后再进行数组渲染时，可以轻松调用。\n// Map.js export default class Map extends Component { render() { // 分离出组件 NumberList 作为转换数组的组件  function NumberList(props) { const numbers = props.numbers; const listItems = numbers.map((number) =\u0026gt; \u0026lt;li\u0026gt;{number}\u0026lt;/li\u0026gt; ); return ( \u0026lt;ul\u0026gt;{listItems}\u0026lt;/ul\u0026gt; ); } // 传入需要的数据  const numbers = [1, 2, 3, 4, 5, 6, 7]; return ( \u0026lt;div\u0026gt; \u0026lt;NumberList numbers={numbers} /\u0026gt; \u0026lt;/div\u0026gt; ) } } 2.key 运行代码之后，页面会正常显示，但是控制台会报一个错误。Each child in a list should have a unique \u0026quot;key\u0026quot; prop.，意思是当你创建一个元素时，必须包括一个特殊的 key 属性。\n现在给每个列表元素分配一个key：\nfunction NumberList(props) { const numbers = props.numbers; const listItems = numbers.map((number) =\u0026gt; \u0026lt;li key={number.toString()}\u0026gt; {number} \u0026lt;/li\u0026gt; ); return ( \u0026lt;ul\u0026gt;{listItems}\u0026lt;/ul\u0026gt; ); } const numbers = [1, 2, 3, 4, 5]; ReactDOM.render( \u0026lt;NumberList numbers={numbers} /\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) ); 3.使用 id 作为 key key 帮助 React 识别了哪些元素被改变，比如删除和添加，所以应当给每个元素确定一个标识，也就是 key。\n一个元素的 key 最好是这个元素在列表中拥有的一个独一无二的字符串。通常，我们使用数据中的 id 来作为元素的 key：\n// Map.js export default class Map extends Component { render() { function NumberList(props) { const numbers = props.numbers; const listItems = numbers.map((number) =\u0026gt; \u0026lt;li key={number.id}\u0026gt; // 赋值 key  {number.text} \u0026lt;/li\u0026gt; ); return ( \u0026lt;ul\u0026gt;{listItems}\u0026lt;/ul\u0026gt; ); } // 传入数据  const numbers = [ {id: 1,text: 1}, {id: 2,text: 2}, {id: 3,text: 3}, {id: 4,text: 4}, {id: 5,text: 5} ]; return ( \u0026lt;Fragment\u0026gt; \u0026lt;NumberList numbers={numbers} /\u0026gt; \u0026lt;/Fragment\u0026gt; ) } } 4.索引 index 可以作为 key 吗？ 当元素没有确定 id 的时候，万不得已你可以使用元素索引 index 作为 key：\nconst todoItems = todos.map((todo, index) =\u0026gt; // 仅仅当没有确定 id 的时候使用索引index作为 key  \u0026lt;li key={index}\u0026gt; {todo.text} \u0026lt;/li\u0026gt; ); 如果列表项目的顺序可能会变化，我们不建议使用索引来用作 key 值，因为这样做会导致性能变差，还可能引起组件状态的问题。\n5.用 key 提取组件 比方说，如果你提取出一个 ListItem 组件，你应该把 key 保留在数组中的这个 \u0026lt;ListItem /\u0026gt; 元素上，而不是放在 ListItem 组件中的 \u0026lt;li\u0026gt; 元素上。\n错误的使用方法：\nfunction ListItem(props) { const value = props.value; return ( // 错误！你不需要在这里指定 key：  \u0026lt;li key={value.toString()}\u0026gt; {value} \u0026lt;/li\u0026gt; ); } function NumberList(props) { const numbers = props.numbers; const listItems = numbers.map((number) =\u0026gt; // 错误！元素的 key 应该在这里指定：  \u0026lt;ListItem value={number} /\u0026gt; ); return ( \u0026lt;ul\u0026gt; {listItems} \u0026lt;/ul\u0026gt; ); } const numbers = [1, 2, 3, 4, 5]; ReactDOM.render( \u0026lt;NumberList numbers={numbers} /\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) ); 正确的使用方法：\nfunction ListItem(props) { // 正确！这里不需要指定 key：  return \u0026lt;li\u0026gt;{props.value}\u0026lt;/li\u0026gt;; } function NumberList(props) { const numbers = props.numbers; const listItems = numbers.map((number) =\u0026gt; // 正确！key 应该在数组的上下文中被指定  \u0026lt;ListItem key={number.toString()} value={number} /\u0026gt; ); return ( \u0026lt;ul\u0026gt; {listItems} \u0026lt;/ul\u0026gt; ); } const numbers = [1, 2, 3, 4, 5]; ReactDOM.render( \u0026lt;NumberList numbers={numbers} /\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) );  React：一个好的经验法则是：在 map( ) 方法中的元素需要设置 key 属性。\n 6.key 只是在兄弟节点之间必须唯一 数组元素中使用的 key 在其兄弟节点之间应该是独一无二的。然而，它们不需要是全局唯一的。当我们生成两个不同的数组时，我们可以使用相同的 key 值：\nfunction Blog(props) { const sidebar = ( \u0026lt;ul\u0026gt; {props.posts.map((post) =\u0026gt; \u0026lt;li key={post.id}\u0026gt; {post.title} \u0026lt;/li\u0026gt; )} \u0026lt;/ul\u0026gt; ); const content = props.posts.map((post) =\u0026gt; \u0026lt;div key={post.id}\u0026gt; \u0026lt;h3\u0026gt;{post.title}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{post.content}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); return ( \u0026lt;div\u0026gt; {sidebar} \u0026lt;hr /\u0026gt; {content} \u0026lt;/div\u0026gt; ); } const posts = [ {id: 1, title: \u0026#39;Hello World\u0026#39;, content: \u0026#39;Welcome to learning React!\u0026#39;}, {id: 2, title: \u0026#39;Installation\u0026#39;, content: \u0026#39;You can install React from npm.\u0026#39;} ]; ReactDOM.render( \u0026lt;Blog posts={posts} /\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) ); 7.vue 中渲染列表 Vue 中渲染列表使用的是特殊指令 v-for，其中也有 key 的相关用法\nReact 中采用的是 map() 方法遍历数组，然后渲染列表\n","date":"2020-12-16T13:15:00Z","permalink":"https://imzsh.com/posts/20201216/","section":"posts","tags":["react"],"title":"React 学习笔记（二）"},{"categories":["生活随笔"],"contents":"缘于一些小事，本想发在朋友圈里，但是熟人挺多，不方便发，就在博客里吐槽一下\n一个正常的人际交往应该是互相传递出好的情绪，开心的事情，这样不但有利于两个人之间的交往，而且对个人对身心健康也是有帮助的\n正面的情绪绝对有助于自己的身体和心理健康，反观整体郁郁寡欢，跟别人说自己多不顺，和别人吵架，不好的情绪就传达给另一个人了\n并不是说不能找人倾述自己生活的不痛快和不开心，但是作为一个成年人了，应该要把握好那个感觉，不要真把别人当垃圾桶了，什么都往里倒，宣泄\n情侣之间亦是如此，再好的关系，如果每天散发着各种压抑的情绪，爆发是迟早的事\n 家家有本难念的经\n 每个人都会有自己的烦心事，都能理解，毕竟生活确实很苦闷，但要学会自己调节自己。\n我也会经常烦闷，但是我选择做一些爱好的事情来排遣掉自己的不好的情绪，并不会将这些传递给别人，所以我也算过的很开心吧\n成年人，不就是要学会自己克制自己的缺点，希望每个人都能生活的很愉快！\n","date":"2020-12-13T13:11:00Z","permalink":"https://imzsh.com/posts/20201213/","section":"posts","tags":null,"title":"吐槽－－控制好自己的情绪"},{"categories":["编程技术"],"contents":"在 React 项目中， render 方法只能有一个根元素，一般都是 \u0026lt;div\u0026gt; \u0026lt;div/\u0026gt; ，然后在里面写上我们的组件，渲染到浏览器一看，除了我们想要显示的组件，外面还套着一层 div ，如果在写项目的时候，套了很多曾组件，那么每一层都会多出来一个父级元素 div ，不美观，而且在调整样式的时候会有些麻烦\n因此， React 提供了一个占位符 Fragment，写法是：\n// index.js  import React, { Component,Fragment } from \u0026#39;react\u0026#39; export default class index extends Component { render() { return ( \u0026lt;Fragment\u0026gt; \u0026lt;h2\u0026gt;hello,wolrd\u0026lt;/h2\u0026gt; \u0026lt;/Fragment\u0026gt; ) } } 在引入 React 的时候，增加一个属性 Fragment ，然后 render()方法下唯一的根元素我们用 \u0026lt;Fragment\u0026gt; \u0026lt;/Fragment\u0026gt; 来代替，这时候再看浏览器，就不会显示多余的标签了，直接显示 \u0026lt;h2\u0026gt;标签\n","date":"2020-12-12T13:10:00Z","permalink":"https://imzsh.com/posts/20201212/","section":"posts","tags":["react"],"title":"React 中的占位符 Fragment"},{"categories":["编程技术"],"contents":"根据官网文档来解释，为什么不可变性的概念在 React 中非常重要的原因，一般来说，有两种改变数据的方式。第一种方式是直接修改变量的值，第二种方式是使用新的一份数据替换旧数据\n React 文档\n 一般来说，有两种改变数据的方式。第一种方式是直接修改变量的值，第二种方式是使用新的一份数据替换旧数据\n直接修改数据 var player = {score: 1, name: \u0026#39;Jeff\u0026#39;}; player.score = 2; // player 修改后的值为 {score: 2, name: \u0026#39;Jeff\u0026#39;} 新数据替换旧数据 var player = {score: 1, name: \u0026#39;Jeff\u0026#39;}; var newPlayer = Object.assign({}, player, {score: 2}); // player 的值没有改变, 但是 newPlayer 的值是 {score: 2, name: \u0026#39;Jeff\u0026#39;}  // 使用对象展开语法，就可以写成： // var newPlayer = {...player, score: 2}; 不直接修改（或改变底层数据）这种方式和前一种方式的结果是一样的，这种方式有以下几点好处:\n简化复杂的功能 不可变性使得复杂的特性更容易实现。在后面的章节里，我们会实现一种叫做“时间旅行”的功能。“时间旅行”可以使我们回顾井字棋的历史步骤，并且可以“跳回”之前的步骤。这个功能并不是只有游戏才会用到——撤销和恢复功能在开发中是一个很常见的需求。不直接在数据上修改可以让我们追溯并复用游戏的历史记录\n跟踪数据的改变 如果直接修改数据，那么就很难跟踪到数据的改变。跟踪数据的改变需要可变对象可以与改变之前的版本进行对比，这样整个对象树都需要被遍历一次\n确定在 React 中何时重新渲染 不可变性最主要的优势在于它可以帮助我们在 React 中创建 pure components。我们可以很轻松的确定不可变数据是否发生了改变，从而确定何时对组件进行重新渲染\n","date":"2020-12-02T13:09:00Z","permalink":"https://imzsh.com/posts/20201202/","section":"posts","tags":["react","编程"],"title":"为什么不可变性在 React 中那么重要？"},{"categories":["生活随笔"],"contents":"有关react框架的学习计划，除了之前推荐的react开源作者写的学习建议，我还参考了阮一峰的react实例教程，写的通俗易懂，又难易并进，可以很快的掌握react的核心要点\n之前说了，为了公司的项目决定学习react框架，看了一份react.js开源作者的一份学习计划，react学习路径－－怎么学习react？个人感觉还是不错，但是需要看的文档比较多且官方文档没有那么详细的讲解，只说个原理，有些难以参透。\n在网络上浏览很久，发现大家对阮一峰的react教程风评不错，就去看了一下。\n很适合刚接触react的人，可以很快的上手，再参照一下官方文档，理解上来就很深入且进一步了。\nreact官方文档\n阮一峰的网络日志－react入门实例教程\n 阮一峰:我学习 React 时，就很苦恼。有的教程讨论一些细节问题，对入门没帮助；有的教程写得不错，但比较短，无助于看清全貌。我断断续续学了几个月，看过二十几篇教程，在这个过程中，将对自己有帮助的 Demo 都收集下来，做成了一个库React Demos。\n  下面，我就根据这个库，写一篇全面又易懂的 React 入门教程。你只需要跟着每一个 Demo 做一遍，就能初步掌握 React 。当然，前提是你必须拥有基本 JavaScript 和 DOM 知识，但是你读完就会发现，React 所要求的预备知识真的很少。\n github \u0026raquo;\u0026gt; ruanyf/react-demos\n把这个库clone下来，然后跟着练习。\n只要有一定的javascript基本，我觉得学习react并不困难，当然这只是入门，想要更深入的了解他，我觉得还有一段路程去经历，以后也会慢慢记录在react使用中遇到的问题，以及一些知识点的笔记。\n","date":"2020-11-27T13:08:00Z","permalink":"https://imzsh.com/posts/20201127/","section":"posts","tags":["react"],"title":"关于react的一份学习计划"},{"categories":["编程技术"],"contents":"进行重新加载编译。实际就是将浏览器不认识的语法编译成浏览器认识的语法。比如less编译成css，ES6 语法 转成 ES5等等。\n减少io请求,通常我们在请求后，会返回一个html到浏览器。这时，我们如果打开控制台，就会发现在html页面通过script,link等标签引用的静态资源， 浏览器会再次发出请求去获取这些资源。但是webpack的打包，将所有的静态资源都合并好了，减少了io请求。\n# 安装webpack npm install --save-dev webpack # 安装webpack-cli依赖 npm install --save-dev webpack-cli # 创建新项目 mkdir demo # cd项目 cd demo # 初始化 npm init -y # 安装开发版本cli npm install webpack webpack-cli --save-dev 新建一个html文件和一个js文件，工程目录如下\ndemo |- package.json + |- index.html + |- /src + |- index.js src/index.js:\nfunction component() { var element = document.createElement(\u0026#39;div\u0026#39;); // Lodash（目前通过一个 script 脚本引入）对于执行这一行是必需的  element.innerHTML = _.join([\u0026#39;Hello\u0026#39;, \u0026#39;webpack\u0026#39;], \u0026#39; \u0026#39;); return element; } document.body.appendChild(component()); index.html:\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;起步\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/lodash@4.16.6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026#34;./src/index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 在package.json中：\n删除\u0026quot;main\u0026quot;: \u0026quot;index.js\u0026quot;,添加\u0026quot;private\u0026quot;: true\n调整工程目录：\n demo\r|- package.json\r+ |- /dist\r+ |- index.html\r- |- index.html\r|- /src\r|- index.js\r要在index.js中打包lodash依赖，我们需要在本地安装 library，终端输入指令：\nnpm install --save lodash 然后调整index.js内容\n// 添加一行代码 import _ from \u0026#39;lodash\u0026#39;; 在dist/index.html中可以把引入的外部文件lodash删去\n删去\u0026lt;script src=\u0026quot;./src/index.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\n添加\u0026lt;script src=\u0026quot;main.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\n执行终端：\nnpx webpack 即可在dist中打包生成需要的main.js文件\n还可以手动配置文件，在根目录下新建一个webpack.config.js文件\nconst path = require(\u0026#39;path\u0026#39;); module.exports = { // 这里放着需要打包的文件，如果多个文件，用数组形式写  entry: \u0026#39;./src/index.js\u0026#39;, output: { // 这里是打包生成的文件名，还可以手动修改  filename: \u0026#39;bundle.js\u0026#39;, path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) } }; 考虑到用 CLI 这种方式来运行本地的 webpack 不是特别方便，我们可以设置一个快捷方式，\n在package.json中的\u0026quot;scripts\u0026quot;新增\n\u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34; 这样就可以使用npm run build指令代替之前的npx了\n把之前dist文件夹里面的js文件删去，然后重新打包\nnpm run build 看一下工程目录\ndemo |- package.json |- webpack.config.js |- /dist |- bundle.js |- index.html |- /src |- index.js |- /node_modules 没问题，成功打包，浏览器也正常显示\n在js文件中import了一个css文件，需要在配置中安装并添加style-loaader和css-loader\nnpm install --save-dev style-loader css-loader webpack.config.js:\nconst path = require(\u0026#39;path\u0026#39;); module.exports = { entry: \u0026#39;./src/index.js\u0026#39;, output: { filename: \u0026#39;bundle.js\u0026#39;, path: path.resolve(__dirname, \u0026#39;dist\u0026#39;) }, // 添加的内容  module: { rules: [ { test: /\\.css$/, use: [ \u0026#39;style-loader\u0026#39;, \u0026#39;css-loader\u0026#39; ] } ] } }; 然后在js模块中：\nimport \u0026#39;./style.css\u0026#39; npm run build就可以自动解析打包啦\n加载图片\n下载安装file-loader\nnpm install --save-dev file-loader webpack.config.js:\nmodule: { rules: [ { test: /\\.css$/, use: [ \u0026#39;style-loader\u0026#39;, \u0026#39;css-loader\u0026#39; ] },{ test: /\\.(png|svg|jpg|gif)$/, use: [ \u0026#39;file-loader\u0026#39; ] } ] } 加载字体\nwebpack加载字体资源\n记载数据资源\n此外，可加载的有用资源还有数据，json文件，CSV，TSV，XML等，实际上，json是内置的，可以直接import data from './data.json'引入\n但是CSV，TSV，XML不可以，需要配置一下依赖\n终端下载安装：\nnpm install --save-dev csv-loader xml-loader webpack.config.js:\n{ test: /\\.(csv|tsv)$/, use: [ \u0026#39;csv-loader\u0026#39; ] }, { test: /\\.xml$/, use: [ \u0026#39;xml-loader\u0026#39; ] } 在src目录下添加一个json文件data.json\n然后在index.js中引入：\nimport data from \u0026#39;./data.json\u0026#39; ","date":"2020-11-26T13:08:00Z","permalink":"https://imzsh.com/posts/20201126/","section":"posts","tags":["工具","webpack"],"title":"webpack安装配置指令"},{"categories":["编程技术"],"contents":"一、计算属性computed 1.例子 \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div\u0026gt;{{message}}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{{revermessage}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { message: \u0026#39;hello,wolrd\u0026#39; }, computed: { revermessage: function() { return this.message.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;) } } }) \u0026lt;/script\u0026gt; 声明一个计算属性severmessage，在computed中被指向对message进行一些方法操作后的返回值\n此时vm.severmessage依赖于vm.message的变化，对message改变数据，会引起severmessage的更新\n2.计算属性缓存和方法 还可以通过在表达式中调用方法来达到想要的效果\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div\u0026gt;{{message}}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{{revermessage()}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { message: \u0026#39;hello,wolrd\u0026#39; }, methods: { revermessage: function() { return this.message.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;) } } }) \u0026lt;/script\u0026gt; 经过测试，两者的结果是一样的\n我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的\n区别是：计算属性是基于他们的响应式依赖进行缓存的，只有当响应式依赖，也就是message发生改变时才会重新求值，就意味着，只要message还没改变，多次访问revermessage计算属性只会返回之前计算结果的缓存，而不是直接执行计算属性的函数\n而方法，在每次触发重新渲染时，调用方法都会执行一次函数，这就多了一份开销\n我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 A，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 A。如果没有缓存，我们将不可避免的多次执行 A 的 getter！如果你不希望有缓存，请用方法来替代\n3.计算属性和侦听属性 vue还有一种方式来观测vue实例上的数据变动：侦听属性－－watch\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; {{fullname}} \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { firstname: \u0026#39;a\u0026#39;, lastname: \u0026#39;b\u0026#39;, fullname: \u0026#39;ab\u0026#39; }, watch: { firstname: function(val) { this.fullName = val + \u0026#39; \u0026#39; + this.lastName }, lastname: function(val) { this.fullName = this.firstName + \u0026#39; \u0026#39; + val } } }) \u0026lt;/script\u0026gt; 使用过程是极其繁琐且重复的，再来用计算属性试一下\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; {{fullname}} \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { firstname: \u0026#39;a\u0026#39;, lastname: \u0026#39;b\u0026#39; }, computed: { fullname: function() { return this.firstname + this.lastname } } }) \u0026lt;/script\u0026gt; 很简单快速的就得到了我们想要的函数表达式\n4.计算属性的setter computed: { fullName: { // getter  get: function () { return this.firstName + \u0026#39; \u0026#39; + this.lastName }, // setter  set: function (newValue) { var names = newValue.split(\u0026#39; \u0026#39;) this.firstName = names[0] this.lastName = names[names.length - 1] } } } 现在在控制台输入vm.fullName = 'John Doe'，页面会响应，并且setter会被调用，vm.firstname和vm.lastname也会相应地被更新\n二、绑定class和style 1.对象语法 可以给v-bind:class传入一个对象，动态的切换class\n\u0026lt;div v-bind:class=\u0026#34;{active: ok}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 可以通过控制ok的布尔值来动态的控制class\n还可以创建多个字段，并且不影响普通的className的存在\nhtml:\n\u0026lt;div class=\u0026#34;static\u0026#34; v-bind:class=\u0026#34;{ active: isActive, \u0026#39;text-danger\u0026#39;: hasError }\u0026#34; \u0026gt;\u0026lt;/div\u0026gt; data:\ndata{ isActive: true, hasError: false } 结果为：\n\u0026lt;div class=\u0026#34;static active\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 当isActive或者hasError变化时，class 列表将相应地更新。例如，如果hasError的值为true，class 列表将变为\u0026quot;static active text-danger\u0026quot;。\n绑定的数据对象也不必直接写在内联模板里\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div v-bind:class=\u0026#34;classobject\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { classobject: { active: true, \u0026#39;text-danger\u0026#39;: true } }, }) \u0026lt;/script\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;active text-danger\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; --\u0026gt;  如果className有特殊符号，必须加上引号''，或者\u0026quot;\u0026quot;\n 2.数组语法 我们可以把一个数组传给v-bind:class，以应用一个 class 列表\n\u0026lt;div v-bind:class=\u0026#34;[activeClass, errorClass]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; data: { activeClass: \u0026#39;active\u0026#39;, errorClass: \u0026#39;text-danger\u0026#39; } 渲染为：\n\u0026lt;div class=\u0026#34;active text-danger\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 3.用在组件上 当在一个自定义组件上使用classproperty 时，这些 class 将被添加到该组件的根元素上面。这个元素上已经存在的 class 不会被覆盖。\nVue.component(\u0026#39;my-component\u0026#39;, { template: \u0026#39;\u0026lt;p class=\u0026#34;foo bar\u0026#34;\u0026gt;Hi\u0026lt;/p\u0026gt;\u0026#39; }) 然后在使用的使用的时候添加了一些class：\n\u0026lt;my-component class=\u0026#34;baz boo\u0026#34;\u0026gt;\u0026lt;/my-component\u0026gt; html将会被渲染成：\n\u0026lt;p class=\u0026#34;foo bar baz boo\u0026#34;\u0026gt;Hi\u0026lt;/p\u0026gt; 对于带数据绑定的class也同样适用\n\u0026lt;my-component v-bind:class=\u0026#34;{ active: isActive }\u0026#34;\u0026gt;\u0026lt;/my-component\u0026gt; 当isActive为 truthy 时，HTML 将被渲染成为：\n\u0026lt;p class=\u0026#34;foo bar active\u0026#34;\u0026gt;Hi\u0026lt;/p\u0026gt; 4.绑定内联样式style v-bind:style的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式或带引号的短横线来命名\n\u0026lt;div v-bind:style=\u0026#34;{ color: activeColor, fontSize: fontSize + \u0026#39;px\u0026#39; }\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; js:\ndata: { activeColor: \u0026#39;red\u0026#39;, fontSize: 30 } 或者直接绑定到一个对象，会让模板更加清晰\n\u0026lt;div v-bind:style=\u0026#34;styleObject\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; js:\ndata: { styleObject: { color: \u0026#39;red\u0026#39;, fontSize: \u0026#39;13px\u0026#39; } } 也可以将多个对象应用到一个元素上\n\u0026lt;div v-bind:style=\u0026#34;[baseStyles, overridingStyles]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 自动添加前缀\n当v-bind:style需要使用浏览器前缀的时候，如：-webkit-等，vue会自动侦测并帮生成相应的前缀\n","date":"2020-11-25T13:05:00Z","permalink":"https://imzsh.com/posts/20201125/","section":"posts","tags":["vue","笔记"],"title":"vue学习笔记(3)－－computed, watch，calss, style"},{"categories":["编程技术"],"contents":"一、vue实例 1.创建vue实例 一个vue实例应该通过new Vue来创建根实例，所有的 vue 组件其实都是 vue 实例\nvar vm = new Vue({ ... }) 当一个实例被创建时，data对象中的 property 都被加入到vue的响应式系统中，当值发生改变时，试图也会改变\nvar data = {a: 1} var vm = new Vue({ data: data }) 此时在控制台输入vm.a == data.a会返回true，变量data已经被赋给vue实例中的data对象了\n同时，对两个对象的数据进行操作改变也会影响到另一个\nvm.a = 2 // data.a = 2  data.a = 3 // vm.a = 3 当数据改变时，视图也会重新渲染，如果在vue实例被创建后，又添加了一个新的property，则不会被加入到响应式系统中\n如果一开始就知道后面会添加一个property，但是一开始不存在或为空，需要设置一些初始值\ndata: { newTodoText: \u0026#39;\u0026#39;, visitCount: 0, hideCompletedTods: fasle, todos: [], error: null } 使用Object.freeze()方法的时候，无法修改数据引起视图变化\n Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。\n \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;{{message}}\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var data = {message: \u0026#39;hello,wolrd\u0026#39;} Object.freeze(data) var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: data }) \u0026lt;/script\u0026gt; 在控制台改变vm.message的值会直接报错，因为data对象已经被冻结了，不可改变\nvm.$data\n代表vue实例观察的数据对象\nconsole.log(vm.$data) // 返回数据对象的数组形式 var data = { a: 1 } var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: data }) vm.$data === data // true vm.$el === document.getElementById(\u0026#39;app\u0026#39;) // true 2.生命周期函数 每个实例在被创建的时候，都要经历一些初始化过程，比如：设置数据监听，编译模板，将实例挂载到dom，更新dom等\n在这个过程中会运行一些叫做生命周期的钩子函数，可以在不同阶段添加自己需要的代码\n比如created钩子可以用来表示一个实例被创建之后执行的代码\nnew Vue({ data: { a: 1 }, created: function () { console.log(\u0026#39;a is: \u0026#39; + this.a) } }) // \u0026#34;a is: 1\u0026#34; this用来指向vm实例\n 但是不要在property或者回调上使用箭头函数，created: () =\u0026gt; console.log(this.a)，因为箭头函数没有this的概念，他会把this当作变量一直向上级作用域查找，经常产生Uncaught TypeError: Cannot read property of undefined或Uncaught TypeError: this.myMethod is not a function之类的报错\n 二、模板语法 1.插值 最简单的就是\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;{{message}}\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var app = new Vue({ el: \u0026#34;#app\u0026#34;, data: { message: \u0026#39;hello,world\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/script\u0026gt; 。。。\n下面这段代码给input绑定了一个disabled属性，但是通过ok的真伪来控制属性是否渲染\n当ok为fasle,null,undefined值时，属性都不会被渲染，有点类似于v-if，但是这种写法只是针对属性\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-bind:disabled=\u0026#34;ok\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { message: \u0026#39;hello,wolrd\u0026#39;, ok: false } }) \u0026lt;/script\u0026gt; 在模板语法中还可以使用javascript表达式\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div\u0026gt;{{number + 1}}\u0026lt;/div\u0026gt; \u0026lt;div v-bind:id=\u0026#34;\u0026#39;list-\u0026#39; + id\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{{message.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;)}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { number: 2, id: \u0026#39;li\u0026#39;, message: \u0026#39;hello,wolrd\u0026#39; } }) \u0026lt;/script\u0026gt; 每个模板只能包含一个javascript表达式，如果有多个，则不会生效\n\u0026lt;!-- 这是语句，不是表达式 --\u0026gt; {{ var a = 1 }} \u0026lt;!-- 流控制也不会生效，请使用三元表达式 --\u0026gt; {{ if (ok) { return message } }} 2.指令 参数\n一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，v-bind指令可以用于响应式地更新 HTML attribute：\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;a v-bind:href=\u0026#34;url\u0026#34;\u0026gt;百度\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { url: \u0026#39;https://www.baidu.com\u0026#39; } }) \u0026lt;/script\u0026gt; 在这里href是参数，告知v-bind指令将该元素的hrefattribute 与表达式url的值绑定\n另一个例子是v-on指令，它用于监听dom事件\n\u0026lt;a v-on:click=\u0026#34;doSomething\u0026#34;\u0026gt;...\u0026lt;/a\u0026gt; 动态参数\n 从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数\n \u0026lt;!--注意，参数表达式的写法存在一些约束，如之后的“对动态参数表达式的约束”章节所述。--\u0026gt; \u0026lt;a v-bind:[attributeName]=\u0026#34;url\u0026#34;\u0026gt;...\u0026lt;/a\u0026gt; 这里的attributeName会被作为一个javascript表达式进行动态求值，最终结果被作为参数来使用\n比如：vue实例中有一个attributeName属性其值为href，则这个绑定将等价于v-bind:href\n\u0026lt;a v-bind:href=\u0026#34;url\u0026gt;...\u0026lt;/a\u0026gt; 也可以使用动态的事件名绑定监听函数\n\u0026lt;a v-on:[eventName]=\u0026#34;doSomething\u0026#34;\u0026gt; ... \u0026lt;/a\u0026gt; 如果eventName值为click，则该绑定等价于v-on:click=\u0026quot;doSomething\u0026quot;，一个鼠标点击事件\n对动态参数的值的约束\n动态参数预期会求出一个字符串，异常情况下值为null，这个特殊的null值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。\n对动态参数表达式的约束\n动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的，例如：\n\u0026lt;!-- 这会触发一个编译警告 --\u0026gt; \u0026lt;a v-bind:[\u0026#39;foo\u0026#39; + bar]=\u0026#34;value\u0026#34;\u0026gt; ... \u0026lt;/a\u0026gt; 因此，尽量不要使用空格和引号的表达式，或者采用计算属性来替代这种复杂表达式\n在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把 attribute 名全部强制转为小写\n修饰符\n修饰符是以.指明的特殊后缀，用于指出一个指令应该以特殊方式绑定，例如，.prevent修饰符告诉v-on指令对于触发的事件调用event.preentDefault()\n\u0026lt;form v-on:submit.prevent=\u0026#34;onSubmit\u0026#34;\u0026gt;...\u0026lt;/form\u0026gt; 3.缩写 v-前缀作为一种视觉提示，用来识别模板中 Vue 特定的 attribute。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，v-前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue 管理所有模板的单页面应用程序 (SPA - single page application) 时，v-前缀也变得没那么重要了。因此，Vue 为v-bind和v-on这两个最常用的指令，提供了特定简写\nv-bind\n\u0026lt;!-- 完整语法 --\u0026gt; \u0026lt;a v-bind:href=\u0026#34;url\u0026#34;\u0026gt;...\u0026lt;/a\u0026gt; \u0026lt;!-- 缩写 --\u0026gt; \u0026lt;a :href=\u0026#34;url\u0026#34;\u0026gt;...\u0026lt;/a\u0026gt; \u0026lt;!-- 动态参数的缩写 (2.6.0+) --\u0026gt; \u0026lt;a :[key]=\u0026#34;url\u0026#34;\u0026gt; ... \u0026lt;/a\u0026gt; v-on\n\u0026lt;!-- 完整语法 --\u0026gt; \u0026lt;a v-on:click=\u0026#34;doSomething\u0026#34;\u0026gt;...\u0026lt;/a\u0026gt; \u0026lt;!-- 缩写 --\u0026gt; \u0026lt;a @click=\u0026#34;doSomething\u0026#34;\u0026gt;...\u0026lt;/a\u0026gt; \u0026lt;!-- 动态参数的缩写 (2.6.0+) --\u0026gt; \u0026lt;a @[event]=\u0026#34;doSomething\u0026#34;\u0026gt; ... \u0026lt;/a\u0026gt; 它们看起来可能与普通的 HTML 略有不同，但:与@对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。\n","date":"2020-11-24T13:05:00Z","permalink":"https://imzsh.com/posts/20201124/","section":"posts","tags":["vue","笔记"],"title":"vue学习笔记(2)－－vue实例和模板语法"},{"categories":["编程技术"],"contents":"一、什么是vue? 练习时使用，最新版本\n\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 生产时使用，明确版本号的版本，避免造成不可预见的问题\n\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2.6.12\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; hello world\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; {{message}} \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var app = new Vue({ el: \u0026#34;#app\u0026#34;, data: { message: \u0026#39;hello,world\u0026#39; } }) \u0026lt;/script\u0026gt; 1.v-指令  v-bind－－绑定属性  \u0026lt;div id=\u0026#34;app-2\u0026#34;\u0026gt; \u0026lt;span v-bind:title=\u0026#34;message\u0026#34;\u0026gt; 鼠标悬停几秒钟查看此处动态绑定的提示信息！ \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { message: \u0026#39;页面加载于 \u0026#39; + new Date().toLocaleString() } }) \u0026lt;/script\u0026gt; v-bind是vue特有的提供的属性，他会在dom上应用一个响应式的操作\n打开console，输入app.message = \u0026quot;hello\u0026quot;，页面会改变内容只显示hello\n又或者输入app.message = false，内容会直接不显示\nvue官网例子：\n\u0026lt;!-- 绑定一个 attribute --\u0026gt; \u0026lt;img v-bind:src=\u0026#34;imageSrc\u0026#34;\u0026gt; \u0026lt;!-- 动态 attribute 名 (2.6.0+) --\u0026gt; \u0026lt;button v-bind:[key]=\u0026#34;value\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;!-- 缩写 --\u0026gt; \u0026lt;img :src=\u0026#34;imageSrc\u0026#34;\u0026gt; \u0026lt;!-- 动态 attribute 名缩写 (2.6.0+) --\u0026gt; \u0026lt;button :[key]=\u0026#34;value\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;!-- 内联字符串拼接 --\u0026gt; \u0026lt;img :src=\u0026#34;\u0026#39;/path/to/images/\u0026#39; + fileName\u0026#34;\u0026gt; \u0026lt;!-- class 绑定 --\u0026gt; \u0026lt;div :class=\u0026#34;{ red: isRed }\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div :class=\u0026#34;[classA, classB]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div :class=\u0026#34;[classA, { classB: isB, classC: isC }]\u0026#34;\u0026gt; \u0026lt;!-- style 绑定 --\u0026gt; \u0026lt;div :style=\u0026#34;{ fontSize: size + \u0026#39;px\u0026#39; }\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div :style=\u0026#34;[styleObjectA, styleObjectB]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- 绑定一个全是 attribute 的对象 --\u0026gt; \u0026lt;div v-bind=\u0026#34;{ id: someProp, \u0026#39;other-attr\u0026#39;: otherProp }\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- 通过 prop 修饰符绑定 DOM attribute --\u0026gt; \u0026lt;div v-bind:text-content.prop=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--\u0026gt; \u0026lt;my-component :prop=\u0026#34;someThing\u0026#34;\u0026gt;\u0026lt;/my-component\u0026gt; \u0026lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --\u0026gt; \u0026lt;child-component v-bind=\u0026#34;$props\u0026#34;\u0026gt;\u0026lt;/child-component\u0026gt; \u0026lt;!-- XLink --\u0026gt; \u0026lt;svg\u0026gt;\u0026lt;a :xlink:special=\u0026#34;foo\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/svg\u0026gt;  v-if－－控制元素的显示隐藏  刚才写了，通过app.message = false，可以让message代表的内容处于隐藏状态，但是控制的只能是通过v-for引入的内容，无法直接让元素隐藏\n其实，vue中还有一个专门控制元素显示隐藏的指令－－v-if\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;span v-if=\u0026#34;show\u0026#34;\u0026gt; {{message}} \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var app = new Vue({ el: \u0026#34;#app\u0026#34;, data: { message: \u0026#39;hello,world\u0026#39;, show: true } }) \u0026lt;/script\u0026gt; 给元素绑定一个指令v-if = \u0026quot;show\u0026quot;，然后在data中控制show的布尔值，true显示，false隐藏\n同时还有这个功能的指令v-show，根据表达式之真假值，切换元素的display CSS property，也是通过绑定的布尔值来显示隐藏\n但是v-if和v-show有些区别\n(1) v-if是控制元素是否渲染最终控制元素的显示隐藏，适用于切换频率低的情况 (2) v-show不管显示隐藏都渲染，然后通过布尔值绑定display: none属性，适用于切换频率高的情况\n 注意：v-show不支持\u0026lt;tempalte\u0026gt;元素，也不支持v-else\n 搭配用法\nv-else和v-else-if\n可以通过使用v-else达到v-if的效果，必须和v-if搭配使用，比如：\n\u0026lt;div v-if=\u0026#34;1\u0026gt;2\u0026#34;\u0026gt; hello \u0026lt;/div\u0026gt; \u0026lt;div v-else\u0026gt; hi \u0026lt;/div\u0026gt; 如果v-if不成立，执行v-else，也就是显示v-else里面的内容\n是不是有点javascript里面if函数的感觉了\nv-else-if用法大致一样，必须和v-if和v-else搭配使用\n v-for－－遍历数组并显示到页面上  v-for算是vue的核心指令之一了把，主要是渲染一个项目列表的\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div v-for=\u0026#34;item in list\u0026#34;\u0026gt;{{item.message}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var app = new Vue({ el: \u0026#34;#app\u0026#34;, data: { list: [ {message: \u0026#39;html\u0026#39;}, {message: \u0026#39;css\u0026#39;} ] } }) \u0026lt;/script\u0026gt; 可以直接把列表数据循环输出\n并且在控制台中通过push()还能添加新的列表项\napp.list.push({message: \u0026#34;js\u0026#34;}) vue对数据操作，就是这么神奇\n不推荐v-for和v-if同时使用，因为v-for拥有更高的优先级\n v-on－－绑定事件监听器  即绑定事件，通过v-on给div绑定了一个点击事件，注意，在reverseMessage方法中，我们更新了应用的状态，但是吗诶呀触碰到dom，直接通过vue来进行处理，编写代码时只需要关注逻辑层即可\nv-on:click=\u0026quot;messagenone\u0026quot;，然后在methods里面写上事件方法\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div v-on:click=\u0026#34;messagenone\u0026#34; id=\u0026#34;demo\u0026#34;\u0026gt;{{message}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var app = new Vue({ el: \u0026#34;#app\u0026#34;, data: { message: \u0026#39;hello,wolrd\u0026#39; }, methods: { messagenone: function() { var demo = document.getElementById(\u0026#39;demo\u0026#39;); demo.innerHTML = \u0026#39;\u0026#39; } } }) \u0026lt;/script\u0026gt;  v-model－－数据的双向绑定  vue还提供了v-model指令，它能轻松实现表单输入和应用状态之间的双向绑定\n可使用场景：标签input, select, textarea 和 components\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div\u0026gt;{{message}}\u0026lt;/div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;message\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var app = new Vue({ el: \u0026#34;#app\u0026#34;, data: { message: \u0026#39;hello,wolrd\u0026#39; } }) \u0026lt;/script\u0026gt;  v-text更新元素的内容  \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div v-text=\u0026#34;message\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{{message}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { message: \u0026#39;hello,wolrd\u0026#39; } }) \u0026lt;/script\u0026gt; 上面的div和下面的div内容跟随一致变化\n v-html－－更新元素的innerHTML  不建议使用，在网站上动态渲染html是非常危险的，容易导致XXS攻击，不能用在用户提交的内容上，如果必须使用v-html，可以考虑通过使用组件来代替\n v-pre  跳过绑定的元素和他的子元素的编译，直接显示原始内容\n跳过没有指令的节点不进行编译，直接显示内容，会加快页面的响应\n v-cloak  在编译没有编译完成之前，模板处于的状态\n\u0026lt;style\u0026gt;v-cloak] { display: none; }\u0026lt;/style\u0026gt; \u0026lt;div v-cloak\u0026gt; {{message}} \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { message: \u0026#39;hello,wolrd\u0026#39; } }) \u0026lt;/script\u0026gt; 上述代码表示的含义是，如果网络不好，{{message}}模板代表的hello,world还没有编译成功，此时{{message}}处于隐藏状态，当编译完成，页面直接显示hello,world\n v-once－－一次性渲染  绑定该指令的元素及其子元素只会进行一次渲染，之后页面的第二次渲染会将其视为静态资源并跳过，可以用来优化性能\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;span v-once\u0026gt;{{message}}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { message: \u0026#39;hello,wolrd\u0026#39;, } }) \u0026lt;/script\u0026gt; 使用场景：表单提交。可防止用户在请求未及时响应时，多次提交~\n2.组件化构建应用 组件化也是vue的核心机制之一，它允许我们使用小型，可复用的组件来构建大型应用\n在 vue 里，一个组件本质上是一个拥有预定义选项的一个 vue 实例。在 vue 中注册组件很简单\n// 定义名为 todo-item 的新组件 Vue.component(\u0026#39;todo-item\u0026#39;, { template: \u0026#39;\u0026lt;li\u0026gt;这是个待办项\u0026lt;/li\u0026gt;\u0026#39; }) var app = new Vue(...) 现在可以用它构建另一个组件模板\n\u0026lt;ol\u0026gt; \u0026lt;!-- 创建一个 todo-item 组件的实例 --\u0026gt; \u0026lt;todo-item\u0026gt;\u0026lt;/todo-item\u0026gt; \u0026lt;/ol\u0026gt; 但是这样会为每个待办项渲染同样的文本，这看起来并不炫酷。我们应该能从父作用域将数据传到子组件才对。让我们来修改一下组件的定义，使之能够接受一个props\nVue.component(\u0026#39;todo-item\u0026#39;, { // todo-item 组件现在接受一个  // \u0026#34;props\u0026#34;，类似于一个自定义 attribute。  // 这个 props 名为 todo。  props: [\u0026#39;todo\u0026#39;], template: \u0026#39;\u0026lt;li\u0026gt;{{ todo.text }}\u0026lt;/li\u0026gt;\u0026#39; }) 现在，我们可以使用v-bind指令将待办项传到循环输出的每个组件中\n现在我们为每个 todo-item 提供 todo 对象todo 对象是变量，即其内容可以是动态的，我们也需要为每个组件提供一个key\n\u0026lt;div id=\u0026#34;app-7\u0026#34;\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;todo-item v-for=\u0026#34;item in groceryList\u0026#34; v-bind:todo=\u0026#34;item\u0026#34; v-bind:key=\u0026#34;item.id\u0026#34; \u0026gt;\u0026lt;/todo-item\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/div\u0026gt; Vue.component(\u0026#39;todo-item\u0026#39;, { props: [\u0026#39;todo\u0026#39;], template: \u0026#39;\u0026lt;li\u0026gt;{{ todo.text }}\u0026lt;/li\u0026gt;\u0026#39; }) var app7 = new Vue({ el: \u0026#39;#app-7\u0026#39;, data: { groceryList: [ { id: 0, text: \u0026#39;蔬菜\u0026#39; }, { id: 1, text: \u0026#39;奶酪\u0026#39; }, { id: 2, text: \u0026#39;随便其它什么人吃的东西\u0026#39; } ] } }) 尽管这只是一个刻意设计的例子，但是我们已经设法将应用分割成了两个更小的单元。子单元通过prop接口与父单元进行了良好的解耦。我们现在可以进一步改进  组件，提供更为复杂的模板和逻辑，而不会影响到父单元\n在一个大型应用中，有必要将整个应用程序划分为组件，以使开发更易管理\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;app-nav\u0026gt;\u0026lt;/app-nav\u0026gt; \u0026lt;app-view\u0026gt; \u0026lt;app-sidebar\u0026gt;\u0026lt;/app-sidebar\u0026gt; \u0026lt;app-content\u0026gt;\u0026lt;/app-content\u0026gt; \u0026lt;/app-view\u0026gt; \u0026lt;/div\u0026gt; ","date":"2020-11-23T13:04:00Z","permalink":"https://imzsh.com/posts/20201123/","section":"posts","tags":["vue","笔记"],"title":"vue学习笔记(1)－－什么是vue?"},{"categories":["编程技术"],"contents":"react学习笔记，记录我在开发和学习过程中遇到的问题和知识点\n2013年5月Facebook推出了React.js开源软件前端框架，函数式编程，是使用人数最多的前端框架，也拥有最健全的文档和完善的社区\nReact官网\n16版本之后的react叫做 react fiber\n一、开发环境准备  引入.js文件来使用React 通过脚手架工具来编码，但是最终代码不能运行，需要通过webpack等来编译  （官方提供的脚手架工具 Create-react-app ）\n1.如何使用脚手架工具？  下载node.js ， 进入官方网站  node -v //node版本号 npm -v //npm 版本号 2.使用脚手架工具创建一个项目 打开命令行工具，依次执行命令\nnpx create-react-app my-app //创建项目 cd my-app //进入项目 npm start //运行项目 正常情况下就会在浏览器中弹出以下页面，说明项目运行成功\n3.运行项目 安装依赖包，在命令行中输入:\nyarn install\r然后重新启动npm start或者yarn start\n4.工程目录 build //打包之后自动生成的目录\rpublic-- //生成的页面内容\r| favicon.ico\r| index.html\r| manifest.json //不需要，可以删除\rsrc----- //放置的是项目的源代码 | index.js //入口的js文件，放置整个项目需要引入的第三方模块或者文件\r| index.css //项目页面的全局css样式\r| App.js //负责往页面渲染一些内容\r| App.css //项目页面的css样式\r| serviceWorker //PWA的一些内容\r|\r|\rnode_modules //项目中需要的第三方模块\r.gitgnore //这里面的内容不会上传到github 上\rpackage.json //对项目的配置进行说明性的东西，版本和和第三方模块等，以及start,npm run build进行项目打包\rREADME.md //对文件的说明描述\ryarn lock //放置整个项目依赖的第三方模块的版本信息，不需要做任何修改，放在这里就可以\r可以在index.js文件中引入css文件\n**index.js** //引入了两个第三方模块 import React from \u0026#39;react\u0026#39;; import ReactDOM from \u0026#39;react-dom\u0026#39;; import \u0026#39;./index.css\u0026#39; //可以再index.js中引入css样式文件  import App from \u0026#39;./App.js\u0026#39; //在index.js中引入App.js，才能在浏览器渲染出App.js中写出的内容  //App里面的内容，通过这行代码挂载到页面id为root的标签下 ReactDOM.render(\u0026lt;App /\u0026gt;,document.getElementById(\u0026#39;root)); App.js中也可以引入css和svg\n**App.js** import logo from \u0026#39;./logo.svg\u0026#39;; import \u0026#39;./App.css\u0026#39;; //通过语法渲染内容 function App() { return ( \u0026lt;div\u0026gt; hello world \u0026lt;/div\u0026gt; ); } 二、React 组件 （使用create-react-app脚手架工具创建项目时，会判断当前环境是否有yarn这个工具，如果有的话就会用yarn进行依赖包的安装，生成yarn.lock文件；如果没有的话就会用npm进行安装，生成package-lock.json文件）\n组件就是页面上的一部分，一个网页可以分成很多个组件，每个组件又可以拆分成一个小组件\n我们可以把App.js叫做一个组件，在index.js中引入了react的组件，就是把react这个组件渲染到页面上的root元素之中\n1.React 模块的作用 必须引入React这个模块，引入这个模块的作用就是解析JSX语法，如果没有引入，浏览器就会报错，因为识别不出来这个语法\nimport React from \u0026#39;react\u0026#39; //JSX语法 ReactDOM.render(\u0026lt;App /\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) ); 假如没有引入React这个模块，就会出现下面这种情况 2.Conponent 模块 这几行被注释掉的代码的缩写相当于第一行代码，实际操作中直接写缩写后的import React, {Conponent } from 'react';\n**App.js** import React, {Conponent } from \u0026#39;react\u0026#39;; // import { Component } from \u0026#39;react\u0026#39;; // import React from \u0026#39;react\u0026#39;; // const { Component } = React; // const Component = React.Component  class App extends Component { //render函数决定了往页面上渲染的是什么内容 \trender() { return ( \u0026lt;div\u0026gt; hello world \u0026lt;/div\u0026gt; ); } } export default App; 3.引入多个组件 现在我们要引入App.js和Test.js两个组件到index.js当中去\n**index.js** import App from \u0026#39;./App\u0026#39;; import Test from \u0026#39;./Test\u0026#39;; //JSX语法 ReactDOM.render(\u0026lt;div\u0026gt;\u0026lt;App /\u0026gt;\u0026lt;Test /\u0026gt;\u0026lt;/div\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) //因为ReactDOM.render语法只能解析一个标签，所以把\u0026lt;App /\u0026gt;和\u0026lt;Test /\u0026gt;放在一个div当中，让react去解析这一个div就可以 4、组件 JSX语法里面，有两种类型的标签\n1.普通的html标签 可以看到这种类型的标签div都是小写的\nrender() { return ( \u0026lt;div\u0026gt; hello world \u0026lt;/div\u0026gt; ); } 2.组件标签 可以看到App标签首字母是大写的，所以我们在创建组件的时候直接以大写字母开头\nReactDOM.render(\u0026lt;App /\u0026gt;,document.getElementById(\u0026#39;root\u0026#39;)); 通过判断字母大小写我们可以分辨出普通html标签和组件标签\n三、使用React编写ToDoList功能 我们来看一下基本的TodoList组件内容\n**TodoList.js** import React, { Component } from \u0026#39;react\u0026#39;; class TodoList extends Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;input /\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;learn React\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;learn Component\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ); } } // 导出组件 export default TodoList; **index.js** import React from \u0026#39;react\u0026#39;; import ReactDOM from \u0026#39;react-dom\u0026#39;; import TodoList from \u0026#39;./TodoList\u0026#39;; ReactDOM.render(\u0026lt;TodoList /\u0026gt;,document.getElementById(\u0026#39;root\u0026#39;); 然后打开浏览器看一下html结构 能够看到input和ul外层还包裹着一层div，在这层div外部才是root，在有些情况，我们不需要这层多余的div，想让input和ul直接放到root下面，但是如果直接去掉TodoList里面的div，会出现报错显示无法解析，因为render下面只能有一个标签\nreact16提供了一个占位符 Fragment，他就是一个占位的组件，并不会生成标签，所以帮助我们解决报错问题而不会生成任何标签，非常适合这种使用情况\n**TodoList** import React, { Component, Fragment } from \u0026#39;react\u0026#39;; class TodoList extends Component { render() { return ( \u0026lt;Fragment\u0026gt; \u0026lt;input /\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;learn React\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;learn Component\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/Fragment\u0026gt; ); } } // 导出组件 export default TodoList; 打开浏览器看一下html结构\n页面没有变化，和原来一样，但是dom结构已经精简了，达到了我们预期的要求\n四、JSX语法 1.JSX基本语法 在JSX中嵌入一个表达式，首先声明一个name变量\nconst name = \u0026#39;Josh Perez\u0026#39;; const element = \u0026lt;h1\u0026gt;Hello, {name}\u0026lt;/h1\u0026gt;; ReactDOM.render( element, document.getElementById(\u0026#39;root\u0026#39;) ); \u0026hellip; 甚至可以嵌入一个函数表达式\nfunction formatName(user) { return user.firstName + \u0026#39; \u0026#39; + user.lastName; } const user = { firstName: \u0026#39;Harper\u0026#39;, lastName: \u0026#39;Perez\u0026#39; }; const element = ( \u0026lt;h1\u0026gt; Hello, {formatName(user)}! \u0026lt;/h1\u0026gt; ); ReactDOM.render( element, document.getElementById(\u0026#39;root\u0026#39;) ); 在formatName(user)调用变量user的属性，并且将formatName(user)放置在element中去，最后在ReactDOM.render中引入\n并且在JSX中可以包含很多子标签，唯一要注意的是，不管有多少子标签，但是只能存在一个父标签\nconst element = ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Good to see you here.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); JSX表示对象\n可以使用React.createElement()进行函数调用\nconst element = ( \u0026lt;h1 className=\u0026#34;greeting\u0026#34;\u0026gt; Hello, world! \u0026lt;/h1\u0026gt; ); 完全等价于：\nconst element = React.createElement( \u0026#39;h1\u0026#39;, {className: \u0026#39;greeting\u0026#39;}, \u0026#39;Hello, world!\u0026#39; ); 2.元素渲染 将一个react元素渲染到dom节点中去，需要传入ReactDOM.render()\nconst element = \u0026lt;h1\u0026gt;Hello, world\u0026lt;/h1\u0026gt;; ReactDOM.render(element, document.getElementById(\u0026#39;root\u0026#39;)); 3.更新已渲染的元素 react元素是一个不可变对象，无法更改它的子元素，想要更改的话，需要创建一个全新的元素传入ReactDOM.render()\n据一个计时器的例子\nfunction tick() { const element = ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {new Date().toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); ReactDOM.render(element, document.getElementById(\u0026#39;root\u0026#39;)); } setInterval(tick, 1000);  注意：直接new Date()是一个变量，无法显示在页面的节点中，只有通过toLocaleTimeString()当法将其转化为字符串才可以显示\n 这个例子，setInterval每秒会调用一次，因此在页面上，会显示每秒的时间 五、生命周期 先上一张生命周期图示\n当Clock组件第一次被渲染到DOM中的时候，就为其设置一个计时器。这在 React 中被称为挂载（mount)。\n同时，当DOM中Clock组件被删除的时候，应该清除计时器。这在 React 中被称为卸载(unmount)。\nclass Clock extends React.Component { constructor(props) { super(props); this.state = {date: new Date()}; } componentDidMount() { } componentWillUnmount() { } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {this.state.date.toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); } } ","date":"2020-11-22T13:02:00Z","permalink":"https://imzsh.com/posts/20201122/","section":"posts","tags":["react"],"title":"React 学习笔记（一）"},{"categories":["编程技术"],"contents":"类是对的类型，类是具有相同属性和方法的一组集合，一个类可以对应多个对象，对象通过他们公开的方法来定义他们与外界的交互行为，而方法就形成了与外界交互的接口\n类，对象和接口 1.类和对象 区别：\n 对象是类的一个实例。就比如一个人，他有具体的属性，身高，体重，姓名等状态，跑步，跳舞等行为 类是抽象的概念，代表一类事物的模版。对一类对象的行为和状态进行描述，抽离出其共性，形成类  关系：\n 类就是对事物的一种描述，对象是具体存在的一个实例   类是对的类型，类是具有相同属性和方法的一组集合，一个类可以对应多个对象\n 2.什么是接口？ 对象通过他们公开的方法来定义他们与外界的交互行为，而方法就形成了与外界交互的接口\n更深层次的含义是：使定义和实现分离开，他是交互的具体实现的抽象化\n接口是面向对象编程的基础，它是一组包含了函数方法的数据结构，他是一个比类更抽象化的东西\n可以这么说，类是对象的抽象化，接口是类的抽象化\n 比如生活中的接口，机顶盒，人们利用它来实现收看不同频道和信号的节目，它犹如对不同类型的信息进行集合和封装的设备，最后把各种不同类型的信息转换为电视能够识别的信息。\n  在编程语言中的接口，实际上是不同类的封装并提供统一的外部联系通道，这样其他对象就可以利用接口来调用不同类的成员了\n 接口和类，实际上都是相同的数据结构\n在接口中，可以声明属性，方法，事件，类型，但是不能声明变量，也就是说，接口只能定义成员，不能给成员赋值\n使用接口的好处，提高代码灵活性，降低对象之间的耦合度，在实际项目中非常有用\n","date":"2020-11-21T13:01:00Z","permalink":"https://imzsh.com/posts/20201121/","section":"posts","tags":["编程"],"title":"对象，类和接口之间的关系"},{"categories":["编程技术"],"contents":"vue使用cli脚手架构建项目工程，执行的命令以及遇到的相关的问题\n1.下载安装node 测试一下是否成功安装，\n$ node -v // 返回下载的版本号 2.安装webpack环境 $ npm install webpack -g // 如果失败，可能是因为用户没有权限 // 使用下面这种，管理员权限 $ sudo npm install webpack -g 如果返回版本号代表成功，如果没有，则需要输入下面的命令\n$ npm install webpack webpack-cli -g  webpack 4.X 开始，需要安装 webpack-cli 依赖\n 3.全局安装vue-cli $ npm install --global vue-cli // 如果失败，使用sudo $ sudo npm install --global vue-cli 安装完成之后，输入\n$ vue -V 如果返会版本号，说明安装成功\n4.构建项目 前面那些命令执行完之后，就可以构建ci项目了，找到我们想要放置项目的文件夹，进入终端，cd到这个文件夹\n输入命令：\n$ vue init webpack vuedemo // 名字自己根据要求起,vuedemo  Project name (vuedomo)： \u0026mdash;\u0026ndash;项目名称，直接回车，按照括号中默认名字（注意这里的名字不能有大写字母，如果有会报错Sorry, name can no longer contain capital letters） Project description (A Vue.js project)： \u0026mdash;-项目描述，也可直接点击回车，使用默认名字 Author ()： \u0026mdash;-作者，输入你的大名 Runtime + Compiler: recommended for most users 运行加编译，既然已经说了推荐，就选它了 Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere 仅运行时，已经有推荐了就选择第一个了 Install vue-router? (Y/n) 是否安装vue-router，这是官方的路由，大多数情况下都使用，这里就输入“y”后回车即可。 Use ESLint to lint your code? (Y/n) 是否使用ESLint管理代码，ESLint是个代码风格管理工具，是用来统一代码风格的，一般项目中都会使用。 接下来也是选择题Pick an ESLint preset (Use arrow keys) 选择一个ESLint预设，编写vue项目时的代码风格，直接y回车 Setup unit tests with Karma + Mocha? (Y/n) 是否安装单元测试，我选择安装y回车 Setup e2e tests with Nightwatch(Y/n)? 是否安装e2e测试 ，我选择安装y回车   然后就是缓慢的构建过程，等到构建完成，cd进入构建的项目\n$ cd vuedemo 然后安装需要的依赖\n$ npm install 5.运行项目 运行命令，看看是否能够成功运行项目\n$ npm run dev 根据提示，浏览器输入http://localhost:8080\n如果端口打不开，肯能是因为被占用了，需要修改配置文件，config \u0026gt; index.js\n查看项目工程目录\n6.其他 一些其他相关的指令\n$ npm run build // 项目完成之后打包 打包完成之后，会在根目录下生成一个dist文件夹，需要修改配置文件的路径，可以在本地查看\n项目上线发布，直接上传dist到服务器即可\n","date":"2020-11-20T13:03:00Z","permalink":"https://imzsh.com/posts/20201120/","section":"posts","tags":["vue"],"title":"vue使用cli脚手架构建项目工程"},{"categories":["编程技术"],"contents":"转载于:https://github.com/petehunt/react-howto，react开源作者对于react框架的一个学习路径的建议，个人感觉还是相当不错的学习路线\n 如何学习React? 如果你是一个 React (或者前端) 新手, 出于以下的原因, 你可能会对这个生态圈感到困惑:\n React 的目标群体历来是喜欢尝试新事物的开发者和前端专家. Facebook 开源的内容是应用在他们的实际应用中, 因此他们没有关注那些比 Facebook 小的工程需求. 现有的 React 指引水平参差不齐.  在本文中, 我会假设你已有使用 HTML, CSS 和 JavaScript 开发网页的基础.\n为什么要听我的? 关于 React, 现在已经有大量的相互冲突的建议了, 为什么要听我的?\n因为我是在 Facebook 构建并开源 React 的最初成员之一. 现在我离开了 Facebook 并加入了一家初创公司, 所以我也不会站在 Facebook 的立场上来表态.\n如何踏入 React 生态圈 所有的软件都是建立在某个技术栈之上的, 你需要对整个技术栈有足够深入的理解, 才能建造你的应用. 为什么 React 生态圈的工具似乎总让人感觉压力山大呢, 因为它总是以错误的顺序被解释:\n你应该按照以下的顺序进行学习, 而不是跳着学或者同时学习:\n React npm JavaScript “打包工具” ES6 Routing Flux  你不需要把这些都学完才去使用 React. 只需要在你遇到问题需要解决的时候, 才进入下一步的学习.\n另外, 在 React 社区中, 有一些前沿主题是经常被提及到的, 以下的这些主题很有意思, 但也很难弄懂, 所以它们远没有上面的主题流行, 大多数应用也不需要用到这些.\n 内联样式 服务器端渲染 Immutable.js Relay, Falcor 等  学习 React 本身 有一种常见的误解是: 你需要花费大量时间在配置工具上, 然后才开始学习 React. 在官方文档里, 你可以找到 copy-paste HTML template. 只需要保存为 .html 文件, 你就可以马上开始学习了. 这个步骤不需要任何工具, 你也无需额外学习工具使用, 直到你能熟练掌握 React 基础.\n我依然觉得, 学习 React 最简单的方法是通过官方教程 the official tutorial.\n学习 npm npm 是 Node.js 包管理工具, 也是前端工程师和设计师分享 JavaScript 代码最流行的方式. 它包含了名为 CommonJS 的模块系统, 让你可以安装 JavaScript 写的命令行工具. 作为背景知识, 可以阅读 这篇文章 了解 CommonJS 对于浏览器的重要性, 阅读 CommonJS Spec Wiki 了解关于 CommonJS API 的更多内容\n在 React 生态圈中, 大部分可重用的组件、库和工具遵循 CommonJS 模块规范, 可通过 npm 来安装.\n学习 JavaScript 打包工具 出于若干技术原因, CommonJS 模块 (也就是 npm 里的所有内容) 不能直接用到浏览器. 你需要一个 JavaScript “打包工具(bundler)” 来把这些模块打包成 .js 文件, 使你可以在网页中通过 \u0026lt;script\u0026gt; 标签引入它们.\nJavaScript 打包工具包括 webpack 和 browserify. 它们都是好的选择, 但我个人更喜欢 webpack , 因为它有许多功能简化大型应用开发. 鉴于 webpack 文档可能令人感到困惑, 我也写了两篇文章: plug-and-play template for getting started 和针对更复杂用例的 how-to guide for webpack.\n要记住的一点: CommonJS 使用了 require() 函数来引入模块, 因此许多人对此感到疑惑, 并认为需要导入 require.js 到工程里. 出于若干技术原因, 我建议你避免使用 require.js. 它在 React 生态圈并不流行.\n学习 ES6 在 JSX (你会在 React tutorial 中学习到) 以外, 你可能会注意到 React 例子中一些有趣的语法. 这被称为 ECMAScript6, 是 JavaScript 的最新版本. 由于 ES6 很新, 你可能还没学习到, 浏览器也可能尚未兼容, 但别担心, 通过合适的配置, 你的打包工具会为你自动转换成兼容代码.\n如果你只想要使用 React 来把事情做完, 你可以跳过 ES6 的学习, 或者留到以后再学习.\n你可能会看到一些讨论说更适合用 ES6 的 class 来创建 React 组件. 这并不是真的, 大多数人 (包括 Facebook) 用的还是 React.createClass().\n学习路由 (routing) “单页面应用” 是时下的技术热点. 当网页加载完成, 用户点击链接或者按钮的时候, JavaScript 会更新页面和改变地址栏, 但网页不会刷新. 地址栏的管理就是通过 路由(router) 来完成的.\n目前 React 生态圈最受欢迎的路由解决方案是 react-router. 如果你正在创建一个单页面应用, 有什么理由不去使用它呢?\n如果你创建的并非单页面应用, 请不要使用路由. 无论如何, 大部分项目都是从大型应用中的小组件开始的.\n学习内联样式 在 React 出现之前, 很多人通过像 SASS 这样的预处理器来重用复杂的 CSS 样式表. 鉴于 React 使开发可重用组件变得容易, 你的样式表可以变得没那么复杂了. 社区中许多人 (包括我) 正尝试完全抛弃样式表.\n由于一些原因, 其实这是个相当疯狂的主意. 这让媒体查询 (media quries) 更加困难了, 而且这种技术可能有性能上的局限性. 当你开始用 React 的时候, 只要用你平常使用的方法去写就好了.\n一旦你找到了用 React 开发的感觉, 你就可以关注那些可作为替代的技术了. 其中一种流行技术是 BEM. 我建议你逐渐停用 CSS 预处理器, 因为 React 给了你一种更强大的方式去重用样式 (通过重用组件), 并且 JavaScript 打包工具可以为你生成更高效的样式表 (我曾经在 OSCON 上发表过关于这个的演讲). 说了这么多, 总之 React 就像其他 JavaScript 库一样, 可以和 CSS 预处理器很好地配合工作.\n另一种可选项是 CSS 模块, 更具体地说, 是 react-css-modules. 虽然有了这些 CSS 模块, 你还是写 CSS (或者是 SASS/LESS/Stylus), 但你可以像处理 React 中的内联样式那样管理和组织 CSS 文件. 你也不需要担心用到 BEM 那样的方法学去管理类名, 因为模块系统在底层已经帮你处理好了.\n学习服务器端渲染 服务器端渲染经常被称为 \u0026ldquo;通用应用\u0026rdquo; 或 \u0026ldquo;同构应用\u0026rdquo;. 这意味着你可以用 React 组件在服务器端渲染出静态 HTML. 这样做可以提高初始化加载的性能, 因为用户不用等到 JS 下载完才看到初始界面, 并且 React 可以重用服务器端渲染出的 HTML, 无需客户端重新生成.\n如果你发现首屏渲染速度过慢, 或者想提高网站在搜索引擎的排行, 你就需要服务器端渲染了. 尽管 Google 现在也会索引客户端渲染的内容, 但截至 2016 年 1 月, 这样做仍被证实会对排行有负面影响, 这可能是由于客户端渲染的性能问题所造成的.\n服务器端渲染还需要许多工具的辅助, 因为显然 React 组件不是在考虑服务器端渲染的情况下写出来的, 你应该先构建你的应用, 之后再关心服务器端渲染的问题. 不用担心, 你不需要重写所有组件去支持它.\n学习 Flux 你可能听过 Flux, 不过关于 Flux 有大量的错误资讯.\n许多人一坐下来刚开始构建应用, 就认为需要用 Flux 来定义他们的数据模型. 这样采用 Flux 是不对的, Flux 应该在大量组件被建立完成以后才被引入.\nReact 组件之间存在层级关系. 在很多时候, 你的数据模型也跟随这种层级. 这种情况下, Flux 不会给你很大帮助. 但有些时候, 你的数据模型没有层次, 当你的 React 组件开始接受没有关联的 props 的时候, 或者当小部分组件开始变得复杂的时候, 你才可能需要看看 Flux.\n你会知道什么时候需要用 Flux. 如果你不确定是否需要用它, 你就不需要它.\n如果你决定使用 Flux, 现在最流行的、文档最全的 Flux 库是 Redux. 当然也有许多其他选择, 你或者会有兴趣尝试使用它们, 但我的建议是只需要用最流行的 Redux 就足够了.\n学习 Immutable.js Immutable.js 提供了一系列的数据结构, 以帮助解决构造 React 应用时的某些性能问题. 这是一个很棒的库, 你可能会在应用发展的过程里大量用到它, 但直到你在意识到性能问题以前, 它是完全不必要的.\n学习 Relay, Falcor 等 这些技术可以帮你减少 AJAX 请求数, 它们仍然是非常前沿的, 所以如果你没有遇到过多 AJAX 请求的问题, 就不需要用到 Relay 或者 Falcor.\n","date":"2020-11-19T13:02:00Z","permalink":"https://imzsh.com/posts/20201119/","section":"posts","tags":["react"],"title":"react学习路径－－怎么学习react？"},{"categories":["编程技术"],"contents":"在写一个小demo的时候，无意中发现定义变量的时候直接写入value，会导致获取不到数据，或者获取的不是我们想要的内容，在js中运算不能随便把value属性定义成变量\n先看一段代码\n\u0026lt;input type=\u0026#34;text\u0026#34;\u0026#34; id=\u0026#34;a\u0026#34;\u0026gt; \u0026lt;span\u0026gt;*\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;b\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;=\u0026#34; onclick=\u0026#34;beto()\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;sub\u0026#34; disabled\u0026gt; \u0026lt;script\u0026gt; function beto() { var a = document.getElementById(\u0026#39;a\u0026#39;).value var b = document.getElementById(\u0026#39;b\u0026#39;).value var sub = document.getElementById(\u0026#39;sub\u0026#39;).value sub = a + b } \u0026lt;/script\u0026gt; 就这么一看，逻辑貌似没有问题，获取a和b的value，乘法运算，然后输出sub\n但是放在浏览器运行的时候，发现完全没有反应\n为什么呢？\n（假装思考五分钟\u0026hellip;）\n因为sub.value不能直接定义在变量中\n// 先定义id为sub的input框 var sub = document.getElementById(\u0026#39;sub\u0026#39;) // 然后在运算的时候在直接使用sub.value sub.value = a * b 顺手放一个写demo时候用的简易计算器\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;简易计算器\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34;\u0026#34; id=\u0026#34;a\u0026#34;\u0026gt; \u0026lt;select id=\u0026#34;c\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;+\u0026#34;\u0026gt;+\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;-\u0026#34;\u0026gt;-\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;*\u0026#34;\u0026gt;*\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;/\u0026#34;\u0026gt;/\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;b\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;=\u0026#34; onclick=\u0026#34;beto()\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;sub\u0026#34; disabled\u0026gt; \u0026lt;script\u0026gt; function beto() { var a = document.getElementById(\u0026#39;a\u0026#39;).value var b = document.getElementById(\u0026#39;b\u0026#39;).value var c = document.getElementById(\u0026#39;c\u0026#39;).value var sub = document.getElementById(\u0026#39;sub\u0026#39;) switch(c) { case \u0026#34;+\u0026#34;: sub.value = parseInt(a) + parseInt(b); break; case \u0026#34;-\u0026#34;: sub.value = parseInt(a) - parseInt(b); break; case \u0026#34;*\u0026#34;: sub.value = parseInt(a) * parseInt(b); break; case \u0026#34;/\u0026#34;: sub.value = parseInt(a) / parseInt(b); break; } } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2020-11-18T13:00:00Z","permalink":"https://imzsh.com/posts/20201118/","section":"posts","tags":["js"],"title":"在js中运算不能随便把value属性定义成变量"},{"categories":["编程技术"],"contents":"事件一般是用于浏览器和用户操作之间的交互，当用户执行某些特殊的操作时，浏览器给予反应，触发绑定的事件，事件流，事件发生时会在元素节点和根节点之间按照约定的顺序传播，事件经过的所有节点都会受到事件的影响，这个传播过程被称为DOM事件流\n函数事件 事件一般是用于浏览器和用户操作之间的交互，当用户执行某些特殊的操作时，浏览器给予反应，触发绑定的事件\n事件流，事件发生时会在元素节点和根节点之间按照约定的顺序传播，事件经过的所有节点都会受到事件的影响，这个传播过程被称为DOM事件流\ntrue是捕获，false是冒泡，默认为冒泡事件\n1.addEventListener()－－添加事件监听函数 给元素添加一个事件，假如有多个事件，不会覆盖，会依次执行\n\u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt;dom\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#39;demo\u0026#39;).addEventListener(\u0026#34;click\u0026#34;, myfun) document.getElementById(\u0026#39;demo\u0026#39;).addEventListener(\u0026#34;click\u0026#34;, myfun1) function myfun() { console.log(\u0026#39;事件监听函数\u0026#39;) } function myfun1() { console.log(\u0026#39;addEventListener\u0026#39;) } \u0026lt;/script\u0026gt;  注意： 1.这里有一个细节，addEventListener()里面有两个参数，第一个表示触发的条件，第二个表示触发的事件 正常情况下，第二个参数直接写函数名并且不加参数()，如果加了参数()则表示立即执行，不需要触发第一个参数要求的条件\n  2.在这里绑定事件的时候，事件名不能和定义的变量名一样，否则无效\n 2.removeEventListener()－－移除事件监听函数 下面这个demo，当鼠标在div中移动的时候，出现随机数，点击按钮后，移除事件监听函数\n\u0026lt;!-- css --\u0026gt; \u0026lt;style\u0026gt; #demo { width: 100px; height: 100px; border: 1px solid #000; } \u0026lt;/style\u0026gt; \u0026lt;!-- html --\u0026gt; \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;点击移除\u0026#34; onclick=\u0026#34;remove()\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;show\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- js --\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#39;demo\u0026#39;).addEventListener(\u0026#34;mousemove\u0026#34;, myfun) function myfun() { document.getElementById(\u0026#39;show\u0026#39;).innerHTML = Math.random() } function remove() { document.getElementById(\u0026#39;demo\u0026#39;).removeEventListener(\u0026#34;mousemove\u0026#34;, myfun) } \u0026lt;/script\u0026gt; 您的浏览器不支持播放该视频！\n3.利用事件的捕获和冒泡做点事情 addEventListener()和removeEventListener()其实拥有三个参数，刚才说过了，第一个表示触发条件，第二个表示触发事件，第三个参数正常情况下可以省略，但是要知道它代表的意思\n用布尔值来表示，true或者false，默认是false\n true表示在捕获阶段调用事件处理程序 false表示在冒泡阶段调用事件处理程序  根据图片可以看出，捕获阶段要先于冒泡阶段，因此，true事件要先于flase事件触发，多个true事件按顺序触发，多个false事件，写在后面的先触发\n 结论：写在前面的true事件 \u0026gt; 写在后面的true事件 \u0026gt; 写在后面的false事件 \u0026gt; 写在前面的false事件\n 因此，利用这个参数，可以控制同一个元素的不同事件触发的顺序\n\u0026lt;div id=\u0026#34;out\u0026#34;\u0026gt; \u0026lt;p\u0026gt;最外面\u0026lt;/p\u0026gt; \u0026lt;div id=\u0026#34;middle\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;inner\u0026#34;\u0026gt;最里面\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 第一种情况 --\u0026gt; \u0026lt;script\u0026gt; var out = document.getElementById(\u0026#39;out\u0026#39;); var middle = document.getElementById(\u0026#39;middle\u0026#39;); var inner = document.getElementById(\u0026#39;inner\u0026#39;); //点击inner时，触发顺序为：inner-------middle------out  out.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是最外面的\u0026#34;);},false); middle.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是中间的\u0026#34;);},false); inner.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是最里面的\u0026#34;);},false); \u0026lt;/script\u0026gt; \u0026lt;!-- 第二种情况 --\u0026gt; \u0026lt;script\u0026gt; var out = document.getElementById(\u0026#39;out\u0026#39;); var middle = document.getElementById(\u0026#39;middle\u0026#39;); var inner = document.getElementById(\u0026#39;inner\u0026#39;); //点击inner时，触发顺序为：out------middle-------inner  out.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是最外面的\u0026#34;);},true); middle.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是中间的\u0026#34;);},true); inner.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是最里面的\u0026#34;);},true); \u0026lt;/script\u0026gt; \u0026lt;!-- 第三种情况 --\u0026gt; \u0026lt;script\u0026gt; var out = document.getElementById(\u0026#39;out\u0026#39;); var middle = document.getElementById(\u0026#39;middle\u0026#39;); var inner = document.getElementById(\u0026#39;inner\u0026#39;); //点击inner时，触发顺序为：out------inner-------middle  out.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是最外面的\u0026#34;);},true); middle.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是中间的\u0026#34;);},false); inner.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是最里面的\u0026#34;);},false); \u0026lt;/script\u0026gt; \u0026lt;!-- 第四种情况 --\u0026gt; \u0026lt;script\u0026gt; var out = document.getElementById(\u0026#39;out\u0026#39;); var middle = document.getElementById(\u0026#39;middle\u0026#39;); var inner = document.getElementById(\u0026#39;inner\u0026#39;); //点击inner时，触发顺序为：out-------middle------inner  out.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是最外面的\u0026#34;);},true); middle.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是中间的\u0026#34;);},true); inner.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是最里面的\u0026#34;);},false); \u0026lt;/script\u0026gt; \u0026lt;!-- 第五种情况 --\u0026gt; \u0026lt;script\u0026gt; var out = document.getElementById(\u0026#39;out\u0026#39;); var middle = document.getElementById(\u0026#39;middle\u0026#39;); var inner = document.getElementById(\u0026#39;inner\u0026#39;); //点击inner时，触发顺序为：middle-------inner------out  out.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是最外面的\u0026#34;);},false); middle.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是中间的\u0026#34;);},true); inner.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是最里面的\u0026#34;);},false); \u0026lt;/script\u0026gt; \u0026lt;!-- 第六种情况 --\u0026gt; \u0026lt;script\u0026gt; var out = document.getElementById(\u0026#39;out\u0026#39;); var middle = document.getElementById(\u0026#39;middle\u0026#39;); var inner = document.getElementById(\u0026#39;inner\u0026#39;); //点击inner时，触发顺序为：out-------inner------middle  out.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是最外面的\u0026#34;);},true); middle.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是中间的\u0026#34;);},false); inner.addEventListener(\u0026#39;click\u0026#39;,function(){alert(\u0026#34;我是最里面的\u0026#34;);},true); \u0026lt;/script\u0026gt; 4.事件处理程序  HTML事件处理程序  \u0026lt;button onclick=\u0026#34;test()\u0026#34;\u0026gt;测试\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; function test() { alert(\u0026#34;HTML事件处理程序\u0026#34;); } \u0026lt;/script\u0026gt;  1.优点：事件处理程序中的代码，能够访问全局作用域中的任何变量 2.缺点：时差问题、扩展的作用域链在不同浏览器中会导致不同结果、html代码与js代码高度耦合\n DOM0级事件处理程序  \u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;测试\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; var btn = document.getElementById(\u0026#34;btn\u0026#34;); btn.onclick = function test() { alert(\u0026#34;DOM0级事件处理程序\u0026#34;); } \u0026lt;/script\u0026gt;  1.优点：代码简单，浏览器兼容性好，解决了html代码和js代码的高度耦合问题 2.缺点：一个元素只能绑定一个事件处理函数，只会在事件冒泡中运行\n DOM2级事件处理程序  该级别的事件处理程序，运用的就是事件捕获和冒泡机制\n\u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;测试\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; var btn = document.getElementById(\u0026#34;btn\u0026#34;); // 事件监听  btn.addEventListener(\u0026#34;click\u0026#34;, function() { alert(\u0026#34;DOM2级事件处理程序，我在捕获阶段执行\u0026#34;); }, true); btn.addEventListener(\u0026#34;click\u0026#34;, function() { alert(\u0026#34;DOM2级事件处理程序，我在冒泡阶段执行\u0026#34;); }, false); // 移除事件监听  var fun = function() { alert(\u0026#34;我要被移除了\u0026#34;); } btn.addEventListener(\u0026#34;click\u0026#34;, fun, false); btn.removeEventListener(\u0026#34;click\u0026#34;, fun, false); \u0026lt;/script\u0026gt;  1.优点：同时支持事件处理的捕获和冒泡阶段，并且一个元素可以绑定多个处理函数 2.缺点：IE不支持\n ","date":"2020-11-17T13:00:00Z","permalink":"https://imzsh.com/posts/20201117/","section":"posts","tags":["js","笔记"],"title":"事件监听函数，以及事件的捕获和冒泡机制"},{"categories":["编程技术"],"contents":"querySelector和querySelectorAll的用法和getElementBy大致一样，获取的时候带上符号，getElementBy获取的是元素的动态集合，querySelector获取的是元素的静态集合。\n但是需要注意：getElementBy系列和querySelector系列的区别\n比如，我们写一个for循环，每次获取li标签的时候，ul生成一个li子元素\n\u0026lt;ul id=\u0026#34;ul\u0026#34;\u0026gt; \u0026lt;li\u0026gt;a\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;b\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;c\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;script\u0026gt; var ul = document.getElementById(\u0026#39;ul\u0026#39;); var li = document.getElementsByTagName(\u0026#39;li\u0026#39;); for(var i = 0;i \u0026lt; li.length; i++) { ul.appendChild(document.createElement(\u0026#39;li\u0026#39;)) }; console.log(li.length); // 陷入死循环 \u0026lt;/script\u0026gt; 用i \u0026lt; li.length来进行判断时，会导致浏览器死循环，因为循环一次的时候，浏览器又重新获取li标签数组，每调用一次就会重新对文档进行查询，就会进入死循环\n进行修改：把i \u0026lt; li.length改成i \u0026lt; 3，把li标签数组静态化，然后打印\nconosle.log(li.length) // 6 重新用querySelector获取一遍元素\n\u0026lt;ul id=\u0026#34;ul\u0026#34;\u0026gt; \u0026lt;li\u0026gt;a\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;b\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;c\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;script\u0026gt; var ul = document.querySelector(\u0026#39;ul\u0026#39;); var li = document.querySelectorAll(\u0026#39;li\u0026#39;); for(var i = 0;i\u0026lt;li.length;i++) { ul.appendChild(document.createElement(\u0026#39;li\u0026#39;)) }; console.log(li.length); // 输出对结果是原来的li.length = 3，而不是增加后的 6 \u0026lt;/script\u0026gt; 静态集合体现在querySelectorAll('li')获取到ul里所有li后，不管后续再动态添加了多少li，都是不会对其参数影响\n","date":"2020-11-16T12:59:00Z","permalink":"https://imzsh.com/posts/20201116/","section":"posts","tags":["笔记"],"title":"getElementBy系列和querySelector系列的区别"},{"categories":["编程技术"],"contents":"DOM中文名文档对象模型，英文名Document Object Model，我们简称为DOM，是针对html和xml文档的一种API，将html以一种树状结构呈现出来，可以更直观去研究文档结构，我们将这种树状文档结构称为－－DOM树，或者节点树，一样的概念\n一、什么是DOM？ DOM中文名文档对象模型，英文名Document Object Model，我们简称为DOM，是针对html和xml文档的一种API，将html以一种树状结构呈现出来，可以更直观去研究文档结构，我们将这种树状文档结构称为－－DOM树，或者节点树，一样的概念\njs通过dom节点，可以对文档的html标签，属性，css样式，以及具体的内容做出修改，并对页面中的所有事件进行响应\n二、节点树 1.节点类型  文档节点－－Document 标签节点－－Element 文本节点－－Text 注释节点－－Comment 属性节点－－Attr  2. 属性  节点类型－－nodeType 节点名称－－nodeName 节点值－－nodeValue 子节点－－childNodes 父节点－－parentNodes 上一个节点－－previousSibling 下一个节点－－nextSibling 第一个子节点－－firstChild 最后一个子节点－－lastChild  3.文档节点－－document (1) 获取  getElementById()－－通过id获取元素  \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt;通过id获取元素\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;); demo.onclick = function() { console.log(\u0026#39;通过id获取元素\u0026#39;) } \u0026lt;/script\u0026gt; \u0026lt;!-- 点击id为demo的元素，控制台输出\u0026#39;通过id获取元素\u0026#39; --\u0026gt; getElementsByName()－－通过name获取元素  \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;int\u0026#34; value=\u0026#34;通过name获取元素1\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;int\u0026#34; value=\u0026#34;通过name获取元素2\u0026#34;\u0026gt; \u0026lt;script\u0026gt; var int = document.getElementsByName(\u0026#39;int\u0026#39;); for(var i = 0;i \u0026lt; int.length; i++) { console.log(int[i].value); } \u0026lt;/script\u0026gt; \u0026lt;!-- 控制台输出name为int的元素的value值 --\u0026gt; getElementsByTagName()－－通过标签名获取元素  \u0026lt;div\u0026gt;通过标签名获取元素1\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;通过标签名获取元素2\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var div = document.getElementsByTagName(\u0026#39;div\u0026#39;); for(var i = 0;i \u0026lt; div.length; i++) { console.log(div[i].innerHTML) } \u0026lt;/script\u0026gt; \u0026lt;!-- 控制台输出标签名为div的元素的文本内容 --\u0026gt; getElementsByClassName()－－通过class获取元素  \u0026lt;div class=\u0026#34;demo\u0026#34;\u0026gt;通过class获取元素1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;demo\u0026#34;\u0026gt;通过class获取元素2\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementsByClassName(\u0026#39;demo\u0026#39;); for(var i = 0;i \u0026lt; demo.length; i++) { console.log(demo[i].innerHTML) } \u0026lt;/script\u0026gt; \u0026lt;!-- 控制台输出class为demo的元素的文本内容 --\u0026gt; querySelector()－－通过选择器获取元素  querySelector()括号里面要跟上符号，class就写.，id就写#，标签直接写标签名TagName\n\u0026lt;div\u0026gt;通过选择器获取标签名\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;div\u0026#34;\u0026gt;通过选择器获取class\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;div\u0026#34;\u0026gt;通过选择器获取id\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var divtag = document.querySelector(\u0026#39;div\u0026#39;); var divclass = document.querySelector(\u0026#39;.div\u0026#39;); var divid = document.querySelector(\u0026#39;#div\u0026#39;); divtag.onclick = function() { console.log(\u0026#39;通过选择器获取标签名\u0026#39;) }; // 点击标签div，控制台输出\u0026#34;通过选择器获取标签名\u0026#34;  divclass.onclick = function() { console.log(\u0026#39;通过选择器获取class\u0026#39;) }; // 点击class为div，控制台输出\u0026#34;通过选择器获取class\u0026#34;  divid.onclick = function() { console.log(\u0026#39;通过选择器获取id\u0026#39;) }; // 点击id为div，控制台输出\u0026#34;通过选择器获取id\u0026#34; \u0026lt;/script\u0026gt; querySelectorAll()－－通过选择器获取元素集合  获取的是一个数组集合\n\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;int1\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;int2\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;int3\u0026#34;\u0026gt; \u0026lt;script\u0026gt; var int = document.querySelectorAll(\u0026#39;input\u0026#39;) for(i = 0; i \u0026lt; int.length; i++) { console.log(int[i].value) } \u0026lt;/script\u0026gt; \u0026lt;!-- 浏览器依次打印出`int1`,`int2`,`int3` --\u0026gt; (2) 创建  createElement()－－创建元素（标签）节点  \u0026lt;ul id=\u0026#34;ul\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;script\u0026gt; var ul = document.getElementById(\u0026#39;ul\u0026#39;); ul.appendChild(document.createElement(\u0026#39;li\u0026#39;)) \u0026lt;/script\u0026gt; 可以看到，ul下面已经生成了一个li标签\ncreateTextNode()－－创建文本节点  \u0026lt;ul id=\u0026#34;ul\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;script\u0026gt; var ul = document.getElementById(\u0026#39;ul\u0026#39;); var li = ul.appendChild(document.createElement(\u0026#39;li\u0026#39;)); var node = document.createTextNode(\u0026#39;我是li\u0026#39;); li.appendChild(node); \u0026lt;/script\u0026gt; li标签中生成了一段文本\ncreateAttribute()－－创建属性节点  \u0026lt;input type=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;script\u0026gt; var int = document.getElementsByTagName(\u0026#39;input\u0026#39;)[0]; var value = document.createAttribute(\u0026#39;value\u0026#39;); value.nodeValue = \u0026#39;通过创建属性节点生成\u0026#39;; int.setAttributeNode(value); \u0026lt;/script\u0026gt; 可以看到value属性值被成功创建\ncreateComment()－－创建注释节点  \u0026lt;div id=\u0026#34;div\u0026#34;\u0026gt;创建一个注释节点\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var div = document.getElementById(\u0026#39;div\u0026#39;); var comment = document.createComment(\u0026#39;添加一个注释节点\u0026#39;); div.appendChild(comment); \u0026lt;/script\u0026gt; f12查看源码，可以看到div生成一行注释\ncreateDocumentFragment()－－创建文档片段  文档片段的作用，就相当于是添加的所有的节点的父元素\n 1.假如没有createDocumentFragment，添加了很多节点，也可以在dom上呈现，但是每次添加的时候都会调用一次appendChild()方法，产生很多次页面渲染，显得比较臃肿 2.把多次添加的节点放在一个createDocumentFragment节点里面，页面只会调用一次就可以把所有的节点都渲染了\n  createEvent()－－创建事件对象\n  addEventListener()－－添加事件监听函数\n  removeEventListener()－－移除事件监听函数\n  事件监听函数详解\ndispatchEvent()－－触发事件  操作css \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt;dom\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // 直接通过\u0026#39;.\u0026#39;来操作style  var demo= document.getElementById(\u0026#39;demo\u0026#39;); demo.style.color = \u0026#39;red\u0026#39;; // 通过setAttribute()来创建属性节点  demo.setAttribute(\u0026#39;style\u0026#39;,\u0026#39;background-color: green\u0026#39;); // 通过style的cssText属性  demo.style.cssText = \u0026#34;border: 10px solid black\u0026#34;; \u0026lt;/script\u0026gt; 4.元素节点(element对象) 有关innerHTML, innerText, outerHTML, outerText的区别\n一个是元素内容，一个是文本内容\n\u0026lt;div id=\u0026#34;div1\u0026#34;\u0026gt;第一个div\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;div2\u0026#34;\u0026gt;第二个div\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;div3\u0026#34;\u0026gt;第三个div\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;div4\u0026#34;\u0026gt;第四个div\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;div5\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;div6\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;div7\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;div8\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var div1 = document.getElementById(\u0026#39;div1\u0026#39;).innerHTML console.log(div1) // 第一个div  var div1 = document.getElementById(\u0026#39;div1\u0026#39;).outerHTML console.log(div1) // \u0026lt;div id=\u0026#34;div1\u0026#34;\u0026gt;第一个div\u0026lt;/div\u0026gt;  var div2 = document.getElementById(\u0026#39;div2\u0026#39;).innerText console.log(div2) // 第二个div  var div2 = document.getElementById(\u0026#39;div2\u0026#39;).outerText console.log(div2) // 第二个div  document.getElementById(\u0026#39;div5\u0026#39;).innerHTML = \u0026#39;\u0026lt;a\u0026gt;《第5个div》\u0026lt;/a\u0026gt;\u0026#39; // 在原有的标签内增加内容，如果有标签会被识别  document.getElementById(\u0026#39;div6\u0026#39;).outerHTML = \u0026#39;\u0026lt;a\u0026gt;《第6个div》\u0026lt;/a\u0026gt;\u0026#39; // 原来的标签会被覆盖，新的文本中如果含有标签会自动生成，如果没有标签则直接以文本形式展示  document.getElementById(\u0026#39;div7\u0026#39;).innerText = \u0026#39;\u0026lt;a\u0026gt;《第7个div》\u0026lt;/a\u0026gt;\u0026#39; // 在原有的标签内增加内容，新标签不会被识别为标签元素，而是被当作文本内容直接写入原标签内  document.getElementById(\u0026#39;div8\u0026#39;).outerText = \u0026#39;\u0026lt;a\u0026gt;《第8个div》\u0026lt;/a\u0026gt;\u0026#39; // 原来的标签会被覆盖，新标签不会被识别为标签元素，而是直接被当作文本形式展示 \u0026lt;/script\u0026gt; (1) 节点属性  childElementCount－－返回当前元素的子节点的个数  \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;a\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;) console.log(demo.childElementCount) // 4 \u0026lt;/script\u0026gt; firstElementChild－－返回当前元素的第一个子元素节点 lastElementChild－－返回当前元素的最后一个子元素节点  \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;a\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;) console.log(demo.firstElementChild) // \u0026lt;a\u0026gt;\u0026lt;/a\u0026gt;  console.log(demo.lastElementChild) // \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/script\u0026gt; nextElementSibling－－返回当前元素的下一个兄弟元素节点 previousElementSibling－－返回当前元素的上一个兄弟元素节点  \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;) console.log(demo.nextElementSibling) // \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;  console.log(demo.previousElementSibling) // \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/script\u0026gt; 返回当前元素所有的子节点  \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;a\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;).children for(var i in demo) { console.log(demo[i]) } \u0026lt;/script\u0026gt; 控制台查看返回结果\n返回所有子节点集合  \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;a id=\u0026#34;demo1\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;).children for(var i in demo1.childNodes) { console.log(demo[i]) } \u0026lt;/script\u0026gt; (2) 节点方法  appendChild－－插入子节点  \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;) var node = document.createTextNode(\u0026#39;插入一个子节点\u0026#39;) demo.appendChild(node) \u0026lt;/script\u0026gt; f12可以看到，div被插入了一个节点\ninsertBefore(a, b)－－在指定位置插入节点  参数a表示要插入的内容，b表示定位，在b节点之前插入a节点\n\u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;) var node = document.createTextNode(\u0026#39;插入一个子节点\u0026#39;) demo.appendChild(node) var hr = document.createElement(\u0026#39;hr\u0026#39;) demo.insertBefore(hr, node) \u0026lt;/script\u0026gt; 可以看到，原来的文本节点之前，被添加了一个新的元素节点\nreplaceChild(a, b)－－替换节点  用参数a替换参数b，a表示新节点，b表示旧节点\n\u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;) var node = document.createTextNode(\u0026#39;插入一个子节点\u0026#39;) demo.appendChild(node) var h3 = document.createElement(\u0026#39;h3\u0026#39;) var h3node = document.createTextNode(\u0026#39;title标题\u0026#39;) h3.appendChild(h3node) demo.replaceChild(h3, node) \u0026lt;/script\u0026gt; h3是新节点，node是旧节点，根据图片可以看到，b替换掉了a，成功上位\nremoveChild－－父节点删除子节点  \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;son\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;) var son = document.getElementById(\u0026#39;son\u0026#39;) demo.removeChild(son) \u0026lt;/script\u0026gt; f12可以看到，id为son的元素节点，通过demo.removeChild()已经被删除了\nremoveAttribute－－删除属性节点  \u0026lt;div id=\u0026#34;demo\u0026#34; class=\u0026#34;div\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;) demo.removeAttribute(\u0026#39;class\u0026#39;) \u0026lt;/script\u0026gt; class属性已经被删除了\n删除文本节点  \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt;文本\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;) demo.removeChild(demo.childNodes[0]) \u0026lt;/script\u0026gt; 通过demo.childNodesp[0]获取demo的第一个节点，即文本节点，然后removeChild它，就删除了\nisEqualNode－－判断两个元素是否相等 isSameNode－－判断两个元素是否相同   两者分别代表相等和相同\n (1) isEqualNode相等，指的是两个节点是否是同一类型，具有相等的属性（包括：nodeName, nodeValue\u0026hellip;等等），还有相等的attributes,childNodes（相等的位置包含相同的值） (2) isSameNode相同，指的是两个节点引用的是同一个对象\n\u0026lt;form action=\u0026#34;#\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;form action=\u0026#34;#\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;form action=\u0026#34;#\u0026#34; id=\u0026#34;o\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;form action=\u0026#34;#\u0026#34; id=\u0026#34;o\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; var forms = document.forms; var form1 = forms[0]; var form2 = forms[1]; var form3 = forms[2]; var form4 = forms[3]; var _form1 = document.querySelectorAll(\u0026#39;form\u0026#39;)[0]; console.log(form1.isSameNode(form1)) //true 两个节点引用的对象都是第一个form  console.log(form1.isSameNode(_form1)) //true 两个节点引用的对象都是第一个form  console.log(form1.isSameNode(form2)) //false 两个节点引用的不是一个对象  console.log(form1.isEqualNode(form2)) //true 两个节点具有完全等同属性  console.log(form1.isEqualNode(form3)) //false form1中无等同的id属性  console.log(form3.isEqualNode(form4)) //fasle form4的childNodes中的input为text类别，与form3不同 \u0026lt;/script\u0026gt; 根据例子代码可以看出区别：\n(1) isSameNode只有引用同一个对象时才相同，比如用两中方法调用同一个对象，再比较这两种方法，比来比去还是那个对象，所以相同 (2) 而isEqualNode比较两个对象的元素节点是否相等，只要两者一致就可以相等true\nhasChildNodes()－－判断一个元素是否拥有子节点  判断demo是否拥有子节点，然后输出他的子节点\n\u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;a\u0026gt;\u0026lt;/a\u0026gt; --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;) console.log(demo.hasChildNodes()) console.log(demo.childNodes) \u0026lt;/script\u0026gt; contains(a)－－判断一个节点是否包含指定子节点（参数a表示要判断的子节点）  存在id=\u0026quot;a\u0026quot;的元素，因此contains判断成功输出true，\n不存在id=\u0026quot;b\u0026quot;的元素，因此输出false\n\u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;a id=\u0026#34;a\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;a\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var demo = document.getElementById(\u0026#39;demo\u0026#39;) var a = document.getElementById(\u0026#39;a\u0026#39;) console.log(demo.contains(a)) // true  var b = document.getElementById(\u0026#39;b\u0026#39;) console.log(demo.contains(b)) // false \u0026lt;/script\u0026gt; 5.属性节点(Attr对象) \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;int\u0026#34;\u0026gt; \u0026lt;script\u0026gt; var int = document.getElementById(\u0026#39;int\u0026#39;) // 1.获取属性值  console.log(int.getAttribute(\u0026#34;type\u0026#34;)) // text  // 2.获取属性节点  console.log(int.getAttributeNode(\u0026#34;type\u0026#34;)) // type=\u0026#34;text\u0026#34;  // 3.设置属性值  int.setAttribute(\u0026#34;value\u0026#34;, \u0026#34;input框\u0026#34;) // \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;int\u0026#34; value=\u0026#34;input框\u0026#34;\u0026gt;  // 4.设置属性节点  let name = document.createAttribute(\u0026#34;name\u0026#34;); name.nodeValue = \u0026#34;uname\u0026#34;; int.setAttributeNode(name); console.log(int.getAttributeNode(\u0026#39;name\u0026#39;).value) // \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;int\u0026#34; value=\u0026#34;input框\u0026#34; name=\u0026#34;uname\u0026#34;\u0026gt;  // 5.删除属性节点  console.log(int.removeAttribute(\u0026#39;name\u0026#39;)) // \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;int\u0026#34; value=\u0026#34;input框\u0026#34;\u0026gt;  // 6.判断是否存在属性  console.log(int.hasAttributes()) // true  // 7.判断是否存在指定属性  console.log(int.hasAttribute(\u0026#39;value\u0026#39;)) // true \u0026lt;/script\u0026gt;  注意：hasAttribute和hasAttributes的区别 hasAttributes判断是否存在属性， hasAttribute判断是否存在指定属性\n ","date":"2020-11-15T12:58:00Z","permalink":"https://imzsh.com/posts/20201115/","section":"posts","tags":["笔记"],"title":"DOM－－文档对象模型"},{"categories":["编程技术"],"contents":"数据类型，构造函数，原型和原型链的一些讲解补充\n一、数据类型 1.5个基本类型 string number boolean undefined 未定义 null 值为空 symbol 表示一个符号，符号类型是唯一的并且是不可修改的\n最常见的还是前三种，字符串，数字，布尔值\n2.常见的引用类型 引用类型是一种数据结构，用于将数据和功能组织在一起\n对象－Object, 数组－Array, 函数－Function, 正则－RegExp, 日期－Date等\n二、函数 1.什么是函数？  具有独立功能的代码块，在js中使用function关键字定义函数 让代码结构更加清晰，提高代码可用性 js函数的分类：自定义函数和系统函数  2.自定义函数 有一种匿名函数，没有名字的函数，创建闭包，避免造成全局变量的污染\n匿名自执行函数\n 概念：匿名函数的定义完成后立即执行，执行函数表达式 作用：实现闭包和创建独立的命名空间 使用：分组操作符()，void操作符，~操作符，!操作符等等 使用场景：函数表达式，对象属性，事件，事件参数，返回值 定义完匿名函数后，一定要调用  // 函数表达式 window.onload = function() { let funcobj = function() { alert(\u0026#34;函数表达式中的匿名函数\u0026#34;) } funcobj(); } // 对象属性 window.onload = function() { let obj = { name: function() { alert(\u0026#39;对象属性中的匿名函数\u0026#39;) } } obj.name(); } 3.内置函数 放在全局下面叫做函数，放在对象里面被叫做方法，对象的方法\n 常规函数  alert() // 弹出框 confirm() // 弹出一个确认框 prompt() // 弹出一个输入框 isNaN() // 判断是否为数字 parseInt() // 将字符串或浮点数转换为整数 parseFloat() // 将字符串转换为整数或浮点数 eval() // 计算表达式的结果 数组函数  用for循环遍历数组\nvar arr = [1,2,3,4]; for(var i = 0; i\u0026lt;arr.length; i++) { console.log(arr[i]) } // 输出 1,2,3,4 通过for in遍历数组\nvar arr = [1,2,3,4]; for (var i in arr) { console.log(arr[i]); } // 输出 1,2,3,4 // 增加 unshift() // 添加元素在数组首部，返回值是数组长度 push() // 添加元素在数组尾部，返回值是数组长度 conat() // 连接两个数组，返回值是连接后的数组  var arr1 = [1]; var arr2 = [2]; let arr = arr1.concat(arr2); console.log(arr); // [1,2]  /*****************************************/ // 删除 pop() // 删除数组最后一个元素，返回值是删除的元素 shift() // 删除数组第一个元素，返回值是删除的元素 splice(a,b) // 删除指定位置a后的b个元素，返回值是删除的元素 slice(a,b) // 删除从a位置到b位置之间的元素  /*****************************************/ // 查找 indexOf() // 判断数组是否包含指定元素，存在返回元素，不存在返回-1 includes() // 判断数组是否包含指定元素，存在返回true，不存在返回false  /*****************************************/ // 其他 sort() // 将数组按照规则排序  var arr1 = [4,5,6]; var arr2 = [1,2,3]; var arrAscSort = arr5.sort((a, b) =\u0026gt; a-b); // 升序排序  console.log(arrAscSort); // [ 1, 1, 2, 3, 5, 6 ]  var arrDescSort = arr5.sort((a, b) =\u0026gt; b-a); // 降序排序  console.log(arrDescSort); // [ 6, 5, 3, 2, 1, 1 ]  reerse() // 数组反转  var arr = [1,2,3,4,5,6]; // 直接通过reverse()方法调用  console.log(arr.reverse()) // [6,5,4,3,2,1]  Array.from() // 将一串数据转换为数组形式  var str = \u0026#39;将一串数据转换为数组形式\u0026#39; console.log(Array.from(str)) // [\u0026#34;将\u0026#34;, \u0026#34;一\u0026#34;, \u0026#34;串\u0026#34;, \u0026#34;数\u0026#34;, \u0026#34;据\u0026#34;, \u0026#34;转\u0026#34;, \u0026#34;换\u0026#34;, \u0026#34;为\u0026#34;, \u0026#34;数\u0026#34;, \u0026#34;组\u0026#34;, \u0026#34;形\u0026#34;, \u0026#34;式\u0026#34;]  Array.isArray() // 判断一个变量是否为数组  var str = \u0026#39;将一串数据转换为数组形式\u0026#39; console.log(Array.isArray(str)) // false 日期函数 Date()  获取时间\nvar time = new Date() // 获取当前时间 // Fri Nov 13 2020 20:21:35 GMT+0800 (中国标准时间)  getFullYear() // 获取当前年份 getMonth() // 获取当月月份 -1 getDate() // 获取当天日期 getHours() // 获取当前小时 getMinutes() // 获取当前分钟 getSeconds() // 获取当前秒 getMilliseconds() // 获取当前毫秒 getTime() // 时间戳-获取1970年至今的毫秒数 设置时间\nsetYear() // 设置年份 setMonth() // 设置月份 setDate() // 设置日期 setHours() // 设置小时 setMinutes() // 设置分钟 setSeconds() // 设置秒 数学函数 Math  主要常用的数学函数方法\nMath.abs() // 绝对值 Math.ceil() // 向上取整 Math.floor()// 向下取整 Math.round()// 四舍五入 Math.random() // 生成0-1之间的随机数 random()的延伸用法－－－生成指定位的随机数\nfunction getRandomNumber(min, max){ return Math.floor(Math.random()*(max - min)) + min; } console.log(getRandomNumber(1000, 9999)); 字符串函数  indexOf() // 查找字符串，返回索引值  var arr = [\u0026#34;字\u0026#34;, \u0026#34;符\u0026#34;, \u0026#34;串\u0026#34;, \u0026#34;函\u0026#34;, \u0026#34;数\u0026#34;] console.log(arr.indexOf(\u0026#34;串\u0026#34;)) // 2  split() // 将字符串按照指定的分隔符分割开来  var str = \u0026#34;字符串函数\u0026#34; console.log(str.split(\u0026#39;\u0026#39;)) // [\u0026#34;字\u0026#34;, \u0026#34;符\u0026#34;, \u0026#34;串\u0026#34;, \u0026#34;函\u0026#34;, \u0026#34;数\u0026#34;]  trim() // 清除字符串两端的空格  var str = \u0026#34; 字符串函数 \u0026#34; console.log(str) // [ 字符串函数 ]  console.log(str.trim()) // [字符串函数]  match() // 按照制定规则查找值  var str = \u0026#34;字符串函数字符串函数\u0026#34; console.log(str.match(/字符串/)) // 字符串  document.write(str.match(/字符串/)) // 字符串  search() // 返回字符串  首次出现的位置 var str = \u0026#34;字符串函数字符串函数\u0026#34; console.log(str.search(\u0026#39;串\u0026#39;)) // 2  replace() // 替换指定的字符串  var str = \u0026#34;字符串函数字符串函数\u0026#34; console.log(str.replace(\u0026#39;字\u0026#39;,\u0026#39;函\u0026#39;)) // 函符串函数字符串函数  substring(a,b) // 从指定位置切割字符串，左闭右开  // 从索引a，截取到b  var str = \u0026#34;字符串函数字符串函数\u0026#34; console.log(str.substring(0,3)) // 字符串  substr(a,b) // 从指定位置切指定个字符  // 从索引a开始，截取b个字符  var str = \u0026#34;字符串函数字符串函数\u0026#34; console.log(str.substr(0,3)) // 字符串 ","date":"2020-11-14T12:57:00Z","permalink":"https://imzsh.com/posts/20201114/","section":"posts","tags":["js","笔记"],"title":"有关js函数，方法的一些补充总结"},{"categories":["编程技术"],"contents":"今天在写new Date()时候，无意中发现了一个很有意思的方法，getTime()，百度了一下，有人说是计算从1970年1月1日至今的毫秒数\n 为什么要是1970年呢？\n new Date().getTime(); // xxxxxxxxxxx 这个起源于unix的诞生，因为Unix在1969年被开发出来，1971年正式发布，在这之前没有机器会需要来表示1970-01-01-00:00:00之前的时间，后面的语言很多就沿用了这一习惯，js只是也沿用了这种习惯而已。\n当然，这一做法现在看来是很有问题的，例如不方便用它表示更早的时间而且精度有限。\n定义time从1970年1月1日开始，忽然想到在JAVA里，Oracle数据库时间也是从1970年1月1日开始计算。\n比如java类代码:\nDate date = new Date(0); System.out.println(date); // 打印出来的结果：Thu Jan 01 08:00:00 CST 1970也 是1970年1月1日，实际上时分秒是0点0分0秒(这里打印出来是8点，稍后会作解释)。\n为什么这个时间会定义在1970年1月1日这个时候呢?\n于是开始了Google，中文网页根本找不到答案。于是试着搜索英文关键字,在Sun java论坛总算找到准确的帖子:\nhttp://forums.sun.com/thread.jspa?threadID=595140\u0026amp;start=15\n其中有一个回复:\nI suspect that Java was born and raised on a UNIX system. UNIX considers the epoch (when did time begin) to be midnight, January 1, 1970. 是说java起源于UNIX系统，而UNIX认为1970年1月1日0点是时间纪元.\n但这依然没很好的解释\u0026quot;为什么\u0026quot;,出于好奇，继续Google，总算找到了答案:\nhttp://en.wikipedia.org/wiki/Unix_time\n这里的解释是:\n最初计算机操作系统是32位，而时间也是用32位表示。\nSystem.out.println(Integer.MAX_VALUE);\n2147483647\nInteger在JAVA内用32位表示，因此32位能表示的最大值是2147483647。另外1年365天的总秒数是31536000，2147483647/31536000 = 68.1,也就是说32位能表示的最长时间是68年，而实际上到2038年01月19日03时14分07秒，便会到达最大时间，过了这个时间点，所有32位操作系统时间便会变为10000000 00000000 00000000 00000000也就是1901年12月13日20时45分52秒，这样便会出现时间回归的现象，很多软件便会运行异常了。\n到这里，我想问题的答案已经出来了:\n因为用32位来表示时间的最大间隔是68年，而最早出现的UNIX操作系统考虑到计算机产生的年代和应用的时限综合取了1970年1月1日作为UNIX TIME的纪元时间(开始时间)，而java自然也遵循了这一约束。\n至于时间回归的现象相信随着64为操作系统的产生逐渐得到解决，因为用64位操作系统可以表示到292,277,026,596年12月4日15时30分08秒，相信我们的N代子孙，哪怕地球毁灭那天都不用愁不够用了，因为这个时间已经是千亿年以后了。\n最后一个问题:\n上面System.out.println(new Date(0))，打印出来的时间是8点而非0点，原因是存在系统时间和本地时间的问题，其实系统时间依然是0点，只不过我的电脑时区设置为东8区，故打印的结果是8点。\n","date":"2020-11-13T12:56:00Z","permalink":"https://imzsh.com/posts/20201113/","section":"posts","tags":["杂谈"],"title":"为什么getTime()返回1970年至今的毫秒？"},{"categories":["编程技术"],"contents":"面向对象把构成问题的transaction分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为，意在写出通用代码，加强代码重用，屏蔽差异性。\n一、什么是面向对象编程 js是基于原型的，基于面向对象编程\n面向对象就是把数据和对数据的操作方法放在一起，作为一个整体——对象。对同类对象抽象出其共性，形成类\n1.面向过程程序设计 将一个项目（或者一个事件）从头到尾按顺序，一步一步完成，先做什么，后做什么，一直到结束，也是我们人做事的方法。\n自上而下，先确定一个整体的框架，然后添砖加瓦，逐步实现想要得到的效果，适用于简单的系统，容易理解。但是难以应对复杂的系统，不易维护扩展，难以复用\n面向过程是分析解决问题的步骤，然后用函数把这些步骤一步一步的实现，然后在使用的时候一一调用则可。强调的是完成这件事儿的动作，更接近我们日常处理事情的思维。\n2.面向对象程序设计 将一个项目（或者一个事件）分成更小的项目，每一个部分负责一方面的功能，最后由这些部分组成一个整体，先设计组件，在完成拼装，适用于大型复杂的系统\n面向对象把构成问题的transaction分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为，意在写出通用代码，加强代码重用，屏蔽差异性。\n想要弄明白面向对象，需要先理解类和对象的概念\n《什么是类和对象？》\n二、创建对象的方法 1.创建字面量和实例 window.onload = function() { // 实例  var person = new Object(); person.name = \u0026#39;小明\u0026#39;; person.age = 22; person.year = function() { console.log(this.name + \u0026#39;今年\u0026#39; + this.age + \u0026#39;岁了！\u0026#39;) }; person.year(); // 字面量  var student = { name: \u0026#39;小明\u0026#39;, age: 22, year: function () { console.log(this.name + \u0026#39;今年\u0026#39; + this.age + \u0026#39;岁了！\u0026#39;) } } student.year(); } // 小明今年22岁了！ 两者输出的结果是一样的，控制台输出：  缺点：重复实例化对象，代码冗余高\n 2.工厂模式 window.onload = function() { function createObj(name, age) { var obj = new Object(); obj.name = name, obj.age = age, obj.year = function() { console.log(this.name + \u0026#39;今年\u0026#39; + this.age + \u0026#39;岁了！\u0026#39;) } return obj; } var obj = createObj(\u0026#39;小明\u0026#39;, 22); obj.year(); } // 小明今年22岁了！  优点：解决重复实例化对象的问题 缺点：无法识别对象的类型，因为所有的实例都指向一个原型\n 3.构造函数 window.onload = function() { function Person(name, age) { this.name = name; this.age = age; this.year = function() { console.log(this.name + \u0026#39;今年\u0026#39; + this.age + \u0026#39;岁了！\u0026#39;) } } var student = new Person(\u0026#39;小明\u0026#39;, 22); student.year(); } // 小明今年22岁了！  优点：可以识别对象的类型 缺点：多个实例重复创建方法，无法共享\n 4. 原型模式 window.onload = function() { function Par() {} Par.prototype = { constructor: \u0026#39;Par\u0026#39;, name: \u0026#39;小明\u0026#39;, age: 22, year: function() { console.log(this.name + \u0026#39;今年\u0026#39; + this.age + \u0026#39;岁了！\u0026#39;) } }; var son = new Par(); son.year(); } // 小明今年22岁了！  缺点：所有实例共享他的属性和方法，不能传参和初始化属性值\n 5.混合模式(推荐使用) 是构造函数和原型模式混合的写法，拥有各自的优点，构造函数共享实例属性，原型模式共享方法和想要共享的属性，可以传参和初始化属性值\n先用构造函数定义对象的属性方法，然后用原型模式创建方法，使用的属性通过prototype获取，有一个constructor属性，可以指向要操作的函数对象（构造函数）\n比如constructor: Par，就代表下面这个原型方法指向Par()对象（构造函数）\nwindow.onload = function() { function Par(name, age) { this.name = name; this.age = age; } Par.prototype = { constructor: Par, year: function() { console.log(this.name + \u0026#39;今年\u0026#39; + this.age + \u0026#39;岁了！\u0026#39;); } }; var son = new Par(\u0026#39;小明\u0026#39;, 22) son.year(); } // 小明今年22岁了！ 三、原型，原型链 1.原型对象  函数对象都具有prototype属性，它指向函数的原型对象(浏览器内存创建的对象)，原型对象都具有constructor属性，它指向prototype属性所在的函数对象(构造函数)  window.onload = function() { function Par(name, age) { this.name = name; this.age = age; } Par.prototype = { // constructor指向对象  constructor: Par, year: function() { console.log(this.name + \u0026#39;今年\u0026#39; + this.age + \u0026#39;岁了！\u0026#39;); } }; var son = new Par(\u0026#39;小明\u0026#39;, 22) son.year(); /*********************************************/ console.log(Par.prototype) console.log(Par.prototype.constructor) /*********************************************/ } 通过控制台可以看到\n构造函数的prototypr属性指向原型对象\n原型对象的construcyor属性指向构造函数\n当调用构造函数创建一个实例后，该实例会有一个隐藏属性__proto__ ，它指向构造函数的原型对象  console.log(son.__proto__ === Par.prototype) // true 所有的构造函数的prototype都是object类型  console.log(typeof Par.prototype) // object Function的prototype是一个空函数，所有内置函数的__proto__属性都指向这个空函数  console.log(Math.__proto__) 如果构造函数实例和原型对象中同时定义了一个属性，在调用时，会屏蔽原型对象中的属性，如果想要访问原型对象中的属性值，需要通过delete方法将同名属性在实例（构造函数）中彻底删除  window.onload = function () { function Par(name) { this.name = name; } Par.prototype.name = \u0026#34;张三\u0026#34;; var son = new Par(\u0026#34;李四\u0026#34;); console.log(son.name); // 李四  console.log(son.__proto__.name); // 张三  // 使用delete删除实例的同名属性值  console.log(delete son.name); // true  console.log(son.name); // 张三 } 通过hasOwnProperty(属性名)可以判断一个属性存在于构造函数中，还是原型对象中   true表示存在构造函数中；false表示存在原型对象中\n console.log(Par.hasOwnProperty(name)); // false 操作符in，可以判断一个属性是否存在（存在于构造函数和原型对象中皆可）  window.onload = function () { function Par(name, age) { this.name = name; this.age = age; } Par.prototype = { constructor: Par, year: function() { console.log(this.name + this.age) } }; var son = new Par(\u0026#39;xm\u0026#39;, \u0026#39;22\u0026#39;) son.year(); console.log(\u0026#39;name\u0026#39; in Par); // true  console.log(\u0026#39;age\u0026#39; in Par); // false } 同样的两个属性，判断其是否存在于实例或者原型对象中，输出的结果不一样\n 参考:《对象中是否有某一个属性 in》https://www.cnblogs.com/IwishIcould/p/12333739.html\n 2.__proto__和prototype的区别   prototype属性只有函数对象上才有，而__proto__属性所有对象都有\n  prototype是由函数对象指向原型对象，而__proto__是由实例指向函数对象的原型对象\n  原型链，将父类型的实例作为子类型的原型对象，这种链式关系叫做原型链\n  3.继承  原型链继承   优点：父类原型定义的属性和方法可以复用 缺点：子类实例没有自己的属性，不能向父类传递参数\n function test1() { function SuperType() { this.city = [ \u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;天津\u0026#34; ]; this.property = true; } SuperType.prototype = { constructor : SuperType, // 保持构造函数和原型对象的完整性  age : 15, getSuperValue : function() { return this.property; } }; function SonType() { this.property = false; } // 重写子类的原型指向父类的实例：继承父类的原型  SubType.prototype = new SuperType(); SubType.prototype = { constructor : SubType, getSonType : function() { return this.property; } }; // 优点验证  let son = new SubType(); console.log(son.age); // 15  console.log(son.getSuperValue()); // false  // 缺点验证  let instance1 = new SubType(); instance1.city.push(\u0026#34;重庆\u0026#34;); console.log(instance1.city); // [\u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;天津\u0026#34;, \u0026#34;重庆\u0026#34;]  let instance2 = new SubType(); console.log(instance2.city); // [\u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;天津\u0026#34;, \u0026#34;重庆\u0026#34;]  } // test1(); 构造函数继承   优点：子类实例有自己的属性，可以向父类传递参数，解决原型链继承的缺点 缺点：父类原型的属性和方法不可复用\n function test2() { function SuperType(name) { this.name = name; this.city = [ \u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;天津\u0026#34; ] } SuperType.prototype = { constructor : SuperType, age : 18, showInfo : function() { return this.name; } }; function SubType() { // 父类调用call()或者apply()方法和子类共用同一个this，实现子类实例属性的继承  SuperType.call(this, \u0026#34;张三\u0026#34;); } // 优点验证  let instance = new SubType(); instance.city.push(\u0026#34;重庆\u0026#34;); console.log(instance.city); // [\u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;天津\u0026#34;, \u0026#34;重庆\u0026#34;]  let instance1 = new SubType(); console.log(instance1.city); // [\u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;天津\u0026#34;]  // 缺点验证  console.log(instance.age); // undefined  instance.showInfo(); // son.showInfo is not a function } // test2(); 组合继承（推荐）   优点：原型的属性和方法可以复用，每个子类实例都有自己的属性 缺点：父类构造函数调用了两次，子类原型中的父类实例属性被子类实例覆盖\n function test3() { function SuperType(name) { this.name = name; this.city = [ \u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;天津\u0026#34; ] } SuperType.prototype = { constructor : SuperType, showInfo : function() { console.log(this.name + \u0026#34;今年\u0026#34; + this.age + \u0026#34;岁了\u0026#34;); } }; function SubType(name, age) { // 1. 通过构造方法继承实现实例属性的继承  SuperType.call(this, name); this.age = age; } // 2. 通过原型链继承实现原型方法的继承  SubType.prototype = new SuperType(); // 优点验证  let instance = new SubType(\u0026#34;张三\u0026#34;, 15); instance.showInfo(); // 张三今年15岁了  let instance1 = new SubType(); instance1.city.push(\u0026#34;重庆\u0026#34;); console.log(instance1.city); // [\u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;天津\u0026#34;, \u0026#34;重庆\u0026#34;]  let instance2 = new SubType(); console.log(instance2.city); // [\u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;天津\u0026#34;]  } // test3(); 寄生组合继承（推荐）   优点：解决了组合继承的缺点，效率高 缺点：基本没有\n function test4() { function inheritPrototype(subType, superType) { // 1. 继承父类的原型  var prototype = Object.create(superType.prototype); // 2. 重写被污染的construct  prototype.constructor = subType; // 3. 重写子类的原型  subType.prototype = prototype; } function SuperType(name) { this.name = name; this.city = [ \u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;天津\u0026#34; ]; } SuperType.prototype.sayName = function() { console.log(this.name); }; function SubType(name, age) { SuperType.call(this, name); this.age = age; } // 将父类原型指向子类  inheritPrototype(SubType, SuperType); SubType.prototype.sayAge = function() { console.log(this.age); } // 优点验证  let instance = new SubType(\u0026#34;张三\u0026#34;, 15); instance.sayName(); // 张三  let instance1 = new SubType(); instance1.city.push(\u0026#34;重庆\u0026#34;); console.log(instance1.city); // [\u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;天津\u0026#34;, \u0026#34;重庆\u0026#34;]  let instance2 = new SubType(); console.log(instance2.city); // [\u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;天津\u0026#34;] } // test4(); 4.ES6新方法－－class 新的关键字class在es6开始被引入到javascript中来，class的目的就是让定义类更简单\n用函数方法实现：\nfunction Person(name) { this.name = name; } Person.prototype.hello = function () { console.log(\u0026#39;Hello, \u0026#39; + this.name + \u0026#39;!\u0026#39;); } var son = new Person(\u0026#39;xm\u0026#39;) son.hello(); // Hello, xm! 用class来实现：\nclass Person { constructor(name) { this.name = name; } hello() { console.log(\u0026#39;Hello, \u0026#39; + this.name + \u0026#39;!\u0026#39;); } } var son = new person(\u0026#39;xm\u0026#39;) son.hello(); // Hello, xm! 可以在看到，在定义class中，直接包含了构造函数constructor属性，和原型对象上的函数hello()方法，省略掉了function关键字\n需要注意：原来的写法是，构造函数和原型对象分散开来写，现在用class可以直接把两者串在一个对象中，只有最后传参和调用方法时写法是一样的\nclass继承\n用class定义对象的另一个巨大的好处是继承更方便了。想一想我们从Person派生一个PrimaryPerson需要编写的代码量。现在，原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过extends来实现：\nclass PrimaryPerson extends Person { constructor(name, grade) { super(name); // 记得用super调用父类的构造方法!  this.grade = grade; } myGrade() { alert(\u0026#39;I am at grade \u0026#39; + this.grade); } } 注意PrimaryPerson的定义也是通过class关键字实现的，而extends则表示原型链对象来自Person，子类的构造函数可能会和父类的不太相同\n例如，PrimaryPerson需要name和grade两个参数，并且需要通过super(name)来调用父类的构造函数，否则父类的name属性无法正常初始化。\nPrimaryPerson已经自动获得了父类Person的hello方法，我们又在子类中定义了新的myGrade方法。\nES6引入的class和原有的JavaScript原型继承有什么区别呢？\n实际上它们没有任何区别，class的作用就是让JavaScript引擎去实现原来需要我们自己编写的原型链代码。简而言之，用class的好处就是极大地简化了原型链代码。\n但是！\n目前并不是所有的浏览器都支持class，所以在选择的时候一定要慎重！\n","date":"2020-11-12T12:58:00Z","permalink":"https://imzsh.com/posts/20201112/","section":"posts","tags":["js","编程"],"title":"面向对象编程"},{"categories":["生活随笔"],"contents":"厨房日记，记录我的\u0026rsquo;高光\u0026rsquo;时刻\n今日菜谱\n莴笋炒肉 准备食材：两根莴笋，一块猪肉，两只青椒\n调料：盐，酱油，醋，油，料酒，姜，蒜\n 炒菜前10分钟将猪肉从冰箱取出，放进碗中，用水浸解冻 将莴笋削皮洗净，用刀切成片状 将浸泡解冻好的猪肉取出，切成肉丁 切少许姜和蒜 准备好两根干辣椒 往锅中倒入一勺油，待至烧熟后，将姜和蒜倒入翻炒 将猪肉倒入锅中大火爆炒，并倒入少许料酒和酱油 一到两分钟过后，将莴笋倒入锅中，并添至少许清水防止太干 翻炒时倒入少许醋，盐，并放入干辣椒， 翻炒防止糊锅，静置等待菜熟  没有很复杂的过程，只是细心就可以做出让自己感受舒心的菜\n （更新2020.11.10）\n萝卜炖牛肉 准备食材：一根萝卜，四根胡萝卜，一大块牛肉，一卷粉丝\n调料：盐，酱油，醋，油，料酒，姜，蒜，胡椒，八角\n 将牛肉从冰箱取出，切成两块，取一碗清水，然后放在水中化冻 牛肉解冻十分钟左右取出，均匀切碎，根据自己口感可随意 切半块姜，半个蒜，起锅烧油，下葱姜蒜，   暂时没有小葱，等下次有了在下\n 加入三四片干辣椒，少许胡椒，八角， 等到锅中调料榨出香味，下牛肉，翻炒均匀防止糊锅 倒入料酒，酱油 在翻炒的过程中，用炖锅烧半锅清水，2-3分钟后，将烧锅内牛肉、配料全部倒入炖锅，用勺子翻滚均匀 用盖子盖住 将萝卜切成片，稍微有点厚度的那种，不薄也不厚，6-7分钟左右，下萝卜，并加入适当的盐 下稍加翻滚，盖住盖子，留一个缝隙 在这个期间洗净胡萝卜，去皮，切成块，等到烧锅20分钟左右，下胡萝卜和粉丝   为什么要这么晚才下胡萝卜和粉丝呢？ 因为他俩比较软，熟得快，如果放在锅中时间过长，很容易煮烂\n 继续煮至30分钟左右，煮的差不多了，尝一下咸淡，可适当加入调料 放一会就可以出锅啦  这是一道耗时比较长的菜，可以慢慢做，大致是这些流程，具体的可根据实际情况调整，比如加入的配菜不同\n ","date":"2020-11-09T21:13:00Z","permalink":"https://imzsh.com/posts/20201109/","section":"posts","tags":["厨房"],"title":"小张厨房日记（更新中...）"},{"categories":["编程技术"],"contents":"当代码出现有规律的重复之后，可以利用函数，定义变量，调用方法，不用去重复的改动代码，只需要进行函数的修改。基本上所有的高级语言都支持函数，javascript也不例外，它可以像变量一样被使用，方便且强大，因此本文对js函数进行系统的学习，并在学习过程中做了详细的笔记以及样例。\n一、函数的定义和调用 1.定义函数 function abs(x) { if(x = 0) { return x; } else { return -x; } }  function()指出这是一个函数定义 abs是函数的代码 (x)里面的内容是函数的参数 {...}的内容是函数体，可以包括若干语句，甚至可以没有任何语句   函数体中，必须以return结尾，才可以把结果返回，如果不用return结尾的话，就会返回undefined\n 也可以直接定义一个对象，这个对象也可以写成函数的方式\nvar abs = function (x) { if (x\u0026gt;=0) { return x }else { return -x } }； function(x)就是一个匿名函数，这个函数被赋值给了变量abs，所以可以直接通过abs调用该函数\n 这两种定义函数的方式完全一致，，但是用变量定义的时候需要注意，要用;结尾，代表函数语句结束\n 2.调用函数 调用函数时，直接传参即可 abs(10)，根据函数定义，将10代入进去即可，返回的结果是x , 即10\n3.检查参数 可以对参数进行检查，看看是否是自己想要的参数对类型\n如果传入对参数abs(x)中非数字，控制台返回结果this is not number，如果传参为数字，则进行条件判断\nfunction abs(x) { // 检查参数x是否为数字  if (typeof x !== \u0026#39;number\u0026#39;) { console.log(\u0026#39;this is not number\u0026#39;) }else{ if (x \u0026gt;= 0) { return x }else { return -x } } } 4.arguments 利用arguments，可以获得调用者传入的所有参数\narguments代表传入的参数，arguments.length代表传入参数的长度\nconsole.log(arguments.length) // 这行代码写在函数中，控制台就可以输出出来 先写一个循环，把参数输出的函数方法，函数写完之后，传入参数，控制台随之打印出传入的参数\nfunction str() { var s for(var i = 0; i\u0026lt;arguments.length; i++) { // 返回传入的参数  console.log(arguments[i]); s += arguments[i] + \u0026#34;,\u0026#34;; } return s; }; // 传入参数 str(\u0026#34;name\u0026#34;, \u0026#34;age\u0026#34;); //控制台输出：name, age 5.return 返回true时，点击链接直接跳转，返回false时，会忽略a链接的地址，跳转到window.location.href后的地址\n\u0026lt;a href=\u0026#34;https:www.baidu.com\u0026#34; onclick=\u0026#34;return myfun()\u0026#34;\u0026gt;baidu\u0026lt;/a\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;test\u0026#34; value=\u0026#34;click\u0026#34;\u0026gt; \u0026lt;script\u0026gt; function myfun() { window.location.href = \u0026#39;https://www.bilibili.com\u0026#39;; var test = document.getElementById(\u0026#39;test\u0026#39;).value; console.log(test); return false; } \u0026lt;/script\u0026gt;  return需要注意的地方：函数会自动在行尾添加;，所以在写return的时候一定要注意，不要单纯的拆分为两行，很容易报错\n return { name: \u0026#39;foo\u0026#39; } // 上面这种写法就是有问题的，js的机制会自动将其渲染为 return; //return undefined  { naem: \u0026#39;foo\u0026#39; }; // 正确的写法应该是： return { name: \u0026#39;foo\u0026#39; }; 6.rest 把传入的参数，多余的部分，以数组的形式保存起来，为了获得额外的参数，需要i = 2开始，把已有的a,b排除掉\nfunction arr(a, b) { var i, rest = []; if (arguments.length \u0026gt; 2) { for (i = 2; i\u0026lt;arguments.length; i++) { rest.push(arguments[i]); } } console.log(\u0026#39;a = \u0026#39; + a); console.log(\u0026#39;b = \u0026#39; + b); console.log(rest); }; arr(1,2,3,4); 控制台打印： 可以看到多余的部分被打印到Array中了\n这种写法略显麻烦，下面是更简单的写法\n直接在在函数里定义参数rest，并且在前面加上...标识，多余的参数直接以数组的形式交给变量rest，不需要arguments就可以获取全部参数\n如果传参数量还没有超过定义参数的数量，函数就会返回一个空数组\nfunction foo(a, b, ...rest) { console.log(\u0026#39;a = \u0026#39; + a); console.log(\u0026#39;b = \u0026#39; + b); console.log(rest) } foo(1,2,3,4) // a = 1 // b = 2 // Array [3,4]  foo(1) // a = 1 // b = undefined // Array [ ] 7.计算 对传入的参数求和\n// forEach可以返回数组中所有的元素  function sum(...rest) { var sum = 0; rest.forEach(function(x) { sum += x; }); return sum; }; //sum(1,2) //控制台输出 3。求和成功 计算圆的面积\n// r 表示圆的半径 // pi 如果没有参数，默认为3.14 function area_of_circle(r, pi){ var area; if(arguments.length == 1) { // 当传入的参数只有一位时，计算3.14*r的平方  area = 3.14*r*r; }else{ area = pi*r*r; } return area; } 二、变量和作用域 1.声明变量 在js中，通常使用var来生声明变量，而声明的变量实际上是有作用域的\n 在函数体内声明的变量，只能在函数体内生效，在函数体外是无法识别的  function fun() { var a = 1; }; a = a + 1; // err 这行代码直接报错，因为全局中没有a这个变量  如果两个函数体中各自声明了变量a，互不干扰，在自己的函数体内可以正常作用，出了函数体都没有作用了\n  js函数可以嵌套，内部函数可以访问外部函数，外部函数不能访问内部函数\n  function par() { var x = 1; function son() { var y = x + 1; }; var z = x + y; // Error: } 所以var z = x + y会报错，因为变量y在son()中，根据函数外部无法访问函数内部，y无法被访问，因此var z = x + y报错\n两个嵌套的函数体，各有一个重名变量，js函数在查找变量的时候，优先从自身开始，如果自身有这个变量就获取，如果没有，有内向外，由下层到上层的查找  function par() { var num = 1; function son() { var num = 2; console.log(\u0026#34;son() = \u0026#34; + num); }; console.log(\u0026#34;par() = \u0026#34; + num); son(); }; par();  函数必须经过调用之后才能生效 son()和par()\n 2.变量提升 JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部，但是并不会将赋值一起提升，很容易产生代码的报错\n因此，针对这一问题，我们在声明变量的时候，要将其统一放置在函数的起始位置，严格遵守在函数内部首先声明所有变量的原则\n3.全局作用域 不再任何函数内部定义的变量就叫做全局变量，也就是window下，他也被称作全局作用域，全局作用域下的变量实际上被绑定到window\nvar course = \u0026#39;learn js\u0026#39;; console.log(course); // learn js console.log(window.course) // learn js 直接访问全局变量或者在前面加上window，结果都是一样的\n整个js文件只有一个全局作用域，就是window，如果在某一个函数作用域内查找变量，没有查找到，就会由内到外一层层查找，如果最后在全局作用域中也没有查找到，就会ReferenceError 报错\n4.局部作用域 在函数内部就是局部作用域，这个代码的名字只在函数的内部起作用\n在for循环等语句中，无法定义具有局部作用域的变量\n5.全局变量和局部变量的区别   全局变量：在任何一个地方都可以使用，全局变量只有在浏览器关闭的时候才会销毁，比较占用内存资源\n  局部变量：只能在函数内部使用，当其所在代码块被执行时，会被初始化；当代码块执行完毕就会销毁，因此更节省节约内存空间\n  当在函数作用域中操作一个变量的时候，会先在自身作用域中查找，如果有就直接使用，如果没有就向上级作用域中寻找。如果全局作用域中也没有，那么就报错\n  6.常量 var和let声明的是一个变量，在ES6之间，用大写的变量名，表示定义一个常量\n// ES5 var NAME = \u0026#39;xiaoming\u0026#39; ES6新增一个关键字const来定义常量\n// ES6 const name = \u0026#39;xiaoming\u0026#39; 三、解构赋值 1.可以把一个数组的元素分别赋值给不同的变量\nvar array = [\u0026#39;hello\u0026#39;, \u0026#39;javascript\u0026#39;, \u0026#39;ES6\u0026#39;]; var x = array[0]; var y = array[1]; var z = array[2]; // x = \u0026#39;hello\u0026#39; // y = \u0026#39;javascript\u0026#39; // z = \u0026#39;ES6\u0026#39; 2.如果数组本身还有嵌套，也可以进行解构赋值，但是要注意嵌套的层次和数组保持一致\nlet [x, [y, z]] = [\u0026#39;hello\u0026#39;, [\u0026#39;JavaScript\u0026#39;, \u0026#39;ES6\u0026#39;]]; x; // \u0026#39;hello\u0026#39; y; // \u0026#39;JavaScript\u0026#39; z; // \u0026#39;ES6\u0026#39; 3.解构赋值时可以忽略元素\nlet [, , z] = [\u0026#39;hello\u0026#39;, \u0026#39;JavaScript\u0026#39;, \u0026#39;ES6\u0026#39;]; z; // ES6 4.还可以对对象进行解构赋值\nvar person = { name: \u0026#39;xiaoming\u0026#39;, age: 22, gender: \u0026#39;male\u0026#39;, email: \u0026#39;zsh981109@163.com\u0026#39;, school: \u0026#39;zyg\u0026#39; } // 定义了三个变量，分别对应三个属性 var {name, age, email} = person; console.log(name, age, email); 控制台就可以打印出我们想要的内容了\n 对对象进行解构赋值时，也可以进行嵌套\n 5.可以通过属性名赋值的时候，重新定义一个变量名\nvar person = { name: \u0026#39;小明\u0026#39;, age: 20, gender: \u0026#39;male\u0026#39;, passport: \u0026#39;G-12345678\u0026#39;, school: \u0026#39;No.4 middle school\u0026#39; }; // 把passport属性赋值给变量id: let {name, passport:id} = person; console.log(name); console.log(age); console.log(id); console.log(email); 控制台输出结果：\n可以看到，name,age,id都打印出来了，而email报错，因为email的内容赋值给了新变量id，而email没有任何内容，所以报错\n6.可以使用默认值true，避免不存在的属性返回undefined\nvar person = { name: \u0026#39;小明\u0026#39;, age: 20, gender: \u0026#39;male\u0026#39;, passport: \u0026#39;G-12345678\u0026#39; }; // 如果person对象没有single属性，默认赋值为true: var {name, single=true} = person; name; // \u0026#39;小明\u0026#39; single; // true   要注意，赋值的时候不能以{开头，避免js将其渲染失败\n var person = { name: \u0026#39;小明\u0026#39;, age: 20, gender: \u0026#39;male\u0026#39;, passport: \u0026#39;G-12345678\u0026#39; }; // 声明变量 var x; var y; // 解构赋值 {x, y} = { name: \u0026#39;小明\u0026#39;, x: 100, y: 200} // Error: 在这里 {x, y} = person会报一个错误，=不合法，所以正确的写法是，在赋值语句外部包裹一层()小括号\n({x, y} = { name: \u0026#39;小明\u0026#39;, x: 100, y: 200}); 7.解构赋值的使用场景\n交换两个变量的值\nvar a = 1; var b = 2; [a, b] = [b, a] 四、对象的方法  绑定到对象上的函数被称为方法\n 在一个对象中绑定函数，称为这个对象的方法\n1.this 下面段代码返回的是（今年的年份－出生年份）\nvar xm = { name: \u0026#39;xiaoming\u0026#39;, birth: 1998, age: function() { var year = new Date().getFullYear(); return year - this.birth } }; // 在对象xm中，调用方法age() xm.age(); // 22 这里引入了一个新的关键词this\n在方法内部，this是一个特殊的变量，它始终指向当前对象，也就是xm这个变量\n所以this.birth指的就是变量xm的birth属性\n this存在于方法中，想在方法中调用对象的属性，必须通过this\n 如果在方法写在对象外部时，this的指向问题就要好好分析了，比如：\nfunction getage() { var year = new Date().getFullYear(); return year - this.birth; } var xiaoming = { name: \u0026#39;小明\u0026#39;, birth: 1990, age: getage }; 单独调用getage()的时候，这时的getage()指的是一个方法，同时这个方法处于全局作用域下，此时this指向的是全局对象window，所以返回NaN\n只有xiaoming.age()调用的才是对象xiaoming下面的方法getage()\n 因此：要保证this的指向正确，必须使用obj.xxx()的形式调用 如果没有使用这种方法，全部报错，如果是在\u0026rsquo;use strict\u0026rsquo;模式下，this会指向undefined\n 2.that 如果在对象里面的方法，又套了一层事件，此时this指向又有问题了，它指向第一层方法，而不是方法对应的对象\n所以，在写方法的时候，直接先声明一个var that = this，这个that指向对象里面的属性，接下来，在方法里面调用属性的时候，直接在前面加上that.即可，它直接指向到对象下面的属性\nvar xm = { name: \u0026#39;xiaoming\u0026#39;, birth: 1998, age: function() { var that = this; function getbirthage() { var y = new Date().getFullYear(); return y - that.birth; } return getbirthage(); } }; // xm.age(); 可以看到，通过定义var that = this，然后在方法里面使用that.指向属性，不管套了几层方法，都不会报错，直接指向对象下面的属性\n通过var that = this，可以放心的在方法里面定义其他函数，不用担心获取不到对象属性的问题\n 但是有一个需要注意的地方，每个方法结束后，都要返回一下结果，return getbirthage()\n 3.apply 除了var that = this，还可以通过apply属性控制this的指向\napply是函数本身的方法，它拥有两个参数\nfunction getage() { var y = new Date().getFullYear(); return y - this.birth; } var xm = { name: \u0026#39;xiaoming\u0026#39;, birth: 1998, age: getage } // xm.age(); // getage.apply(xm, []); 写法就是getage.apply(xm, [])，apply的第一个参数代表this指向，即对象，第二个参数，表示函数本身的参数\n4.apply( ) 和 call( ) call()是与apply类似的方法，区别是：\n apply()将参数打包成Array call()直接将参数按顺序传入  调用math.max(1,2,3)，分别采用两种方式\nmath.max.apply(null, [1,2,3]); // 3 math.max.call(null, [1,2,3]); // 3 两者的结果是一样的，调用普通函数时，把this绑定为null\n","date":"2020-11-04T21:12:00Z","permalink":"https://imzsh.com/posts/20201104/","section":"posts","tags":["笔记"],"title":"javascript——函数、变量和方法"},{"categories":["编程技术"],"contents":"研究html的对象，事件和方法，从js的角度来思考，这个标签的属性是通过什么方法，触发什么事件来实现的\n  键盘鼠标事件   页面窗口事件   表单事件   一、window事件属性 针对window对象触发的事件，在\u0026lt;body\u0026gt;中执行\n1.onbeforeprint／onafterprint 在浏览器打印之间/后触发\n\u0026lt;body onbeforeprint = print()\u0026gt; \u0026lt;script\u0026gt; function print() { alert(\u0026#34;打印之间！\u0026#34;) } \u0026lt;/script\u0026gt; 打印前和打印后的事件方法类似，一个是在打印前触发事件，一个是在打印这个事件结束之后触发onafterprint这个事件\ndemo查看\n2.onbeforeunload/unload 离开页面之间触发的事件／之后触发的事件\n打开f12，然后刷新，或者关闭浏览器，可以在浏览器触发事件\n\u0026lt;script\u0026gt; window.onbeforeunload = function(){ return \u0026#34;提示\u0026#34; //返回的内容不会显示，  //在刷新的时候触发，或者关闭浏览器，浏览会直接提示是否重新加载，不能直接返回return  } \u0026lt;/script\u0026gt; demo查看\n3.onerror 当图片出错是可以触发该事件，支持该事件的标签只有 \u0026lt;img\u0026gt;,\u0026lt;object\u0026gt;,\u0026lt;style\u0026gt;\n\u0026lt;img src=\u0026#34;1.gif\u0026#34; onerror = \u0026#34;myfun()\u0026#34;\u0026gt; \u0026lt;script\u0026gt; function myfun() { alert(\u0026#34;图片出错\u0026#34;) } \u0026lt;/script\u0026gt; 1.gif不存在，因此触发了一个myfun()事件，弹出窗口\ndemo查看\n4.onhashchange 当文档改变时发生的脚本 ？？？\n5.onload 页面加载完成之后触发\ndemo查看\n6.onmessage 在消息被触发时运行 ???\n7.onoffline 当浏览器离线时触发\n\u0026lt;body onoffline=\u0026#34;myfun()\u0026#34;\u0026gt; 8.ononline 当浏览器在线工作时触发\n\u0026lt;body ononline=\u0026#34;myfun()\u0026#34;\u0026gt;  ononline和onoffline在网络断线或者连线时触发，可以控制电脑网络查看效果\n 9.onpagehide 当用户从网页离开时触发，也可以理解成当窗口隐藏时运行的脚本\n刷新页面可以触发事件\ndemo查看\n10.onpageshow 打开一个新页面或者刷新的时候触发\ndemo查看\n相当于onload，加载页面时触发，但是在不同浏览器触发的有所不同\n 第一次加载页面时，onpageshow在ie浏览器中不触发，其他情况都触发\n 11.onresize 当浏览器窗口被改变大小时触发事件\n\u0026lt;body onresize=\u0026#34;myfun()\u0026#34;\u0026gt; \u0026lt;script\u0026gt; function myfun() { alert(\u0026#39;浏览器窗口改变了\u0026#39;) } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; demo查看\n 12.onunload  页面被下载时触发，就是刷新或者关闭页面时触发\nwindow.onunload = function() { return \u0026#39;确定关闭吗？\u0026#39; } 13.onpopstate 当浏览器窗口记录改变时运行的脚本，\n14.onredo 当文档执行撤销时触发的事件\n二、form事件属性 由html表单内触发的事件，通常使用在form元素中\n1.onblur 失去焦点时运行的脚本\n\u0026lt;input name=\u0026#34;int\u0026#34; id=\u0026#34;int\u0026#34; onblur=\u0026#34;myfun()\u0026#34;\u0026gt; \u0026lt;script\u0026gt; function myfun() { var int = document.getElementById(\u0026#39;int\u0026#39;).value; document.getElementById(\u0026#39;int\u0026#39;).value = int.toUpperCase(); } \u0026lt;/script\u0026gt; 给input绑定一个onblur=myfun()的事件，当input失去焦点的时候产生什么样的效果\ndemo查看\n2.onfocus 元素获得焦点时触发事件，和onblur相反\ndemo查看\n3.onchange 当元素值被改变的时候触发事件\n\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;int\u0026#34; name=\u0026#34;int\u0026#34; onchange=\u0026#34;myfun()\u0026#34;\u0026gt; \u0026lt;script\u0026gt; function myfun() { alert(\u0026#39;我的元素被改变啦！\u0026#39;) } \u0026lt;/script\u0026gt; 这个事件的意思就是，当我对input内容进行操作改变后，浏览器会弹出一个alert\ndemo查看\n4.oncontextmenu 当用户右键操作时触发该事件\n可以绑定在任意元素中触发，可以一直触发，不用刷新\n\u0026lt;div oncontextmenu=\u0026#34;myfun()\u0026#34;\u0026gt;这是一个文本框！\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function myfun() { alert(\u0026#39;oncontentmenu事件触发\u0026#39;) } \u0026lt;/script\u0026gt; demo查看\n5.onformchange 当表单获得输入时可以触发事件\n 触发发不了脚本\n 6.onforminput 当表单获得用户输入时触发的事件，无法触发\n浏览器不支持\n6.oninput 当元素获得用户输入时触发的事件 当输入框输入或者删除时都会触发oninput\n\u0026lt;input type=\u0026#34;text\u0026#34; oninput=\u0026#34;myfun()\u0026#34;\u0026gt; \u0026lt;script\u0026gt; function myfun() { alert(\u0026#39;oninput触发了\u0026#39;) } \u0026lt;/script\u0026gt;  onchange和oninput有相似的地方，都是改变文本内容时触发事件\n但是onchange是在input失去焦点时才触发，oninput是立刻触发\n demo查看\n7.oninvalid oninvalid事件要搭配required属性来使用\n required如果使用该属性，代表必填字段，oninvalid是当元素无效时触发的事件\n \u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; oninvalid=\u0026#34;myfun()\u0026#34; required\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; function myfun() { alert(\u0026#39;填写为空\u0026#39;) } \u0026lt;/script\u0026gt; demo查看\n8.onreset 表单中重置按钮被点击时触发\n\u0026lt;form onreset=\u0026#34;myfun()\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;reset\u0026#34; value=\u0026#34;reset\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; function myfun(){ alert(\u0026#39;重置成功\u0026#39;) } \u0026lt;/script\u0026gt; demo查看\n9.onselect 文本被选中时触发\n\u0026lt;input onselect=\u0026#34;myfun()\u0026#34; value=\u0026#34;选中我\u0026#34;\u0026gt; \u0026lt;script\u0026gt; function myfun() { alert(\u0026#39;onselect被触发 \u0026#39;) } \u0026lt;/script\u0026gt; demo查看\n10.onsubmit 当表单被提交时触发\n要把事件绑定到form标签里面\n\u0026lt;form onsubmit=\u0026#34;myfun()\u0026#34;\u0026gt; \u0026lt;!-- 注意：事件要绑定到form标签上面 --\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; function myfun() { alert(\u0026#39;提交了\u0026#39;) } \u0026lt;/script\u0026gt; demo查看\n 注意：提交了之后会自动刷新页面，document和console的触发内容会立刻刷新，一闪而过，只有alert能停留在页面上，等待点击确定\n 三、key键盘事件 1.onkeydown 按下任意键时触发，包括系统按钮，箭头和功能键\ndemo查看\n2.onkeypress 按下任意字母数字键时触发，但系统按钮，箭头和功能无法识别\n3.onkeyup 松开任何之前按下的键盘时触发\ndemo查看\n四、mouse鼠标事件 利用鼠标触发的事件\n1.onclick 鼠标点击元素触发的事件\n\u0026lt;p onclick=\u0026#34;myfun()\u0026#34;\u0026gt;点击我\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; function myfun() { alert(\u0026#39;点击成功\u0026#39;) } \u0026lt;/script\u0026gt; demo查看\n2.ondblclick 鼠标双击时触发的事件\n\u0026lt;div ondblclick=\u0026#34;myfun()\u0026#34;\u0026gt;测试文本！\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function myfun() { alert(\u0026#39;双击测试成功！\u0026#39;) } \u0026lt;/script\u0026gt; demo查看\n3.拖动事件 ondrag/ 元素被拖动时触发的事件\nondragstart/在拖动操作开端运行的脚本\nondrop/ 当元素正在被拖动时触发的事件\nondragend/在拖动操作末端运行的脚本\nondragenter/当元素元素已被拖动到有效拖放区域时运行的脚本\nondragleave/当元素离开有效拖放目标时运行的脚本\nondragover/当元素在有效拖放目标上正在被拖动时运行的脚本\n4.onmousedown/onmouseup 当元素按下鼠标时触发的事件/鼠标释放时触发的事件\n 一个是按下去的瞬间就触发 一个是当鼠标被松开的时候触发  onmouseup效果和onclick一样，因为click也是点击过后触发\n这两个事件加起来相当于一个click事件，但是并不能用这两个事件来做点击事件的效果\ndemo查看\n5.onmousemove 当鼠标移动到元素上时触发\n相当于css里面的 :hover，但是作为事件拥有更灵活多变的用法\ndemo查看\n6.onmouseout 当鼠标离开元素时触发\ndemo查看\n7.onmouseover 当鼠标进入元素时触发\n onmouseover和onmousemove都是鼠标进入元素触发\n区别：\n1.\nover在进入元素时触发，但在元素内部移动时不触发 move是进入元素时和在元素里面移动时都触发\n2.\nover优先触发，然后才触发move\n 8.onmousewheel 当鼠标滚动被滚动时触发的事件\n\u0026lt;style\u0026gt; div { height: 1000px; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div onmousewheel=\u0026#34;myfun()\u0026#34;\u0026gt;测试\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function myfun() { alert(\u0026#39;onmousewheel\u0026#39;) } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 每次滚动时都可以触发，可以绑定到body上\ndemo查看\n9.onscroll 当元素滚动条被滚动时触发的事件\n\u0026lt;div onscroll=\u0026#34;myfun()\u0026#34;\u0026gt;In my younger and more vulnerable years my father gave me some advice that I\u0026#39;ve been turning over in my mind ever since.\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;滑动了\u0026lt;span id=\u0026#34;ci\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; x = 0 function myfun() { document.getElementById(\u0026#39;ci\u0026#39;).innerHTML = x += 1 } \u0026lt;/script\u0026gt; 这个案例－－－滑动滚动计数\ndemo查看\n 区别：\n1.wheel在滚轮滑动的时候有效，鼠标拖拽的时候无效\n2.onscroll不管在滑动还是拖动的时候，均生效\n ","date":"2020-10-29T21:12:00Z","permalink":"https://imzsh.com/posts/20201029/","section":"posts","tags":["笔记"],"title":"HTML事件属性--DOM"},{"categories":["编程技术"],"contents":"在学习js基本语法的过程中，把遇见的知识点和问题记录喜下来，以便未来复习和参考。\n数据类型有：数据，字符串，数组，数字，布尔值等。\n一、数据类型 1.number 2.布尔值 只有true和false两种，可以直接用true和false来表达，比如：\ntrue;\t//true false;\t//false 2\u0026gt;1;\t//true 2\u0026gt;3;\t//fasle 与\t\u0026amp;\u0026amp; 两者同时为true，运算结果为true\n或\t|| 只要有一个为true，运算结果就是true\n非\t！ 当程序为true时，运算结果取反为false\nvar age = 15; if(age \u0026gt;= 18) { alert(\u0026#39;adult\u0026#39;) }else{ alert(\u0026#39;teenager\u0026#39;) } age值是15，当age大于且等于18的时候浏览器弹出adult，反之弹出teenager\n3.字符串 4.比较运算符 ==和===\n当使用==进行比较的时候，一般会自动转换类型然后再进行比较\n当使用===进行比较的时候，如果数据类型不一样，直接返回false，等到类型一致了，然后再进行比较\n有一个特殊的number就是NaN，它不与任何值相等，包括它自己NaN\nNaN === NaN\t//false 5.null和undefined null表示一个空值，0表示一个数值，''表示长度为0的字符串，但是null表示空\nundefined表示未定义\n但是区分两者意义不大，大多数还是在用null，undefined仅仅在判断函数参数是否传递的情况下有用\n6.数组Array [ ] ，表示一组按顺序排列的集合，其中的每个值称为元素\nnew Array(1,2,3)\t//[1,2,3] 数组的索引\n二、对象和变量 var person = { name: \u0026#39;jack\u0026#39;, age: 20, city: \u0026#39;hangzhou\u0026#39; } person是对象变量，name: 'jack'这就是一个键值对，name是属性名，'jack'是属性\n要获取一个对象的属性，用对象变量.属性，也就是person.name，结果是jack\nperson.name\t//jack person.age\t//20 var是一个动态语言，就算var定义了x = 100，后面又有x = x+ 100,所以就变成了200,\nvar x = 100; x = x+ 100; console.log(x)\t//200 假如用int来定义x，后面的x = x + 100就会报错\n并且使用var定义的变量只会存在与该函数作用域，并不是默认的全局变量\n而如果没有使用var，直接定义i = 100，变量i会被默认为全局变量\n三、字符串 需要用到转义字符\\\n1.模板字符串 var name = \u0026#39;小明\u0026#39;; var age = 20; var message = name + \u0026#39;今年\u0026#39; + age + \u0026#39;了\u0026#39;; //小明今年20了 var message = `${naem}，你今年${20}了` //ES6新增的语法，一样的结果 字符串不可改变\n如果对字符串的某个索引赋值，不会报错，不会发生任何改变\nvar a = \u0026#39;hello,world!\u0026#39; a[0];\t//h a[0] = k; console.log(a);\t//结果为\u0026#39;hello,world!\u0026#39;，不会发生改变 2.toUpperCase大写 他会返回一个新的字符串，把一个字符串全部变成大写\nvar a = \u0026#39;hello\u0026#39;; a.toUpperCase();\t//返回HELLO 3.toLowerCase小写 他会返回一个新的字符串，他会把一个字符串全部变成小写\nvar a = \u0026#39;hello\u0026#39; a.toLowerCase();\t//HELLO 4.indexOf 他会返回指定字符串的索引，如果没有找到指定的字符串，则会返回-1\nvar a = \u0026#39;hello,world!\u0026#39; a.indexOf(\u0026#39;world\u0026#39;);\t//6 5.substring 他会返回指定区间索引的字符串，包括前一个数，不包括后一个数\nvar a = \u0026#39;hello,world!\u0026#39; a.substrng(0, 5);\t//hello 如果()里面只有一个数值，则从这个数值的索引开始直到结束，比如：\nvar a = \u0026#39;hello,world!\u0026#39;; a.substring(6);\t//返回world! 四、数组 数组Array可以包含任何类型的数据，并通过索引来访问每个数据\n1.length属性 Array的长度可以用length属性来获取，它和索引不一样，从1开始计算\nvar arr = [1,2,3,\u0026#39;hello\u0026#39;,null,true] arr.length;\t//返回6 并且通过改变length的值，可以改变数组的内容大小变化\nvar arr = [1,2,3,\u0026#39;hello\u0026#39;,null,true] arr.length;\t//6 arr.length = 8;\t//[1,2,3,\u0026#39;hello\u0026#39;,null,true,undefined,undefined] arr.length = 2;\t//[1,2] 2.通过索引改变数组 Array可以直接通过索引修改对应的元素\nvar arr = [1,2,3] arr[1] = \u0026#39;hello\u0026#39; console.log(arr); //[1,\u0026#39;hello\u0026#39;,3] js允许直接通过索引改变数组的长度，不会报错，但是不建议这么做\n3.indexOf Array可以通过indexOf来搜索一个指定的元素的索引\nvar arr = [1,2,3,\u0026#39;hello\u0026#39;] arr.indexOf(1);\t//0 arr.indexOf(3); //2 4.slice slice属性与substring类似，后者是截取字符串的内容，slice是截取数组的内容，然后返回一个新的数组\n如果有两个数值，包括前面的数值，不包括后面的数值；如果只有一个数值，则从它开始算起一直到结束\nvar arr = [1,2,3,4,5]; arr.slice[0,2];\t//返回[1,2] arr.slice[2];\t//返回[3,4,5] 如果slice不指定数值，则返回数组的全部内容，可以利用这个特性复制一个相同的数组出来\nvar arr = [1,2,3]; var arr1 = arr.slice(); console.log(arr1);\t//[1,2,3] arr1 === arr;\t//true  注意：两个数组相比都是false，就算数组内容一样也会false\nvar arr = [1,2,3] var arr1 = [1,2,3] arr === arr1\t//false  5.push和pop push()向数组的末尾添加元素\npop()把数组的最后一个元素删掉\n6.unshifth和shift unshift()向数组的头部添加元素\nshift()把数组的第一个元素删掉\n7.sort sort()可以对数组进行排序，会直接修改当前数组的元素位置，直接调用时，会按照默认的方式排序\nvar arr = [B,A,C] arr.sort(); arr\t//[A,B,C] 8.reverse reverse()会把整个数组调个个，不是反向排序\nvar arr = [2,1,3] arr.reverse(); arr;\t//[3,1,2] 9.splice 这个属性是万能的方法，通过调用splice()，可以从指定的索引删除元素或者添加元素\n五、条件判断 在js中，使用 if() {...} else {...}进行条件判断\nvar age = 22; if(age\u0026gt;20) { // 如果age\u0026gt;20成立，执行该语句 \tconsole.log(\u0026#39;22\u0026gt;20\u0026#39;) }else { // 如果age\u0026gt;20不成立，则执行该语句 \tconosle.log(\u0026#39;22\u0026lt;20\u0026#39;) } 最终，控制台会打印出22\u0026gt;20，因为条件成立\n 执行的语句要用{}包裹起来，防止其他情况会报错\n 多条件判断语句\n三个或者三个以上多判断语句，被称为多条件判断语句\nvar a = 10 if(a\u0026lt;10) { console.log(\u0026#39;a\u0026lt;10\u0026#39;) }else if(a\u0026gt;20){ console.log(\u0026#39;a\u0026gt;10\u0026#39;) }else{ console.log(\u0026#39;10\u0026lt;=a\u0026lt;=20\u0026#39;) }  如果多个条件中都满足，则取第一个满足的结果，执行其代码，之后满足的自动忽略掉，所以在 进行条件判断的时候，不要重复判断情况\n 一个复杂的多条件判断语句\nvar height = parseFloat(prompt(\u0026#39;请输入身高(m):\u0026#39;)); var weight = parseFloat(prompt(\u0026#39;请输入体重(kg):\u0026#39;)); var bmi = weight/(height*height); if(bmi \u0026lt; 18.5) { console.log(\u0026#39;过轻\u0026#39;) }else if(bmi\u0026gt;18.5,bmi\u0026lt;25) { console.log(\u0026#39;正常\u0026#39;) }else if(bmi\u0026gt;25,bmi\u0026lt;28){ console.log(\u0026#39;过重\u0026#39;) }else if(bmi\u0026gt;28,bmi\u0026lt;32){ console.log(\u0026#39;肥胖\u0026#39;) }else{ console.log(\u0026#39;严重肥胖\u0026#39;) }  parseFloat可以解析一个字符串，并返回一个数字\n 六、循环 简单的运算可以手打出来\n1 + 2 + 3 // 控制台输出 6 但是几百次，几千次，几万次的运算无法手打，可以依靠循环语句来进行计算，为了让计算机能够进行成千上万次的运算\n循环语句有两种for和while，他们有不同的用法，适应不同的情况\n1. for循环 通过初始条件，结束条件和递增条件来循环执行语句块\nvar x = 0 var i for(i = 1; i \u0026lt;= 1000; i++) { x = x + i }  i = 1是初始条件，i从1开始算起 i\u0026lt;=是判断条件，满足就执行循环，不满足就退出循环 i++是递增条件，每次循环过后都是＋1，当无数次后不满足了i\u0026lt;=1000，会跳出循环\n 2. 通过for语句遍历数组 var arr = [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;oringen\u0026#39;] var x,i for(i = 0; i \u0026lt;= arr.length; i++) { x = arr[i] console.log(x) } 3. 用break终止for循环 var x = 0; for ( ; ; ) { // 将无限循环下去  if (x \u0026gt; 100) { console.log(x) break; // 通过if判断来退出循环  } x ++; } 4. for\u0026hellip;in 可以把一个对象对属性循环遍历出来\nvar person = { name: \u0026#39;jack\u0026#39;, age: 20, city: \u0026#39;beijing\u0026#39; }; for(var i in person) { console.log(i) console.log(person[i]) } var i in person会把person里面所有对属性遍历，然后通过console.log(i)可以把属性名打印出来，console.log(person[i])可以把属性值打印出来\n如果对一个数组进行这样的操作，就可以把数组元素对索引打印出来，打印结果是字符串形式\n5. while循环 while循环适用于忽视判断条件的情况，for适用于明确了初始条件和结束条件的情况\n比如要计算1-100之间的寄数和，可以用while循环\nvar x = 0 var n = 99 while (n \u0026gt; 0) { x = x + n n = n - 2 } x 在变量内部，n不断自减，直接n=-1，不满足判断条件，此时退出循环\n6. do\u0026hellip;while do...while循环是先循环，然后再判断条件，所以不论条件是否满足，do...while至少循环一次，这是它与for和while的区别\n比如：\nvar n = 0 do{ n = n + 1 }while(n \u0026gt; 1) n;\t//1 先定义n=0，然后执行n=n+1，所以n=1，再判断条件，当n\u0026gt;1的时候执行，不符合，退出循环，控制台输出n，结果为 1\n七、Map和Set 1. Map Map是一组键值对的结构，具有极快的查找速度\n只要我们定义一个属性名和属性值对应的数组，就可以从这个数组里面通过name直接查找数据\nvar m = new Map([[\u0026#39;jack\u0026#39;, 95], [\u0026#39;Bob\u0026#39;, 94], [\u0026#39;linda\u0026#39;, 93]]) m.get(\u0026#39;jack\u0026#39;) 首先，要初始化一个Map数组\nvar m = new Map();\t//空map m.set(\u0026#39;jack\u0026#39;, 95)\t//添加一个新的键值对\tkey-value m.has(\u0026#39;jack\u0026#39;)\t//检查是否存在 \u0026#39;\tjack\u0026#39;key m.get(\u0026#39;jack\u0026#39;)\t//获取\u0026#39;jack\u0026#39;对应的数据\tvalue m.delete(\u0026#39;jack\u0026#39;)\t//删除\u0026#39;jack\u0026#39;键值对\tkey-value m.get(\u0026#39;jack\u0026#39;)\t//undefined  一个key只能对应一个value，所以如果重复赋值的话，后面的数据会把前面的数据覆盖掉\n var m = new Map(); m.set(\u0026#39;Adam\u0026#39;, 67); m.set(\u0026#39;Adam\u0026#39;, 88); m.get(\u0026#39;Adam\u0026#39;); // 88 2. Set set中值储存key，不储存value，而且在set中，key不能重复，如果重复了，会自动忽略掉重复\n首先，创建一个空的set\nvar m = new Set()\t//空set m.add(1)\t//添加一个key m.delete(1)\t//删除一个key m\t//控制台输入［ ］空数组，没有数据 ","date":"2020-10-21T21:11:00Z","permalink":"https://imzsh.com/posts/20201021/","section":"posts","tags":["笔记"],"title":"js基本属性"},{"categories":["生活随笔"],"contents":"这里我要推荐一本书，叫做《Web全栈工程师的自我修养》，在看的过程中，自己也代入进去进行分析，然后写了这篇笔记。\n“全栈工程师正在成为IT行业的新秀，无论是在上市互联网公司还是在创业公司，都对全栈工程师青睐有加。本书作者是腾讯公 司高级工程师，在前端、后端和APP开发方面都有丰富的经验，在本书中分享了全栈工程师的技能与要求、核心竞争力、未来发 展方向、对移动端的思考。除此之外，本书还详细记录了作者从零开始、学习心得。本书内容全面、客观务实适合互联网行业新人 、程序员。以及期待技术转型的从业者阅读参考。”\n作者余果毕业于西安点击科技大学软件工程学院，曾任腾讯社交用户体验设计部高级UI工程师、前端开发负责人，负责多个项目的产品设计，以自身的经历为模板撰写了这本书。\n从自身说起，因为对技术和机器的热爱让他走向了计算机这门行业，而在书中，他也经常提及自己理性和感性思维相结合，对全栈工程师进行了深入分析。\n全栈工程师是指一个能够处理数据库、服务器、系统工程和客户端所有工作的工程师。根据项目的不同，客户需要的可能是移动栈、Web栈，或者原生应用程序栈。这是官方的定义。而以我目前出入前端的思维通俗点来说，大概也就是一个人包揽前端，后端，一个人处理数据进行项目维护，甚至于设计图都是自己做的。\n很多人都说全栈有很多好处，不同担心很多人编写不同步，思维不一致，导致做出来的项目每个人的想法不同，全栈一个人包揽所有的过程，都在自己脑子里。\n可能因为我进入这个行业不久，我认为全栈是不太合理的存在，打个比方说，在流水线还没出现之间，手工作坊基本都是一个人负责所有的产品制作，从原料，制作，打磨，成品，或许很经过很多步骤，但是一个人都可以完美的做出来，就这样类似全栈工程师这样的存在。\n而生产线就更像一个团队，产品，UI，前端，后端测试等，每个人相互配合。\n全栈和团队比起来，我个人觉得团队的优势更大，但架不住老板喜欢一个人干三个人活，更喜欢全栈一点。\n培养一个全栈的花费的时间和精力难以想象，甚至不确定培养一定成功，但是如果专精某一技术领域，成为高级工程师的概率绝对远大于一个全栈。当然这也只是我个人的臆测，并没有具体的数据支撑。\n书中也提及，流水线带来的另一个好处，不会对某个工程师产生依赖性，即使失去这个员工，也可以让被人接手工作\n说了很多团队化的好处，这不代表就没有弊端，肯定是有的，书中总结出来几点：\n 工程师职责不清导致效率低 工程师缺乏主人感导致产品质量差 工程师缺乏全局的视野影响个人成长 更多角色导致项目效率低下  “因为各司其职的工作流程有效率低下、成本高的缺点，所以很多创业公司都不会配备齐全的流水线，而是希望采用更灵活的方式来组建团队，全栈工程师也因此成为了理想的选择。但是全栈工程师的兴起还离不开这两个重要因素：技术的发展，以及提供PaaS服务的平台越来越多。”\n虽然做成为一个全栈工程师需要耗费大量的时间精力来打磨，但是这个思维我还是比较喜欢的。比如说，有a,b,c三个人，分别擅长各自的领域，有一天他们共同负责的项目出了一个小问题，但是问题出在哪里领域还不知道，虽然是个小问题，但需要每个人去查验一遍，因为是三个领域，这就导致应该有两个人的查验是无效的，这从另一个方向来说也降低了项目效率。\n然后这时候，有一个工程师s，注意他不是全栈工程师，只是喜欢学习多领域的技术，掌握了一些不算太高深的技术知识，查验了一遍，很快就找出了问题所在。\n那他一个人效率就相当于三个的效率了，其实这样说并不严谨，我也只是打个比方。\n我突然想到一句话，不知道说的准确与否，\n“全栈的职位存在是不合理的，但全栈的思维是一个有上进心的工程师所必备的。”\n","date":"2020-09-18T21:10:00Z","permalink":"https://imzsh.com/posts/20200918/","section":"posts","tags":["读书"],"title":"对全栈的一些思考"},{"categories":["编程技术"],"contents":"我在写博客的时候，想给博客网页添加自己喜欢的音乐，这样我在写作和阅读的时候，心情也会比较愉悦，这个时候，我们就需要用到audio这个标签。\n\u0026lt;audio src=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/audio\u0026gt; 同时audio标签还带有很多实用的属性，常用的有以下几个：\n src \u0026ndash; 这个就不说了，懂的都懂 autoplay \u0026ndash; 如果出现该属性，音频在就绪后马上播放 controls \u0026ndash; 网页中显示音频控件 loop \u0026ndash; 循环播放 muted \u0026ndash; 默认静音  但是我在设置 autoplay 的时候发现，chrome对自动播放深恶痛绝，直接从根源上限制了这个属性的开启，意思是说，这个属性直接禁用，在打开网页没有交互的情况下，不允许自动播放。\n但仔细想一想，这个做法其实是对用户比较有利的。假设用户使用的时候宽带流量，直接自动播放视频、音频，就会对用户造成损失。甚至一些广告会自动播放，这就直接影响到了用户的体验。所以，对于chrome的做法我还是比较赞同的。\n回过头一想，不对啊，我的目的是解决这个问题，不是夸赞谷歌的。我想给自己的个人博客添加喜欢的音乐，所以我找了一个不算办法的办法。我直接在模拟一个事件，当鼠标点击网页任意处的时候，自动触发autoplay的音频效果，直接上代码。\n\u0026lt;script\u0026gt; function toggleSound() { var music = document.getElementById(\u0026#34;vd\u0026#34;); //获取ID  console.log(music); console.log(music.paused); if (music.paused) { //判读是否播放  music.paused=false; music.play(); //没有就播放  } } setInterval(\u0026#34;toggleSound()\u0026#34;,1); \u0026lt;/script\u0026gt; 这样处理过之后，插入音频，任意点击网页某个地方，都会触发播放效果，但凡事有利有弊，这样做的话，一旦开启播放，将无法启用暂停功能，也就是说会一直播放下去\n如果是像我这样写个人博客，这个弊端倒是影响不大，我在这里记录一下这个方法。\n","date":"2020-09-11T21:08:00Z","permalink":"https://imzsh.com/posts/20200911/","section":"posts","tags":["浏览器"],"title":"chrome浏览器中对autoplay的一些处理技巧"},{"categories":["生活随笔"],"contents":"本书从前端开发人员的需求出发，以“流”为线索，从结构、内容到美化装饰灯方面，全面且深入地讲解前端开发人员必须了解和掌握的大量的CSS知识点。同时，作者结合多年的从业经验，通过大量的实战案例，详尽解析CSS的相关知识与常见问题。\n作者还为本书开发了专门的配套网站，进行实例展示。问题答疑。作为一本CSS深度学习的书，书中介绍大量许多前端开发人员都不知道的CSS知识点。通过阅读本书，读者会对CSS世界的深度和广度有一个全新的认识。\n这本书作者采用口语化的方式，讲述在css中遇到的一些有意思的问题，循序渐进，引人入胜，对有前端基础的人来说，读这本书还是很有意思的。我经常在闲余时间看看这本书，会给我一些启发。\n","date":"2020-08-11T21:09:00Z","permalink":"https://imzsh.com/posts/20200811/","section":"posts","tags":["读书"],"title":"推荐书籍《CSS世界》"},{"categories":["编程技术"],"contents":"在某些段落中，页面要求文字只显示一行，但是width固定，而文字过长，就会出现一个需求，超过长度限制的文字被隐藏且显示省略号，css 支持这样的属性。\n单行文本溢出隐藏\ndiv{ overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } 多行文本溢出隐藏\ndiv { display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 3; overflow: hidden; } 简单的几行代码就可以达到我们的要求。\n但是有一个我们需要注意的地方！！\nflex布局是前端写代码经常使用的一种布局方式，简单便捷且有效，但是在使用flex布局的元素中不能同时使用文字溢出隐藏,也就是两者不能同时出现在同一标签中。\n这里，我们也有对应的解决办法。\n只要保证flex布局和隐藏的样式不在同级元素中就可以，所以在文字外部多包裹一层标签。\n可以采用下面这段代码的写法；\n\u0026lt;p\u0026gt; \u0026lt;!-- 我们在这一层的标签进行flex布局 --\u0026gt; \u0026lt;span\u0026gt; \u0026lt;!-- 这一层的标签我们引入文字过长隐藏的样式 --\u0026gt; \u0026lt;!-- 文本 --\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; ","date":"2020-08-03T21:08:00Z","permalink":"https://imzsh.com/posts/20200803/","section":"posts","tags":["css"],"title":"文字溢出隐藏以及和flex冲突的问题"},{"categories":["编程技术"],"contents":"学习vue中一个非常重要的领域，就是生命周期，它包含了很多的内容。每个vue实例在被创建的时候都要经历一系列的初始化过程，这个过程就是vue的生命周期。\n每个vue实例在被创建的时候都要经过一系列的初始化过程——例如，需要把设置数据监听、编译模板、将实例挂载到DOM并在数据变化时更新DOM等，我们要把这一系列的过程称为组件的生命周期（组件从注册到销毁的整个过程）。我们有时候需要在组件生命周期的某个过程中，执行某些代码，基于此，vue提供了生命周期钩子函数，给了用户在不同阶段添加自己的代码的机会。\n但是在此之前，我们要详细的介绍下组件的生命周期，以及生命后期中每个阶段组件完成和未完成的部分。\n一、组件的生命周期 放一张大家都很熟悉的官网文章中对生命周期的注释图。\n从图中可以看出，vue为生命周期提供了8个钩子函数，分别是：\n beforeCreate: 创建前 created: 创建后 beforeMount: 挂载前 mounted: 挂载后 beforeUpate: 更新前 upated: 更新后 beforeDestoy: 销毁前 destoyed: 销毁后  1.beforeCreate beforeCreate在vue实例发生之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。\n我们在上面的例子中在的beforeCreate钩子中调用Vue的data和method，来看一下结果：\n可以看到Vue中的data和方法都是去不到的，并且是在wath之前执行\n2.created 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。\n主要应用：调用数据，调用方法，调用异步函数\nconsole输出的结果我们看一下\n可以看到：created钩子可以获取Vue的data，调用Vue方法，获取原本HTML上的直接加载出来的DOM，但是无法获取到通过挂载模板生成的DOM（例如：v-for循环遍历Vue.list生成li）\n3.beforeMount 在挂载开始之前被调用：相关的 render 函数（模板）首次被调用。\n例如通过v-for生成的html还没有被挂载到页面上\nbeforeMount: function () { console.log(\u0026#39;beforeMount:\u0026#39;,document.getElementsByTagName(\u0026#39;li\u0026#39;).length); }, console打印出来的beforeMount为1\n4.mounted el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。\n有初始值的DOM渲染，例如我们的初始数据list,渲染出来的li，只有这里才能获取\nmounted: function () { console.log(\u0026#39;mounted:\u0026#39;,document.getElementsByTagName(\u0026#39;li\u0026#39;).length); }, 结果 mounted: 3 , 可以看到到这里为止，挂载到实例上了，我们可以获取到li的个数了\n5.beforeUpdate 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n当我们更改Vue的任何数据，都会触发该函数\nbeforeUpdate: function () { console.log(\u0026#39;beforeUpdate 钩子执行.\u0026#39;); console.log(\u0026#39;beforeUpdate:\u0026#39;+this.message) }, 6.updated 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。\n该钩子在服务器端渲染期间不被调用。\n数据更新就会触发（vue所有的数据只有有更新就会触发）,如果想数据一遍就做统一的处理，可以用这个，如果想对不同数据的更新做不同的处理可以用nextTick，或者是watch进行监听\nupdated: function () { console.log(\u0026#39;updated 钩子执行...\u0026#39;); console.log(\u0026#39;updated:\u0026#39;,this.message) }, 7.beforeDestroy 实例销毁之前调用。在这一步，实例仍然完全可用。\n8.destroyed Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。\n结果\n可以看打到销毁Vue实例时会调用这两个函数\n","date":"2020-06-19T21:07:00Z","permalink":"https://imzsh.com/posts/20200619/","section":"posts","tags":["vue"],"title":"vue生命周期"},{"categories":["生活随笔"],"contents":"2020年6月14日\n我的博客正式建立。\n愿一切安好。\n","date":"2020-06-14T20:57:00Z","permalink":"https://imzsh.com/posts/20200614/","section":"posts","tags":["博客"],"title":"hello, world"},{"categories":null,"contents":"🔥学习新思想，争做新青年，一个在杭州的新生代农民工。因为我对前端比较感兴趣，再夹杂着一些其他的原因，所以20年毕业后来到杭州，从事前端方面的工作。\n这是一个我在闲暇时间写的博客，会写一些生活琐事，也会写一些技术笔记。我的本意是想在生活中不断追寻新的感悟，因此博客叫做求索日记。\n⚡关于这个博客，我使用的是 hugo 程序，然后根据官方文档中的 api 语法和模板自己编写这套样式，尽可能去避免太亮眼的色彩，使用黑白纯色进行布局，将视线拉到文字当中去，不去看那些花哨无意义的内容。编译之后的文件被我推送到服务器上，然后备份在 Github 中，以免哪个地方挂了，代码和文章全无，那就很痛苦了。\n📑如果想知道更多关于这个博客的事情，可以阅读《关于我为什么要写博客？》\n📌平时呢，我多数混迹于 v2ex, 知乎, nga 等平台，欢迎和我一起探讨一些问题，或者聊聊人生与理想。\n🙋源码: https://github.com/Nov8nana/blog\n   网站 链接     Blog https://imzsh.com   Github https://github.com/Nov8nana   E-mail shuxhan@163.com   图床 https://img.shuxhan.com    the road ahead will be long and our climb will be steep.\n✨2021年的新年愿望是可以 new 一个对象！ \u0026mdash;2021.02\n","date":"2020-06-14T00:00:00Z","permalink":"https://imzsh.com/about/","section":"","tags":null,"title":"关于我"}]