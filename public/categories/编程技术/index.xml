<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程技术 on 求索日记</title>
    <link>https://imzsh.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 编程技术 on 求索日记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://imzsh.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>通过 getTimezoneOffset() 方法判断当前时区是否为夏令时</title>
      <link>https://imzsh.com/posts/20211022/</link>
      <pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20211022/</guid>
      <description>getTimezoneOffset() 方法 方法返回 UTC 时间和本地时间之间的时差，以分钟为单位。
 世界协调时间 (UTC) 是世界时间标准设定的时间, UTC 时间与 GMT 时间（格林威治时间）相同。
 测一下我所在时区和标准时区的时间差
function myDate () { var d = new Date(); var n = d.getTimezoneOffset(); console.log(n) } myDate(); // PS E:\demo&amp;gt; node 1.js // -480 也就是 480分钟（8个小时），北京时间是东八区，刚好与格林威治时间相差8个小时，这说明 getTimezoneOffset() 方法是很有效的。
接下来利用这个方法，判断一下当前时区是否为夏令时。
const time1 = new Date(2021, 0, 1); const time2 = new Date(2021, 6, 1); if (time1.getTimezoneOffset() != time2.getTimezoneOffset()) { console.log(&amp;#39;夏令时&amp;#39;); } else { console.log(&amp;#39;非夏令时&amp;#39;); } // PS E:\demo&amp;gt; node 1.</description>
    </item>
    
    <item>
      <title>使用js随机生成背景颜色</title>
      <link>https://imzsh.com/posts/20210929/</link>
      <pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210929/</guid>
      <description>先写一个简单的 html 页面出来
&amp;lt;style&amp;gt; /* ... */ &amp;lt;/style&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;html&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;css&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;js&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 通过 Math.random() 属性可以随机生成一个数字，然后通过转化为十六进制的方法进行处理，下面就是随机生成 6 位数字的代码，并进行转化的代码。
const randomHex = () =&amp;gt; `#${Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, &amp;#34;0&amp;#34;)}`; 可以在控制台输出看一下结果，随机生成了一个结果 #62113b。
接下来就需要将这个颜色传给上面的 li 标签，首先需要将所有的 li 遍历然后生成一个数组，可以使用 for 循环进行遍历。
var arr = document.getElementsByTagName(&amp;#39;li&amp;#39;), temp = []; for (var i = 0; i &amp;lt; arr.length; i++) { temp.push(arr[i].innerHTML); } 然后再对数组进行循环处理，每个 li 标签要要运行一遍随机生成颜色，并且传给自身。同样也是通过 for 循环进行操作。
var li = document.getElementsByTagName(&amp;#34;li&amp;#34;); for (var i = 0; i &amp;lt; li.</description>
    </item>
    
    <item>
      <title>hugo 如何使用 Cusdis ?</title>
      <link>https://imzsh.com/posts/20210916/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210916/</guid>
      <description>Cusdis 是一个界面清爽、注重隐私的轻量级 (~5kb gzip) 评论系统，可以很方便地与 React、Vue 或其他博客系统结合，并且还提供了一个后台来管理所有的评论。
由于 Cusdis 自称是 Disqus 的替代方案，因此它还支持一键从 Disqus 导入、支持邮件通知等功能。
官方地址: https://cusdis.com/
他通常是用于静态博客的一个第三方评论系统，但是官方文档没有提供如何在 hugo 中使用的参数，我也是报错了多次才琢磨出来。
1. 本地部署 根据提示，注册账号，然后 Add website ，建立一个仓库。
进入它，然后点击 setting。
Embed Code 会提供几行代码以及一些 api,复制他们。
data-app-id 是注册时自动生成的，注意保密，每个人都不一样。
&amp;lt;div id=&amp;#34;cusdis_thread&amp;#34; data-host=&amp;#34;https://cusdis.com&amp;#34; data-app-id=&amp;#34;xxxxxxxxx&amp;#34; data-page-id=&amp;#34;{{ PAGE_ID }}&amp;#34; data-page-url=&amp;#34;{{ PAGE_URL }}&amp;#34; data-page-title=&amp;#34;{{ PAGE_TITLE }}&amp;#34; &amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script async defer src=&amp;#34;https://cusdis.com/js/cusdis.es.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 将这些代码复制到本地主题的 comments.html 文件内（就是评论的那个模块，每个主题或许都不一样，注意分辨）。
这个时候如果你 hugo server 基本都会报错，因为没有修改 {{ PAGE_ID }} 等内容，这不是 hugo 官方提供的参数，按照我下面的格式，将 id, url, title 重写一下即可。
&amp;lt;div id=&amp;#34;cusdis_thread&amp;#34; data-host=&amp;#34;https://cusdis.</description>
    </item>
    
    <item>
      <title>使用jq做一个数字递增效果</title>
      <link>https://imzsh.com/posts/20210914/</link>
      <pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210914/</guid>
      <description>数字递增，顾名思义就是数字不断增加，数字递增的效果就是要一定时间内，让数字有一个增加的特效，一般用于强调某个内容。
用 jquery 也很好处理，大概就是下面这些。
 data-to 属性代表最后想要递增到的数值 data-speed 代表数值想要递增的过程时间  class=&amp;quot;num-ber&amp;quot; 和 id=&amp;quot;count-number&amp;quot; 按照这个填入。
&amp;lt;p&amp;gt; &amp;lt;span class=&amp;#34;num-ber&amp;#34; id=&amp;#34;count-number&amp;#34; data-to=&amp;#34;40&amp;#34; data-speed=&amp;#34;1000&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;+ &amp;lt;/p&amp;gt; 引入 jquery 之后再添加下面的 js 代码。
$.fn.countTo = function (a) { a = a || {}; return $(this).each(function () { var c = $.extend({}, $.fn.countTo.defaults, { from: $(this).data(&amp;#34;from&amp;#34;), to: $(this).data(&amp;#34;to&amp;#34;), speed: $(this).data(&amp;#34;speed&amp;#34;), refreshInterval: $(this).data(&amp;#34;refresh-interval&amp;#34;), decimals: $(this).data(&amp;#34;decimals&amp;#34;) }, a); var h = Math.ceil(c.speed / c.refreshInterval), i = (c.to - c.from) / h; var j = this, f = $(this), e = 0, g = c.</description>
    </item>
    
    <item>
      <title>掘金抽奖脚本</title>
      <link>https://imzsh.com/posts/20210913/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210913/</guid>
      <description>复制到 console 即可运行。
stime = Date.parse(new Date()); result = {} count = 0 flag = true while (flag) { obj = await fetch(&amp;#39;https://api.juejin.cn/growth_api/v1/lottery/draw&amp;#39;, { method: &amp;#39;POST&amp;#39;, credentials: &amp;#34;include&amp;#34;, headers: { &amp;#39;Content-type&amp;#39;: &amp;#39;application/json; charset=UTF-8&amp;#39; } }) .then(res =&amp;gt; { obj = res.json() return obj }) if (obj.err_no === 0) { if (obj.data.lottery_name in result) { result[obj.data.lottery_name] += 1 } else { result[obj.data.lottery_name] = 1 } count ++ } else { flag = false } } etime = Date.</description>
    </item>
    
    <item>
      <title>npm install 报错和取消本地代理的问题</title>
      <link>https://imzsh.com/posts/20210819/</link>
      <pubDate>Thu, 19 Aug 2021 11:15:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210819/</guid>
      <description>npm install下载依赖包的时候出现下面错误，请求失败。
npm ERR! FetchError: request to https://registry.npm.taobao.org/cnpm failed, reason: connect ECONNREFUSED 127.0.0.1:1181 调试过后发现是本地代理的问题，取消它。
npm config delete proxy npm config delete https-proxy npm install 成功运行，完毕。</description>
    </item>
    
    <item>
      <title>将数据库中的图片信息导出并调用</title>
      <link>https://imzsh.com/posts/20210709/</link>
      <pubDate>Fri, 09 Jul 2021 21:03:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210709/</guid>
      <description>接口链接：http://121.196.166.173/img/img.php 展示demo：http://121.196.166.173/img
 前言 为了写博客以及其他的一些用途，我使用服务器搭建了一个连接 github 仓库的上传网页，并且在数据库中记录上传的信息，比如缩略名、时间戳和图片链接。分别对应 GitHub 仓库中的图片，但是后期我发现在 GitHub 查看图片非常别扭，因此我打算写一个可展示图片的网页，把 GitHub 仓库中的图片通过链接展示出来，当然我们不可能一张张复制，还好有数据库。
看一下具体内容
写一个接口 很好，拥有我们需要的字段。事不宜迟，直接开动，下面是完成的接口代码。
&amp;lt;?php header(&amp;#39;Content-Type:application/json; charset=utf-8&amp;#39;); header(&amp;#34;Access-Control-Allow-Origin:*&amp;#34;); $servername = &amp;#34;localhost&amp;#34;; $username = &amp;#34;imgbed&amp;#34;; $password = &amp;#34;imgbed&amp;#34;; $dbname = &amp;#34;imgbed&amp;#34;; // 创建连接 $conn = new mysqli($servername, $username, $password, $dbname); // 检测连接 if ($conn-&amp;gt;connect_error) { die(&amp;#34;连接失败: &amp;#34; . $conn-&amp;gt;connect_error); } // imgmd5 名称转md5 // imguploadtime 上传时间戳 // imgurl 链接 // 上传 ip $sql = &amp;#34;select imgmd5,imguploadtime,imgurl,imguploadip from remote_imgs &amp;#34;; $result = $conn-&amp;gt;query($sql); if ($result-&amp;gt;num_rows &amp;gt; 0) { // 输出数据  while($row = $result-&amp;gt;fetch_assoc()) { $data[]=$row; } $json = json_encode($data,JSON_UNESCAPED_UNICODE|JSON_PRETTY_PRINT);//把数据转换为JSON数据.</description>
    </item>
    
    <item>
      <title>在 vue 中使用 axios 调用数据</title>
      <link>https://imzsh.com/posts/20210608/</link>
      <pubDate>Tue, 08 Jun 2021 21:02:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210608/</guid>
      <description>如何在 vue 中完成一次接口的调用？首选就是 axios，方便快捷又好用，支持各种 api ,封装也很方便。
先用 node 安装一下。
npm install axios 然后在 main.js 文件中引入。
import axios from &amp;#39;axios&amp;#39; import VueAxios from &amp;#39;vue-axios&amp;#39; Vue.use(VueAxios, axios) 以我的一个工程目录作为实例，看一下代码。
// ListThere.vue  // html 代码 ... &amp;lt;div&amp;gt;{{ info }}&amp;lt;/div&amp;gt; ... // js 代码 import axios from &amp;#34;axios&amp;#34;; export default { name: &amp;#34;ListThere&amp;#34;, data() { return { ... }; }, components: { ... }, methods: { ... }, mounted() { axios .get(&amp;#34;http://api.h-camel.com/api?mod=interview&amp;amp;ctr=issues&amp;amp;act=today&amp;#34;) .then((response) =&amp;gt; (this.</description>
    </item>
    
    <item>
      <title>宝塔如何实现进程守护？</title>
      <link>https://imzsh.com/posts/20210530/</link>
      <pubDate>Sun, 30 May 2021 11:37:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210530/</guid>
      <description>为了方便写一些东西，pc端和手机端都可以同步，我用leanote搭建了一个在线笔记，但是必须在服务器后台运行一个指令
base run.sh 不然就访问不了端口，我也不可能时刻在终端保持指令运行，所以就需要把指令放在服务器后台，让它自己保持运行，刚好有这么一插件 Supervisor管理器 2.2 。
是一款免费的Python插件，点击下载即可，然后进入设置。
点击添加进程守护。
把进程环境目录和启动命令都填好，名称就随便写个自己能分辨出来的就行，最后点击确定。
让它一直保持启动状态就可以，其他的不用动，以后就不用打开服务器终端输入指令了，直接在浏览器访问端口，就可以访问网页。
如果为了更方便，做个反代处理即可。</description>
    </item>
    
    <item>
      <title>css 中 fixed 定位属性和动画的冲突问题及解决方法</title>
      <link>https://imzsh.com/posts/20210527/</link>
      <pubDate>Thu, 27 May 2021 21:42:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210527/</guid>
      <description>1.问题  css 中使用动画属性会和同标签下的fixed属性冲突，导致定位失效，那么该如何解决他呢？
 2.分析 简单说一下问题产生的背景，昨天夜里我想给我的博客页面做一个简单的动画，浏览器刷新的时候从下往上渐现的效果，代码如下：
/* index-container类名是页面的主体部分 */ .index-container { opacity: 0; animation-name: index; animation-duration: 0.7s; animation-fill-mode: forwards; } /* 一个简单的动画实现 */ @keyframes index { 0% { transform: translateY(100px); opacity: 0; } 100% { transform: translateY(0); opacity: 1; } } 运行之后发现，动画可以很好的显示，但是当我翻阅文章详情的时候发现，目录固定失效了。
按照原来的设置是当页面往下滑动的时候，目录会紧贴浏览器的顶部，方便跳转和查看目录，但是现在它已经不能紧贴了。看一下浏览器设置，属性确实生效了，但是页面并没有显示我们想要的结果。
之前我写目录固定事件的时候用的是 scroll 事件，然后昨天写动画，绑定的 onload 事件，我初步判断是两个 window 冲突了，导致第二个失效，所以我就改了一种写法，用 addEventListener 事件监听执行他们，但最终无论怎么写，目录固定始终不能生效。
昨天熬得太晚了，就没管它放在那了，今天一早我就去张鑫旭的网站查了一下，果然有这么一个问题。
参考文章：https://www.zhangxinxu.com/wordpress/2015/05/css3-transform-affect/
但是文章只是介绍了问题产生的原因，并没有明确给出一个好的解决办法。
3.方法 虽然没有明确的方法，但是给了我一个思路，因为动画中的一些属性，比如 scale、translate 等，会造车容器的宽高重新计算，而 fixed 属性则依赖于规定的一个像素值，所以当执行动画的时候，页面的高度发生了变化，所以 fixed 不能安心的执行自己的任务了。
原因找到了，方法自然而然就出来了，看图（图很丑，手画的，能理解意思就行）
这是我最开始的布局，我将动画绑定给 红色框 的容器了，而目录就在红色框内，所以失效。
现在我重新布局一下，
目录依旧处于侧边，但是我将他和通常的侧边栏分开成两个容器了，现在我把动画绑定给 主体部分 和 侧边栏 ，这样目录就和绑定动画的标签分开了。</description>
    </item>
    
    <item>
      <title>Oracle数据库安装教程（超详细）</title>
      <link>https://imzsh.com/posts/20210513/</link>
      <pubDate>Thu, 13 May 2021 14:51:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210513/</guid>
      <description>转载自：https://www.moeor.com/26.html
 前言 本教程讲解Oracle Database Express Edition (XE) Release 11.2.0.2.0 (11gR2)版本的下载安装教程！
该版本是一个便携式安装版本，直接安装，就可以了，非常方便。
由于官网的更新，找不到以前那种提供客户端服务端的安装了，所以这里不再讲解！
准备 访问Oracle官网下载该版本数据库。下载时需要登录账号，可百度搜索共享的Oracle账号！
下载地址：https://www.oracle.com/database/technologies/xe-prior-releases.html
选择适合自己的系统版本，本文以Win10为例。建议使用下载工具或者科学上网，下载更快！
安装Oracle 下载后解压缩，双击打开文件夹中的 “setup.exe&amp;quot; 安装程序，等待程序启动，进入安装程序。
开始安装，单击“下一步”
选择“我接受本许可协议中的条款”，然后单击“下一步”。
这一步是选择安装位置，由于文件程序比较大，建议安装D盘。新建一个Oracle文件夹，点击“浏览”，选择文件夹，注意查看目标文件夹，文件路径，然后单击“下一步”。
设置数据库的登录口令，即数据库密码，建议简单一点，比如：root，然后单击“下一步”。
单击“安装”，开始安装。
安装过程比较慢，耐心等待安装完成！
安装完成后，单击“完成”，即Oracle 11gR2已经安装完成了。
安装完成会在桌面新建一个图标，打开可以通过以web形式访问数据库。
双击打开，可能会弹出以下错误提示，这个是没有影响的，安装完成后重启一点电脑就可以了！
验证数据库 选择桌面生成的图标
鼠标右键打开文件所在位置，弹出文件夹，往上翻，在文件夹中找到bin文件夹。
双击，进入bin文件夹，往下翻，找到sqlplus.exe程序。
双击运行。
输入用户名：system （统一默认都是system），回车
输入口令：（刚才安装时设置的口令），口令输入是不显示的，直接回车就行了。
若出现 “连接到: Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production” 语句时，则安装成功！</description>
    </item>
    
    <item>
      <title>Typecho博客搭建及优化教程(详细)</title>
      <link>https://imzsh.com/posts/20210511/</link>
      <pubDate>Tue, 11 May 2021 22:29:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210511/</guid>
      <description>1.前言 本文从Typecho 简介开始讲解，其中包括服务器的选择，以及域名注册，服务器系统选择 ，宝塔安装，环境配置，Typecho安装包括中间的防采坑注意事项，为您提供完整的保姆级搭建流程，请珍惜哦！
如果不喜欢前面的啰嗦讲解，请跳过，直接从宝塔安装开始。
不喜勿喷，谢谢！
2.Typecho简介 Typecho 基于PHP5开发，支持多种数据库，是一款内核强健﹑扩展方便﹑体验友好﹑运行流畅的轻量级开源博客程序。
Typecho 非常简洁，仅仅 7 张数据表，加上不足 400KB 的代码，就实现了完整的插件与模板机制。超低的 CPU 和内存使用率，足以发挥主机的最高性能。
原生支持 Markdown 语法，易读更易写。支持 BAE/GAE/SAE 等各类云主机，即使面对突如其来的高访问量，也能轻松应对。
Typecho 的默认模板和后台，全部采用了响应式设计。所以Typecho的大多数自制模板，都采用了自适应设计。
现在Typecho 拥有很多用户，完整的生态，各种功能插件和简洁优美的主题，是做博客的不二选择，相信你会喜欢上她简洁的风格！
3.准备 服务器+域名
搭建Typecho 博客需要使用服务器或者虚拟机，最近也看到一篇使用Vercel+Mysql搭建Typecho的文章，但是这种是使用外部Mysql服务的 ，相比使用服务器或者虚拟机这种还是不太方便配置和管理的。使用服务器相比虚拟机会更加的好用。
**注：**本文只讲解服务器的搭建流程，虚拟机请参考！
**服务器选择：**推荐去腾讯云或阿里云,有学生机（9元/月）可供选择，腾讯云还是25岁以下免学生认证的，学生价续费三次，所以有条件可以选择1年购买和续费，腾讯的还有免费升配置，，阿里云的学生机下架了，但是也可以买为新用户提供的，建议选择 轻量应用服务器，1h2g的配置完全够用，流量也完全够用。
腾讯云：https://cloud.tencent.com/act/campus
阿里云：https://developer.aliyun.com/plan/grow-up
如果你买不了这种，也可以去其他服务商买新用户优惠的服务器，建议选择大厂。
选择服务器要看下地区，如果是大陆地区的服务器，需要去其对应的服务商进行域名备案，否者你无法使用，如果是香港地区或者国外的服务器，则不需要进行备案。
**注：**阿里和腾讯这两种轻量应用服务器都是需要 备案的，如果嫌麻烦或者不想备案，可选择其他地区的服务器！
备案操作有些复杂，也需要好几天的时间，但是备案也有备案的好处，比如使用国内的CDN加速等。另请仔细参考各服务商提供的流程，要注意看清备案流程上的注意事项，防止备案驳回浪费时间。
相比国外和香港的服务器，使用大陆的服务器在国内的访问速度是最好的，当然如果你搞外国业务当我没说。。。
**域名选择：**域名选择很简单，去各大服务商注册一个就完事了，喜欢什么就注册什么，但是如果你要备案使用大陆服务器，一定不要注册不支持备案的域名，当然绝大多数都是支持备案的。另各大服务商也有新用户注册域名优惠活动，在百度仔细找一下就行了。 腾讯云：https://cloud.tencent.com/act/domainsales
阿里云：https://wanwang.aliyun.com/domain
华为云：https://activity.huaweicloud.com/domain1.html
下面开始搭建流程：
4.LNMP环境 首先我们要搭建的就是LNMP环境，LNMP代表的就是：Linux系统下Nginx+MySQL+PHP这种网站服务器架构。
Linux 是一类Unix计算机操作系统的统称，是目前最流行的免费操作系统。代表版本有：debian、centos、ubuntu、fedora、gentoo等。
Nginx 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。
Mysql 是一款安全、跨平台、高效的，并与 PHP、Java 等主流编程语言紧密结合的数据库系统。
PHP 是一种在服务器端执行的嵌入HTML文档的脚本语言。
当然如果你不喜欢使用Nginx，或者Mysql，请自行更换其它的，这里不过多介绍！
Linux系统的话，本文使用Centos 8系统讲解。
搭建LNMP环境，我们可以选择自行下载对应的安装包，然后在Centos系统中，安装Nginx，Mysql，PHP等，这种纯动手的方式，非常麻烦和复杂，在后期进行多网站管理和配置HTTPS证书，以及网站伪静态配置时非常麻烦。
所以本文讲解使用宝塔面板来进行安装部署环境！
5.宝塔是什么 宝塔面板是一款服务器管理软件，支持windows和linux系统，可以通过Web端轻松管理服务器，提升运维效率。例如：创建管理网站、FTP、数据库，拥有可视化文件管理器，可视化软件管理器，可视化CPU、内存、流量监控图表，计划任务等功能。
宝塔面板拥有极速方便的一键配置与管理，可一键配置服务器环境（LAMP/LNMP/Tomcat/Node.js），一键部署SSL，异地备份；提供SSH开启关闭服务，SSH端口更改，禁ping，防火墙端口放行以及操作日志查看；CPU、内存、磁盘IO、网络IO数据监测，可设置记录保存天数以及任意查看某天数据；
计划任务可按周期添加执行，支持SHELL脚本，提供网站、数据库备份以及日志切割，且支持一键备份到又拍云存储空间，或者其他云存储空间里；通过web界面就可以轻松管理安装所用的服务器软件，还有实用的扩展插件；集成方便高效的文件管理器，支持上传、下载、打包、解压以及文件编辑查看。
进入搭建正题：
6.安装宝塔 选择服务器时，选择系统镜像，不要选择服务商提供的应用镜像，操作系统选择Centos，版本的话7和8都可以。当然你也可以选择其他系统，，，</description>
    </item>
    
    <item>
      <title>网站引入iframe视频，如何实现高度自适应?</title>
      <link>https://imzsh.com/posts/20210509/</link>
      <pubDate>Sun, 09 May 2021 18:50:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210509/</guid>
      <description>我想很多小伙伴在写博客的时候都能遇到一个令人头疼的问题，某一篇文章想用 iframe 引入一个外链视频，但是大小总是有问题，宽度可以固定到 100% ，但是高度比如用实际高度来表示，比如 100px, 200px，诸如此类。
但是问题来了，在不同的页面宽度下，视频的高度是一致的，就会导致一个很麻烦的问题,
看下面两个图，
pc端
移动端
很明显，在pc端正常显示的视频，放到移动端高度就错位了，很不美观。
解决这个问题，可以同媒体查询，但是显然费时费力，还不那么完美。
其实很简单，只需要不到10行代码即可完美实现。
  引入 jq ，（一般网站默认都有这个文件）
  加上一段 js 代码，最好放在网站底部， &amp;lt;/body&amp;gt; 前即可。
  $(&amp;#39;iframe&amp;#39;).wrap(&amp;#39;&amp;lt;p class=&amp;#34;iframe&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39;) 在css文件的底部加上:  .iframe{ position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; } .iframe iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } 这个时候再访问带有 iframe 视频的网页，不管宽度如何变化，高度可以随视频自适应。
例如这个网页，可以看一下效果: https://shuxhan.com/posts/2021-05-07-breathing-wild/</description>
    </item>
    
    <item>
      <title>基于 docsify 搭建一个文档</title>
      <link>https://imzsh.com/posts/20210421/</link>
      <pubDate>Wed, 21 Apr 2021 20:19:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210421/</guid>
      <description>一、搭建 docsify 是一个类似 vuepress, gitbook 等静态文档程序，但是对比之前，个人还是喜欢 docsify 的风格和源码。不想要那么多附带的功能，能满足写文章，目录的功能就行了。
点击查看demo.
打开终端输入指令，把本地环境搭建起来：
npm install docsify-cli -g 初始化文档：
docsify init ./docs 本地运行：
docs serve 然后在浏览器打开 localhost:3000 就可以查看了。
二、页面 我觉得最基本的页面就三个
 _navbar.md  导航栏
* [关于](/) 然后在 index.html 调用。
window.$docsify = { ... loadNavbar: true, ... } 如图：
_sidebar.md  侧边栏
* [基于docsify搭建一个文档](基于docsify搭建一个文档.md) 在 index.html 调用。
window.$docsify = { ... loadSidebar: true, ... } 如图：
README.md  主页
## about  博客地址：[https://shuxhan.com](https://shuxhan.com) 作者：shuxhan 时间：2021.04.20 本文档作为博客的文章备份，如果对文章有一些其他的评论可以直接点击链接到原地址。 如图：</description>
    </item>
    
    <item>
      <title>我的 python 学习笔记</title>
      <link>https://imzsh.com/posts/20210401/</link>
      <pubDate>Thu, 01 Apr 2021 16:21:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210401/</guid>
      <description>之所以学习 Python ，本意是想写一些脚本之类的程序，用来在浏览器爬一些自己想要的文字，图片等资料，这些程序其实 GitHub 蛮多的，但奈何我对后端的语言一窍不通，直接拿过来给我用我都不会。
因此就萌生了先学习 Python 基础知识的想法，一直听说廖雪峰的 Python 教程写的不错，这次趁着这个机会要好好研读一番。也没想说用的多牛逼，至少希望能为自己浅薄的技术栈再增加一点光彩，毕竟我也曾梦想成为一个全栈开发。
下载安装完 Python 环境,就开始学习吧！
运行我的第一个python程序 print(&amp;#39;hello,world&amp;#39;) 数据类型 在 Python 中，能直接处理的数据类型有几种，整数、浮点数、字符串、布尔值、空值、变量。
这与其他语言其实差别并不大，数据类型基本都是相似的，大概只有变量有自己的特性，所以我单独拿出来记录一下。
变量 python 是一门动态语言，在赋值时可以不断改变，比如：
a = 123 print(a) # 终端输出数值 123 a = &amp;#39;abc&amp;#39; print(a) # 终端输出字符串 abc 这是允许的，而在 Java 中则不行，它是一门静态语言，如果多次赋值会报错。相对来说，动态语言更灵活，当然，各有利弊罢了。
并且在赋值上面有一个逻辑顺序，比如定义一个 a = &#39;a&#39; 的变量。在 Python 中其实走了两步，先创造了一个字符串 a ，然后将这个字符串赋值给变量 a 。
其实这在数学上是有些反逻辑的，x = x + 2 这个计算是行不通的在数学上，但是在计算机中，先计算 x + 2 ，然后将其赋值给左侧的 x ，这是计算机的逻辑。
x = 1 x = x + 2 print(x) # 3 其实很多计算机语言都是如此，比如我们所熟知的 js 等等。</description>
    </item>
    
    <item>
      <title>实时监听页面的变化</title>
      <link>https://imzsh.com/posts/20210326/</link>
      <pubDate>Fri, 26 Mar 2021 14:24:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210326/</guid>
      <description>问题产生于需求，因为项目需要适配pc和移动端多套布局，所以某些元素在特定的宽度下会产生错位的现象。
如果是在css中，可以很好的判断，使用媒体查询可以实时检测页面的宽度，从而给予标签不同的属性。
@media (max-width:768px){ ... } 在js下可以使用下面这种方法
window.addEventListener(&amp;#39;load&amp;#39;, function() { window.addEventListener(&amp;#39;resize&amp;#39;, function() { console.log(window.innerWidth) var w = window.innerWidth; ... } }) }) 具体操作的细节可以尝试一下，还是很不错的一个方法，同时注意 window ，因为这是个例子我就直接写了，实际编码中，慎用 window 事件。</description>
    </item>
    
    <item>
      <title>ajax 和 js 事件的执行顺序</title>
      <link>https://imzsh.com/posts/20210322/</link>
      <pubDate>Mon, 22 Mar 2021 15:12:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210322/</guid>
      <description>有一个需求，滚轮滚动到相应位置的时候执行当前的动画，这个动画在footer里面，而网页的主体通过ajax进行渲染，我在js里面调用ajax渲染数据，然后再获取主体的高度，滚动到该高度的时候执行动画。
本地测试了一下没什么问题，该有的效果都有了。放在服务器上测试发现无论怎么写，都是先获取主体的高度，然后才进行数据的渲染。那么必然高度是一个极小的值，不符合我想要的属性。
我大致想了两种解决办法，均以失败告终，本地是ajax先执行，服务器是js先执行。
 让获取高度的事件时间延时500ms，发现最后获取不到事件了； 将该事件写在ajax的success回调里面，结果是只有打开网页第一次能够成功，然后不管刷新多少次均无效，事件被屏蔽，所以方法二也被废除；  最后我想到了，ajax不就是一种异步方法，我将其改为同步不就行，先让ajax执行完在执行js事件。
async: false, 我在ajax里面写了async这个方法，false 意思是将其默认为同步获取数据，很好，回到服务器打开控制台，发现是先渲染了数据，才获取了主体的高度，问题得以解决。
 当然这样做有弊端的，如果接口出问题，ajax渲染失败，那么整个网页的js都将执行不了。不过我想真到了数据都渲染不出的地方，访问网页就没有意义了，所以最后我采用了这种方法。
 </description>
    </item>
    
    <item>
      <title>ajax拼接模版字符串的几种方法</title>
      <link>https://imzsh.com/posts/20210322/</link>
      <pubDate>Mon, 22 Mar 2021 14:54:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210322/</guid>
      <description>起因是因为IE10不兼容es6，所以引发了一系列的问题。
 一 使用ajax拼接字符串有很多方法，最简单的莫过于使用es6的语法中的关键符号，
str += `&amp;lt;li class=&amp;#34;wrap-item&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;pic-wrap&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;pic&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;pic-son&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34; ` + item.link + `&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34; ` + item.pic+ `&amp;#34; alt=&amp;#34;缩略图&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;pic-main&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;pic-title&amp;#34;&amp;gt; &amp;lt;span&amp;gt;编号：&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt; ` + item.title + ` &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;pic-guide&amp;#34;&amp;gt; ` + item.guide + ` &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;pic-link&amp;#34; id=&amp;#34;picLink&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34; ` + item.link + ` &amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;预览&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/li&amp;gt; ` 可以很快的把模版字符串写好，但是正因为它是es6的新特性，因此对于低版本的浏览器兼容性不太好，报错无效字符。</description>
    </item>
    
    <item>
      <title>用ajax请求获取数据</title>
      <link>https://imzsh.com/posts/20210319/</link>
      <pubDate>Fri, 19 Mar 2021 13:01:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210319/</guid>
      <description>通过jquery进行ajax请求数据是一种较为简便的方式，我简单写了一个本地的data.json文件，然后用get请求数据，下面是部分代码
// ajax 请求获取数据 function picShow(){ var str = &amp;#39;&amp;#39;; $.ajax({ url:&amp;#39;./js/data.json&amp;#39;, type:&amp;#39;get&amp;#39;, dataType:&amp;#39;json&amp;#39;, success:function(data){ console.log(&amp;#39;success&amp;#39;) }, error: function() { console.log(&amp;#39;error&amp;#39;) } }) } picShow(); 但是这样做有一个弊端，无法在本地预览，因为浏览器禁止客户端直接获取本地数据，这也算一个跨域问题了，不过这也是为了保证用户的安全。当然这对前端来说很不爽！
其实解决的方法也很简单，通过node服务，用live server在本地跑一下，就可以让ajax获取数据，当然还有其他更好的解决方法，或者直接在服务器跑，通过jsonp等等。
live server 不明白的可以百度看看，也是一个技巧。</description>
    </item>
    
    <item>
      <title>IE10的兼容性处理</title>
      <link>https://imzsh.com/posts/20210318/</link>
      <pubDate>Thu, 18 Mar 2021 22:15:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210318/</guid>
      <description>  IE10不支持箭头函数，写js的时候慎用。
  IE10下对js的语法要求严格，正常参数后如果没有多余的代码，写个,会报错，如果加了删掉就OK，Chrome下不会产生影响。
  zoom属性能不用，尽量别用。我在Chrome使用zoom进行大小调整，放到IE10运行，整个页面都错位了，找半天才想起来之前给一个容器设置了zoom: 1.1;，真是让人头大。
  IE10下img标签自带白边，在默认样式里面设置border: none;即可。
  img { border: none; }  IE10能兼容大部分的html5新标签，唯独不能兼容 main。
  box-shadow 阴影属性其实IE10是支持的，但是需要注意语法问题，在普通浏览器color可以用rgba,#等写法，但是在IE10下，只能通过#000000写法，#和六位的颜色标记，不可以简写，否则不生效。
  IE10不兼容es6新语法。
  </description>
    </item>
    
    <item>
      <title>window.scroll 方法只能存在一次该如何解决？</title>
      <link>https://imzsh.com/posts/20210317/</link>
      <pubDate>Wed, 17 Mar 2021 21:55:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210317/</guid>
      <description>页面监听是我们经常用的一个功能，下面两个段代码表示两个事件，分别在页面滚动500px和1000px的时候触发，在代码中使用了箭头函数。
window.addEventListener(&amp;#39;scroll&amp;#39;, () =&amp;gt; { var scrollTop = document.documentElement.scrollTop if (scrollTop &amp;gt; 500) { console.log(&amp;#39;滚动了500px&amp;#39;) } }) window.addEventListener(&amp;#39;scroll&amp;#39;, () =&amp;gt; { var scrollTop = document.documentElement.scrollTop if (scrollTop &amp;gt; 1000) { console.log(&amp;#39;滚动了1000px&amp;#39;) } }) 但是后面又要求代码兼容到IE10，就不能采用这种写法了。然后我就想使用原生的function写法。
window.onscroll = function() { // ... } 在用的过程中我发现，如果只有一个window.scroll没有任何问题，但是如果有多个window.scroll，后面的就不会生效。
那么如何解决这个问题呢？
window.scroll只能存在一次，第一个会生效，后面的不生效，可以通过js处理这个问题。
function addEvent(type, toDo) { if (window.attachEvent) { window.attachEvent(&amp;#39;on&amp;#39; + type, function() { toDo.call(window) }) } else { window.addEventListener(type, toDo, false) } } addEvent(&amp;#39;scroll&amp;#39;, function(){ console.log(&amp;#39;第一次调用window.scroll&amp;#39;) } addEvent(&amp;#39;scroll&amp;#39;, function(){ console.</description>
    </item>
    
    <item>
      <title>IE10下`,`符号不能留白</title>
      <link>https://imzsh.com/posts/20210316/</link>
      <pubDate>Tue, 16 Mar 2021 10:29:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210316/</guid>
      <description>$(&amp;#34;#test&amp;#34;).click(function () { $(&amp;#39;html,body&amp;#39;).animate({ &amp;#39;scrollTop&amp;#39;: &amp;#39;0&amp;#39; }, 500,) }) 这行代码使用的是jquery的写法，一个500毫秒的动画，这样写在Chrome浏览器等没问题，可以正常运行。
但是今天在写项目的过程中，要求代码兼容到IE10，没办法，被迫在IE浏览器下运行，结果发现这行代码会报错。这是怎么回事呢？
简单分析一下，这有点类似js中定时器的写法，setimeout，两个参数，分别代表指定的时间，和定时时间。
而animate是动画的属性，这个时间共花费500毫秒执行完毕。但是这个不是重点，为什么会报错呢？
这时候我注意到500后面的,，我突然想到一种可能，先把,删掉。果然不出我所料。控制台不会报错了。
我猜测，这是由IE的机制引起的，浏览器识别到,的时候，会自动默认后面跟有语句，但是如果空着不写，与浏览器预期的后果不同，就会产生报错。可能IE内核要求也比较严格吧。</description>
    </item>
    
    <item>
      <title>怎么让 css3 里面的动画属性看起来更流畅？</title>
      <link>https://imzsh.com/posts/20210314/</link>
      <pubDate>Sun, 14 Mar 2021 07:31:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210314/</guid>
      <description>ps：先说点题外话，因为工作的原因很久没更新博客了，最近也是告一段落，处理一了一些事情之后可以安心坐下来，把我的博客重新整理一下。
今天要讲的是 css3 的一个新属性 animation，也算是一个回顾吧，我只是将平时如何使用，以及一些技巧分享出来。如果想学习更基础的内容，可以点击链接：https://www.runoob.com/css3/css3-animations.html，网上类似的教程还是蛮多的。
这篇文章并不细讲动画的基础属性，而是稍微扩展一个话题：怎么让 css3 里面的动画属性看起来更流畅？
当然在讲之前还是要简单介绍一下 animation 基本属性。
animation 属性 animation 属性有下面几个值：
 @keyframes | 动画本身（最重要的） animation-name | 动画的名称 animation-duration | 动画所经历的时间 animation-fill-mode | 当属性为 forwards 时，动画停留在最后一帧  动画主要可以用于一些官网特效，或者自适应的布局。
如何写一个最基本的动画 动画就是由一个状态到另一个状态的过程，比如从左到右的一个移动过程。
首先要先了解各个属性具体的作用是什么，就拿从白到黑举个例子吧，首先写一个 @keyframes 的动画过程。
@keyframes leftright { 0% { transform: translateX(0); } 100% { transform: translateX(100px); } } 这段代码的意思就是有一个名为 leftright 的动画，将容器从左到右移动了 100px。
然后我们进一步补全这个动画。
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;动画&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .demo { width: 100px; height: 100px; background: #000; animation-name: leftright; animation-duration: 1s; } @keyframes leftright { 0% { transform: translateX(0); } 100% { transform: translateX(100px); } } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;demo&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 然后我们到浏览器跑一下这个页面试试看，可以看到一个黑色的方块从左右移动了 100px 的距离，总计1秒完成。</description>
    </item>
    
    <item>
      <title>chrome浏览器无法显示12px以下的字体</title>
      <link>https://imzsh.com/posts/20210226/</link>
      <pubDate>Fri, 26 Feb 2021 22:38:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210226/</guid>
      <description>最近正在面试，遇到了很多有意思的东西，比如今天，在面试前先做了一套面试题，其中有这么一道题，觉得挺有意思，之前也没见过，就打算记录下来：
&amp;lt;!-- chrome浏览器12px字体大小以下无法显示，均显示为12px，应该怎么解决。 --&amp;gt; 我确实有点蒙，在之前写代码的时候，没有遇到过这样的情况，不过既然这样问了，就得想出解决的办法。
首先我想到之前的一个问题，0.5px 的边框该如何实现，通过 scale(0.5) 可以实现，这是 css3 新属性。
所以当时我就写了通过 transform:scale() 可以实现。不过后续在面试的中，面试官也没有提及这些问题。
 回到家之后，吃完饭坐在电脑旁，正准备逛一逛 github ，突然想起来了这么一个问题，就自己测试了一遍：
&amp;lt;div style=&amp;#34;font-size: 13px;&amp;#34;&amp;gt; 测试 &amp;lt;/div&amp;gt; &amp;lt;div style=&amp;#34;font-size: 12px;&amp;#34;&amp;gt; 测试 &amp;lt;/div&amp;gt; &amp;lt;div style=&amp;#34;font-size: 11px;&amp;#34;&amp;gt; 测试 &amp;lt;/div&amp;gt; 竟然真的存在这样的问题，Chrome 12px 以下的字体无法正常显示，均显示为12px。
然后我用 scale 设置了一下属性，
&amp;lt;div style=&amp;#34;font-size: 13px;&amp;#34;&amp;gt; 测试 &amp;lt;/div&amp;gt; &amp;lt;div style=&amp;#34;font-size: 12px;&amp;#34;&amp;gt; 测试 &amp;lt;/div&amp;gt; &amp;lt;div style=&amp;#34;font-size: 11px;transform: scale(0.5);&amp;#34;&amp;gt; 测试 &amp;lt;/div&amp;gt; 字体确实可以再次缩小到自己想到的程度，但是存在一些弊端，所有带有长度的属性均被缩小，比如图中的div的长度，本来默认是 100% ，但是显示只有原来的一半了。
虽然存在这么个问题，但是按照我自己的预估，平时我们浏览的网站基本没有低于12px大小的字体吧！反正我是没有遇到过，我估计面试题也是想考验我们对一些生僻知识的处理吧，不过也不算生僻，前有0.5px，后有12px，其实都大同小异。
在遇到这个问题的时候，确实可以通过 scale() 处理一下，然后在认真设置其他属性，尽量避免更多的弊端。</description>
    </item>
    
    <item>
      <title>使用宝塔面板安装 autoPicCdn 图床工具</title>
      <link>https://imzsh.com/posts/20210225/</link>
      <pubDate>Thu, 25 Feb 2021 22:41:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210225/</guid>
      <description>很多小伙伴在做个人网站或者博客时，总能用到各种各样的图床工具，毕竟在写文章的时候需要插入一些图片，我也不例外，来盘点一下之前用的工具，
 最开始是找一些免费的图床网站，比如sm.ms等，但是后来为了安全性和稳定性考虑放弃了这种。 然后是在 github，gitee 仓库存储的（缺点就是github访问速度有些尴尬，gitee其实挺好的，但时用起来怪怪的） 阿里云oss储存桶（挺好使的，搭配picgo软件，一年也才9.9，但是链接很尴尬，直接下载，无法右键访问图片，搜过了解决办法，嫌太麻烦就搁置了，至今在那放着） 后来在自己的服务器建一个网站，把图片放进去，使用的时候直接引用链接（缺点就是上传太麻烦，然后就是图片太占内存了，影响服务器的性能） 然后就是今天的重头戏，autoPicCdn ，一款开源软件  也是基于github实现图床功能，后来才知道可以用 jsdelivr 给资源进行加速，autoPicCdn 就是基于这样的功能实现。
今天就讲讲用宝塔面板配置 autoPicCdn 的流程吧！
准备工作  进入 github 仓库下载资源到本地。 https://github.com/yumusb/autoPicCdn  在 github 建立一个新的仓库，自由命名，我的是 shuxhan/pic-cdn ，简单易懂 去这个页面 https://github.com/settings/tokens生成一个有写权限的 token（repo：Full control of private repositories 和write:packages 前打勾，然后点击确定，会生成一个 token码，记住它，最好复制到你的记事本，不然一刷新网页就不会再显示了  然后解压。
上传到服务器 先利用自己的域名添加一个新的站点，比如我使用的是 img.shuxhan.com ，然后建立数据库。
站点建立成功后，进入目录将默认生成的文件删除，然后点击上传，找到刚才解压的文件，点击上传即可。
配置文件 找到目录中的 up.php 配置文件，
将下面两个地方配置好，具体的内容在代码里。
//必选项 define(&amp;#34;TYPE&amp;#34;,&amp;#34;GITHUB&amp;#34;);//选择github //define(&amp;#34;TYPE&amp;#34;,&amp;#34;GITEE&amp;#34;);//选择gitee，如果使用gitee，需要手动建立master分支，可以看这里 https://gitee.com/help/articles/4122  define(&amp;#34;USER&amp;#34;,&amp;#34;shuxhan&amp;#34;);//你的GitHub/Gitee的用户名  define(&amp;#34;REPO&amp;#34;,&amp;#34;pic-cdn&amp;#34;);//必须是上面用户名下的 公开仓库  define(&amp;#34;MAIL&amp;#34;,&amp;#34;shuxhan@163.com&amp;#34;);//邮箱无所谓，随便写  define(&amp;#34;TOKEN&amp;#34;,&amp;#34;971b0a96ff5af545d5fe081f829cf5542007e70b&amp;#34;); // Github 去这个页面 https://github.com/settings/tokens生成一个有写权限的token（repo：Full control of private repositories 和write:packages前打勾） // gitee 去往这个页面 https://gitee.</description>
    </item>
    
    <item>
      <title>typecho 博客小表情无法显示问题</title>
      <link>https://imzsh.com/posts/20210204/</link>
      <pubDate>Thu, 04 Feb 2021 19:47:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210204/</guid>
      <description>typecho 博客建立完成之后，会发现如果插入一些小表情，页面渲染完之后，表情不会显示，并且表情之后的内容全部消失，导致体验感很差。
表情无法显示的原因是 uft-8 编码的问题，无法识别小表情，需要将其改成 utf8mb4
第一步，进入数据库 首先登陆博客后台的数据库，然后点击 sql ，输入下列代码：
alter table typecho_comments convert to character set utf8mb4 collate utf8mb4_unicode_ci; alter table typecho_contents convert to character set utf8mb4 collate utf8mb4_unicode_ci; alter table typecho_fields convert to character set utf8mb4 collate utf8mb4_unicode_ci; alter table typecho_metas convert to character set utf8mb4 collate utf8mb4_unicode_ci; alter table typecho_options convert to character set utf8mb4 collate utf8mb4_unicode_ci; alter table typecho_relationships convert to character set utf8mb4 collate utf8mb4_unicode_ci; alter table typecho_users convert to character set utf8mb4 collate utf8mb4_unicode_ci; 直接复制，然后点击右下角的执行</description>
    </item>
    
    <item>
      <title>掘金个人主页头像旋转效果</title>
      <link>https://imzsh.com/posts/20210203/</link>
      <pubDate>Wed, 03 Feb 2021 19:43:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210203/</guid>
      <description>在浏览掘金社区的时候，发现一个很有意思的小彩蛋，在个人主页将鼠标悬浮在头像上，会不停的加速旋转，我感觉挺有意思，f12 看看这个样式怎么写的，发现用到了 css3 的相关技术。
下面是具体代码，img 是头像元素，直接写在 hover 中即可。
img:hover { transform: rotate(666turn); transition-delay: 1s; transition-property: all; transition-duration: 59s; transition-timing-function: cubic-bezier(.34,0,.84,1); } ps：今天是2021年2月4号，农历腊月二十三，传统的小年，祝朋友们小年愉快。不知不觉，快过年了。</description>
    </item>
    
    <item>
      <title>ES5 和 ES6 的区别？</title>
      <link>https://imzsh.com/posts/20210120/</link>
      <pubDate>Wed, 20 Jan 2021 19:58:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210120/</guid>
      <description>一、javascript 由三部分组成 1.ECMAScript（核心） 它规定了语言的组成部分：法语，类型，语句，关键字，操作符等等。
2.DOM（文档对象模型） DOM 把整个页面映射为一个多层节点结果，开发人员可借助DOM提供的API，轻松地删除、添加、替换或修改任何节点。
3.BOM（浏览器对象模型） 支持可以访问和操作浏览器窗口的浏览器对象模型，开发人员可以控制浏览器显示的页面以外的部分。
二、什么是ES5？ 作为ECMAScript第五个版本（第四版因为过于复杂废弃了），浏览器支持情况可看第一副图，增加特性如下。
1.strict模式 严格模式，限制一些用法，&amp;lsquo;use strict&amp;rsquo;;
2.Array增加方法 增加了every、some 、forEach、filter 、indexOf、lastIndexOf、isArray、map、reduce、reduceRight方法
PS： 还有其他方法 Function.prototype.bind、String.prototype.trim、Date.now
3.Object方法  Object.getPrototypeOf Object.create Object.getOwnPropertyNames Object.defineProperty Object.getOwnPropertyDescriptor Object.defineProperties Object.keys Object.preventExtensions / Object.isExtensible Object.seal / Object.isSealed Object.freeze / Object.isFrozen  PS：只讲有什么，不讲是什么。
2.什么是ES6? ECMAScript6在保证向下兼容的前提下，提供大量新特性，目前浏览器兼容情况如下：
ES6特性如下：
  块级作用域 关键字let, 常量const
  对象字面量的属性赋值简写（property value shorthand）
  var obj = { // __proto__  __proto__: theProtoObj, // Shorthand for ‘handler: handler’  handler, // Method definitions  toString() { // Super calls  return &amp;#34;d &amp;#34; + super.</description>
    </item>
    
    <item>
      <title>webpack 的核心概念和构建流程</title>
      <link>https://imzsh.com/posts/20210118/</link>
      <pubDate>Mon, 18 Jan 2021 19:59:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210118/</guid>
      <description>1.webpack 的核心概念  entry（入口）：一个可执行模块或者库的入口。定义了打包后的入口文件。 output（出口）：指示 webpack 如何去输出，以及在哪里输出。 path: 打包文件存放的绝对路径 publicPath: 网站运行时的访问路径 filename: 打包后的文件名 module（模块）：在 webpack 里，一切皆模块，一个模块对应一个文件。webpack 会从配置的 entry 中开始递归找出所有依赖的模块。 chunk（代码块）：一个 chunk 由多个 模块 组合而成。可以将可执行的模块和他所依赖的模块组合成一个 chunk ，这就是打包。 loader（模块转换器）：用于把一个模块原内容按照需求转换成新的内容。例如：es6 转换为 es5，scss 转换为 css 等。 plugin（扩展）：扩展webpack功能的插件。在webpack构建的生命周期节点上加入扩展hook，添加功能。  2.webpack 构建流程  初始化参数：解析 webpack 的配置参数，合并 shell 传入和 webpack.config.js 文件配置的参数，形成最后的配置结果。 开始编译：上一步得到的参数初始化 compiler 对象，注册所有配置的插件，插件监听 webpack 构建生命周期的事件节点，做出相应的反应，执行对象的 run 方法开始执行编译。 确定入口：其配置的 entry 入口，开始解析文件构建的 AST 语法树，找出依赖，递归下去。 编译模块：根据文件类型和 loader 配置，调用所有配置的 loader 对文件进行转换，再找出该模块依赖的模块，再递归本步骤知道所有入口依赖的文件都经过了本步骤的处理。 完成模块编译并输出：递归完后，得到每个文件结果，包含了每个模块及她们之间的依赖关系，根据 entry 配置生成代码块 chunk 。 输出完成：输出所有的 chunk 到文件系统。  3.</description>
    </item>
    
    <item>
      <title>基于 React 的富文本编辑器－－Braft Editor</title>
      <link>https://imzsh.com/posts/20210107/</link>
      <pubDate>Thu, 07 Jan 2021 20:46:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210107/</guid>
      <description>最近发了很多关于 React 的文章，记录遇到的新技术点，以及在写代码过程中遇到的问题，希望可以帮助到和我遇到同样问题的同学。
今天分享的是一款基于 React 的富文本编辑器－－Braft Editor。
 Braft Editor 官网：https://braft.margox.cn Github 仓库地址：https://github.com/margox/braft-editor
 这款插件非常方便，只需要下载然后引入即可直接使用，页面整体风格清新，符合绝大多数人的审美观，支持图片，音视频的插入。
按照官方的说法，假如你对它的功能还不够满意，不够使用，完全可以扩展它，自己写一个插件来强化他。
经过我的测试，功能绝对强大，可以满足市面上绝大多数的需求。接下来就说一下如何使用这款插件。
1.安装 在项目中直接通过 npm 或者 yarn 下载插件：
# 使用 npm 安装 npm install braft-editor --save # 使用 yarn 安装 yarn add braft-editor 2.使用 新建一个组件 EditorDemo.js，在里面写入下列代码：
// EditorDemo.js  import React from &amp;#39;react&amp;#39;; import BraftEditor from &amp;#39;braft-editor&amp;#39;; import &amp;#39;braft-editor/dist/index.css&amp;#39;; export default class PageDemo extends React.Component { state = { editorState: BraftEditor.createEditorState(null) } render () { return ( &amp;lt;BraftEditor value={this.</description>
    </item>
    
    <item>
      <title>使用 React 与 Vue 创建同一款 App，差别究竟有多大？</title>
      <link>https://imzsh.com/posts/20210106/</link>
      <pubDate>Wed, 06 Jan 2021 20:47:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210106/</guid>
      <description>关于 React 框架 和 Vue 框架 的对比，用两者写出同一个程序，对比其代码实现的过程，看看它们的差异究竟有多大？
 转载于：https://blog.csdn.net/csdnnews/article/details/81880378 原文：https://medium.com/javascript-in-plain-english/i-created-the-exact-same-app-in-react-and-vue-here-are-the-differences-e9a1ae8077fd 作者简介：Sunil Sandhu，一位 Web 全栈工程师 + 空想家。 译者：安翔，责编：屠敏
 众所周知，Vue 和 React 都是目前非常著名的前端框架。我在工作中经常使用 Vue，因此我对它有很深入的了解。同时，我也对 React 充满了好奇，想要学习一下，一探究竟。
于是我阅读了 React 文档并观看了一些视频教程，虽然这些资料很不错，但是我真正想了解的是 React 与 Vue 之间的不同之处。所谓“不同之处”，我并非想知道它们是否都具有虚拟 DOMS 或者它们如何渲染页面，而是希望有人能够从代码的角度解释这两者之间的差异。我想找到一篇解释这些差异的文章，以便 Vue 或者 React 的初学者可以更好地理解它们两者之间的差异。
很遗憾，我并未找到一篇这样的文章。于是我意识到必须自己动手来比较 Vue 与 React 之间的异同。在我自力更生的过程中，我用这篇文章记录下了具体过程。
1.目标 我将会构建一个标准的待办事项应用程序，允许用户添加和删除列表中的项目。这两个应用程序都使用默认的 CLI（command-line interface，命令行界面） 构建，React 使用 create-react-app，Vue 使用 vue-cli。
两个应用程序的外观如下：
两个应用程序的 CSS 代码几乎一样，但这些代码的位置存在差异。考虑到这一点，我们来看看这两个应用程序的文件结构：
你会发现它们的结构几乎完全相同。唯一的区别在于 React App 拥有三个 CSS 文件，而 Vue App 中没有 CSS 文件。这是因为 React 的 create-react-app 组件需要一个附带文件来保存其样式，而 Vue CLI 采用全包方法，其样式在实际组件文件中声明。</description>
    </item>
    
    <item>
      <title>React 脚手架项目打包时的路径问题</title>
      <link>https://imzsh.com/posts/20210105/</link>
      <pubDate>Tue, 05 Jan 2021 20:54:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210105/</guid>
      <description>create-react-app 脚手架指令可以生成 React 项目，在项目完成之后执行打包命令 npm run build，文件夹内生成 build文件夹，就是打包后的文件，在浏览器运行 index.html 发现页面空白，打开控制台有报错，css 和 js 文件的引用路径有问题。
浏览 index.html 代码可以发现：
&amp;lt;!-- index.html --&amp;gt; &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;zh&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width,initial-scale=1&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;theme-color&amp;#34; content=&amp;#34;#000000&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;Web site created using create-react-app&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;React App&amp;lt;/title&amp;gt; &amp;lt;link href=&amp;#34;/static/css/main.3394d54e.chunk.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;noscript&amp;gt;You need to enable JavaScript to run this app.&amp;lt;/noscript&amp;gt; &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt;!function (e) { function r(r) { for (var n, l, f = r[0], i = r[1], a = r[2], c = 0, s = []; c &amp;lt; f.</description>
    </item>
    
    <item>
      <title>如何在 React 中引入 less？</title>
      <link>https://imzsh.com/posts/20210104/</link>
      <pubDate>Mon, 04 Jan 2021 20:50:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210104/</guid>
      <description>本文主要写如何在 React 中引入 less 。因为 less 和 css 非常像，因此很容易学习。而且 less 仅对 css 语言增加了少许方便的扩展，这就是 less 如此易学的原因之一。
1.安装 less npm install less less-loader --save-dev 2.暴露 webpack 文件 利用 npx create-react-app 搭建的 React 项目，默认隐藏 webpack 配置文件，引入 less 需要修改 webpack 配置文件，因此我们需要执行命令暴露 webpack 配置文件。
 这里需要注意，一旦暴露，无法回退。
 npm run eject 如果这一步失败，执行下列命令：
git add . git commit -m &amp;#34;init&amp;#34; 然后再执行 npm run eject
 注意：暴露 webpack 文件只能在 create-react-app 之初，一旦项目结构发生改变，再进行暴露操作就会失败。所以尽量在项目建立时就进行 npm run eject 操作。
 3.修改 wenpack.config.js 配置 在合适的位置添加：</description>
    </item>
    
    <item>
      <title>为什么 key 是必须的？</title>
      <link>https://imzsh.com/posts/20210101/</link>
      <pubDate>Fri, 01 Jan 2021 20:48:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20210101/</guid>
      <description>之前有说到，在 React 中渲染列表的时候，要给每一个数据加一个 key 值，赋予一个确定的标示，而且也详细描述了如何给一个标示，方法知道了，那么为什么要这么做呢？
在 React 中如何渲染列表？
在默认条件下，当递归 DOM 节点的子元素时，React 会同时遍历两个子元素的列表；当产生差异时，生成一个 mutation。
在子元素列表末尾新增元素时，更新开销比较小。比如：
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;third&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; React 会先匹配两个 &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt; 对应的树，然后匹配第二个元素 &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt; 对应的树，最后插入第三个元素的 &amp;lt;li&amp;gt;third&amp;lt;/li&amp;gt; 树。
如果只是简单的将新增元素插入到表头，那么更新开销会比较大。比如：
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Duke&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Villanova&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Connecticut&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Duke&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Villanova&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; React 不会意识到应该保留 &amp;lt;li&amp;gt;Duke&amp;lt;/li&amp;gt; 和 &amp;lt;li&amp;gt;Villanova&amp;lt;/li&amp;gt;，而是会重建每一个子元素 。这种情况会带来性能问题。
key
为了解决上述问题， React 支持 key 属性，当子元素拥有 key 时，React 使用 key 来匹配原有树上的子元素以及最新树上的子元素。以下例子在新增 key 之后使得之前的低效转换变得高效：
&amp;lt;ul&amp;gt; &amp;lt;li key=&amp;#34;1&amp;#34;&amp;gt;Duke&amp;lt;/li&amp;gt; &amp;lt;li key=&amp;#34;2&amp;#34;&amp;gt;Villanova&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li key=&amp;#34;0&amp;#34;&amp;gt;Connecticut&amp;lt;/li&amp;gt; &amp;lt;li key=&amp;#34;1&amp;#34;&amp;gt;Duke&amp;lt;/li&amp;gt; &amp;lt;li key=&amp;#34;2&amp;#34;&amp;gt;Villanova&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 现在 React 知道只有带着 &#39;0&#39; key 的元素是新元素，带着 &#39;1&#39; 以及 &#39;2&#39; key 的元素仅仅移动了。</description>
    </item>
    
    <item>
      <title>React 学习笔记（三）</title>
      <link>https://imzsh.com/posts/20201229/</link>
      <pubDate>Tue, 29 Dec 2020 13:26:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201229/</guid>
      <description>来源于：https://react.docschina.org/docs/forms.html
一、表单 在 React 中，html 表单元素的工作方式和其他的 DOM 元素不太一样，因为表单内部通常会保持一些内部的 state，比如下面这个纯 html 表单只接受一个名称：
&amp;lt;form&amp;gt; &amp;lt;label&amp;gt; 名字: &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; /&amp;gt; &amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;提交&amp;#34; /&amp;gt; &amp;lt;/form&amp;gt; 这个表单具有默认的 html 表单行为，即在用户提交表单之后自动刷新页面。如果你在 React 中执行相同的代码，它仍然有效。
但大多数情况下，使用 JavaScript 函数可以很方便的处理表单的提交， 同时还可以访问用户填写的表单数据。实现这种效果的标准方式是使用“受控组件”。
受控组件 在 html 中，表单元素比如&amp;lt;input&amp;gt;，&amp;lt;textarea&amp;gt;，&amp;lt;select&amp;gt;，这些表单元素通常自己维护 state，并根据用户输入进行更新。而在 React 中，可变状态（mutable state）通常保存在组件的 state 属性中，并且只能通过使用 setState() 来更新。
我们可以把两者结合起来，使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。
例如，如果我们想让前一个示例在提交时打印出名称，我们可以将表单写为受控组件：
class NameForm extends React.Component { constructor(props) { super(props); this.state = {value: &amp;#39;&amp;#39;}; this.handleChange = this.handleChange.bind(this); this.</description>
    </item>
    
    <item>
      <title>React －－万物皆可组件</title>
      <link>https://imzsh.com/posts/20201221/</link>
      <pubDate>Mon, 21 Dec 2020 13:19:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201221/</guid>
      <description>一、React 组件是什么？  组件，从概念上类似于 javascript 函数，他接受任意入参（props），并返回作用于描述页面展示内容的 React 元素。
 组件允许你将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。
1.创建一个组件 // 函数组件 function Welcome(props) { return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;; } // class组件 class Welcome extends React.Component { render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } } 2.渲染组件 class Welcome extends React.Component { render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } } ReactDOM.render( &amp;lt;Welcome /&amp;gt;, document.getElementById(&amp;#39;root&amp;#39;) ); 3.组件 React的基础原则有三条，分别是：
 React 界面完全由数据驱动 React 中一切都是组件 props 是 React 组件之间通讯的基本方式  给组件输入一个参数，最终返回一个 React Element,React Element 就是在页面上展示的内容，相当于一个 DOM 节点</description>
    </item>
    
    <item>
      <title>javascript 进阶问题</title>
      <link>https://imzsh.com/posts/20201219/</link>
      <pubDate>Sat, 19 Dec 2020 13:17:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201219/</guid>
      <description>Github：https://github.com/lydiahallie/javascript-questions
相当不错的一个 Github 仓库，javascript questions ，作者每周都会发布一些有关 javascript 的题目，虽然不难但是考察细节，刷了一会，其实一些很简单的问题，结果因为细节思考不到位直接出错。
 引用作者的话：我在我的 Instagram 上每天都会发布 JavaScript 的多选问题，并且同时也会在这个仓库中发布。
  从基础到进阶，测试你有多了解 JavaScript，刷新你的知识，或者帮助你的 coding 面试！
 </description>
    </item>
    
    <item>
      <title>React 学习笔记（二）</title>
      <link>https://imzsh.com/posts/20201216/</link>
      <pubDate>Wed, 16 Dec 2020 13:15:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201216/</guid>
      <description>React 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同
React 事件的命名采用小驼峰式（camelCase），而不是纯小写
使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串
一、事件处理 1.事件绑定 React 元素的事件处理和 DOM 元素类似，但是在语法上有些区别，比如：
传统的html：用双引号包裹，后面必须跟参数
&amp;lt;button onclick=&amp;#34;myfun()&amp;#34;&amp;gt;点击&amp;lt;/button&amp;gt; React：用大括号包裹，后面不跟参数
&amp;lt;button onclick={myfun}&amp;gt;点击&amp;lt;/button&amp;gt; 一个完整的事件函数代码如下
class Demo extends React.Component { render() { // 事件函数  function myfun() { alert(&amp;#39;helo,world&amp;#39;) } return ( // 绑定事件  &amp;lt;button onClick={this.myfun}&amp;gt; Activate Lasers &amp;lt;/button&amp;gt; ) } } ReactDOM.render( &amp;lt;Demo /&amp;gt;, document.getElementById(&amp;#39;root&amp;#39;) )  如果方法后面没有()，则需要为这个方法绑定 this
 2.阻止默认行为 在 React 中还有一个不同的点，不能通过返回 fasle 阻止默认行为， React 提供了一个属性－－preventDefault，可以通过 preventDefault 阻止脚本执行
看一下传统的 html 和 React 的对比</description>
    </item>
    
    <item>
      <title>React 中的占位符 Fragment</title>
      <link>https://imzsh.com/posts/20201212/</link>
      <pubDate>Sat, 12 Dec 2020 13:10:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201212/</guid>
      <description>在 React 项目中， render 方法只能有一个根元素，一般都是 &amp;lt;div&amp;gt; &amp;lt;div/&amp;gt; ，然后在里面写上我们的组件，渲染到浏览器一看，除了我们想要显示的组件，外面还套着一层 div ，如果在写项目的时候，套了很多曾组件，那么每一层都会多出来一个父级元素 div ，不美观，而且在调整样式的时候会有些麻烦
因此， React 提供了一个占位符 Fragment，写法是：
// index.js  import React, { Component,Fragment } from &amp;#39;react&amp;#39; export default class index extends Component { render() { return ( &amp;lt;Fragment&amp;gt; &amp;lt;h2&amp;gt;hello,wolrd&amp;lt;/h2&amp;gt; &amp;lt;/Fragment&amp;gt; ) } } 在引入 React 的时候，增加一个属性 Fragment ，然后 render()方法下唯一的根元素我们用 &amp;lt;Fragment&amp;gt; &amp;lt;/Fragment&amp;gt; 来代替，这时候再看浏览器，就不会显示多余的标签了，直接显示 &amp;lt;h2&amp;gt;标签</description>
    </item>
    
    <item>
      <title>为什么不可变性在 React 中那么重要？</title>
      <link>https://imzsh.com/posts/20201202/</link>
      <pubDate>Wed, 02 Dec 2020 13:09:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201202/</guid>
      <description>根据官网文档来解释，为什么不可变性的概念在 React 中非常重要的原因，一般来说，有两种改变数据的方式。第一种方式是直接修改变量的值，第二种方式是使用新的一份数据替换旧数据
 React 文档
 一般来说，有两种改变数据的方式。第一种方式是直接修改变量的值，第二种方式是使用新的一份数据替换旧数据
直接修改数据 var player = {score: 1, name: &amp;#39;Jeff&amp;#39;}; player.score = 2; // player 修改后的值为 {score: 2, name: &amp;#39;Jeff&amp;#39;} 新数据替换旧数据 var player = {score: 1, name: &amp;#39;Jeff&amp;#39;}; var newPlayer = Object.assign({}, player, {score: 2}); // player 的值没有改变, 但是 newPlayer 的值是 {score: 2, name: &amp;#39;Jeff&amp;#39;}  // 使用对象展开语法，就可以写成： // var newPlayer = {...player, score: 2}; 不直接修改（或改变底层数据）这种方式和前一种方式的结果是一样的，这种方式有以下几点好处:
简化复杂的功能 不可变性使得复杂的特性更容易实现。在后面的章节里，我们会实现一种叫做“时间旅行”的功能。“时间旅行”可以使我们回顾井字棋的历史步骤，并且可以“跳回”之前的步骤。这个功能并不是只有游戏才会用到——撤销和恢复功能在开发中是一个很常见的需求。不直接在数据上修改可以让我们追溯并复用游戏的历史记录
跟踪数据的改变 如果直接修改数据，那么就很难跟踪到数据的改变。跟踪数据的改变需要可变对象可以与改变之前的版本进行对比，这样整个对象树都需要被遍历一次
确定在 React 中何时重新渲染 不可变性最主要的优势在于它可以帮助我们在 React 中创建 pure components。我们可以很轻松的确定不可变数据是否发生了改变，从而确定何时对组件进行重新渲染</description>
    </item>
    
    <item>
      <title>webpack安装配置指令</title>
      <link>https://imzsh.com/posts/20201126/</link>
      <pubDate>Thu, 26 Nov 2020 13:08:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201126/</guid>
      <description>进行重新加载编译。实际就是将浏览器不认识的语法编译成浏览器认识的语法。比如less编译成css，ES6 语法 转成 ES5等等。
减少io请求,通常我们在请求后，会返回一个html到浏览器。这时，我们如果打开控制台，就会发现在html页面通过script,link等标签引用的静态资源， 浏览器会再次发出请求去获取这些资源。但是webpack的打包，将所有的静态资源都合并好了，减少了io请求。
# 安装webpack npm install --save-dev webpack # 安装webpack-cli依赖 npm install --save-dev webpack-cli # 创建新项目 mkdir demo # cd项目 cd demo # 初始化 npm init -y # 安装开发版本cli npm install webpack webpack-cli --save-dev 新建一个html文件和一个js文件，工程目录如下
demo |- package.json + |- index.html + |- /src + |- index.js src/index.js:
function component() { var element = document.createElement(&amp;#39;div&amp;#39;); // Lodash（目前通过一个 script 脚本引入）对于执行这一行是必需的  element.innerHTML = _.join([&amp;#39;Hello&amp;#39;, &amp;#39;webpack&amp;#39;], &amp;#39; &amp;#39;); return element; } document.</description>
    </item>
    
    <item>
      <title>vue学习笔记(3)－－computed, watch，calss, style</title>
      <link>https://imzsh.com/posts/20201125/</link>
      <pubDate>Wed, 25 Nov 2020 13:05:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201125/</guid>
      <description>一、计算属性computed 1.例子 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;div&amp;gt;{{message}}&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;{{revermessage}}&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var vm = new Vue({ el: &amp;#39;#app&amp;#39;, data: { message: &amp;#39;hello,wolrd&amp;#39; }, computed: { revermessage: function() { return this.message.split(&amp;#39;&amp;#39;).reverse().join(&amp;#39;&amp;#39;) } } }) &amp;lt;/script&amp;gt; 声明一个计算属性severmessage，在computed中被指向对message进行一些方法操作后的返回值
此时vm.severmessage依赖于vm.message的变化，对message改变数据，会引起severmessage的更新
2.计算属性缓存和方法 还可以通过在表达式中调用方法来达到想要的效果
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;div&amp;gt;{{message}}&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;{{revermessage()}}&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var vm = new Vue({ el: &amp;#39;#app&amp;#39;, data: { message: &amp;#39;hello,wolrd&amp;#39; }, methods: { revermessage: function() { return this.message.split(&amp;#39;&amp;#39;).reverse().join(&amp;#39;&amp;#39;) } } }) &amp;lt;/script&amp;gt; 经过测试，两者的结果是一样的
我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的
区别是：计算属性是基于他们的响应式依赖进行缓存的，只有当响应式依赖，也就是message发生改变时才会重新求值，就意味着，只要message还没改变，多次访问revermessage计算属性只会返回之前计算结果的缓存，而不是直接执行计算属性的函数
而方法，在每次触发重新渲染时，调用方法都会执行一次函数，这就多了一份开销
我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 A，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 A。如果没有缓存，我们将不可避免的多次执行 A 的 getter！如果你不希望有缓存，请用方法来替代</description>
    </item>
    
    <item>
      <title>vue学习笔记(2)－－vue实例和模板语法</title>
      <link>https://imzsh.com/posts/20201124/</link>
      <pubDate>Tue, 24 Nov 2020 13:05:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201124/</guid>
      <description>一、vue实例 1.创建vue实例 一个vue实例应该通过new Vue来创建根实例，所有的 vue 组件其实都是 vue 实例
var vm = new Vue({ ... }) 当一个实例被创建时，data对象中的 property 都被加入到vue的响应式系统中，当值发生改变时，试图也会改变
var data = {a: 1} var vm = new Vue({ data: data }) 此时在控制台输入vm.a == data.a会返回true，变量data已经被赋给vue实例中的data对象了
同时，对两个对象的数据进行操作改变也会影响到另一个
vm.a = 2 // data.a = 2  data.a = 3 // vm.a = 3 当数据改变时，视图也会重新渲染，如果在vue实例被创建后，又添加了一个新的property，则不会被加入到响应式系统中
如果一开始就知道后面会添加一个property，但是一开始不存在或为空，需要设置一些初始值
data: { newTodoText: &amp;#39;&amp;#39;, visitCount: 0, hideCompletedTods: fasle, todos: [], error: null } 使用Object.freeze()方法的时候，无法修改数据引起视图变化
 Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。</description>
    </item>
    
    <item>
      <title>vue学习笔记(1)－－什么是vue?</title>
      <link>https://imzsh.com/posts/20201123/</link>
      <pubDate>Mon, 23 Nov 2020 13:04:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201123/</guid>
      <description>一、什么是vue? 练习时使用，最新版本
&amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 生产时使用，明确版本号的版本，避免造成不可预见的问题
&amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/vue@2.6.12&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; hello world
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; {{message}} &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, data: { message: &amp;#39;hello,world&amp;#39; } }) &amp;lt;/script&amp;gt; 1.v-指令  v-bind－－绑定属性  &amp;lt;div id=&amp;#34;app-2&amp;#34;&amp;gt; &amp;lt;span v-bind:title=&amp;#34;message&amp;#34;&amp;gt; 鼠标悬停几秒钟查看此处动态绑定的提示信息！ &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el: &amp;#39;#app&amp;#39;, data: { message: &amp;#39;页面加载于 &amp;#39; + new Date().toLocaleString() } }) &amp;lt;/script&amp;gt; v-bind是vue特有的提供的属性，他会在dom上应用一个响应式的操作
打开console，输入app.message = &amp;quot;hello&amp;quot;，页面会改变内容只显示hello
又或者输入app.message = false，内容会直接不显示
vue官网例子：
&amp;lt;!-- 绑定一个 attribute --&amp;gt; &amp;lt;img v-bind:src=&amp;#34;imageSrc&amp;#34;&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>React 学习笔记（一）</title>
      <link>https://imzsh.com/posts/20201122/</link>
      <pubDate>Sun, 22 Nov 2020 13:02:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201122/</guid>
      <description>react学习笔记，记录我在开发和学习过程中遇到的问题和知识点
2013年5月Facebook推出了React.js开源软件前端框架，函数式编程，是使用人数最多的前端框架，也拥有最健全的文档和完善的社区
React官网
16版本之后的react叫做 react fiber
一、开发环境准备  引入.js文件来使用React 通过脚手架工具来编码，但是最终代码不能运行，需要通过webpack等来编译  （官方提供的脚手架工具 Create-react-app ）
1.如何使用脚手架工具？  下载node.js ， 进入官方网站  node -v //node版本号 npm -v //npm 版本号 2.使用脚手架工具创建一个项目 打开命令行工具，依次执行命令
npx create-react-app my-app //创建项目 cd my-app //进入项目 npm start //运行项目 正常情况下就会在浏览器中弹出以下页面，说明项目运行成功
3.运行项目 安装依赖包，在命令行中输入:
yarn install然后重新启动npm start或者yarn start
4.工程目录 build //打包之后自动生成的目录public-- //生成的页面内容| favicon.ico| index.html| manifest.json //不需要，可以删除src----- //放置的是项目的源代码 | index.js //入口的js文件，放置整个项目需要引入的第三方模块或者文件| index.css //项目页面的全局css样式| App.js //负责往页面渲染一些内容| App.</description>
    </item>
    
    <item>
      <title>对象，类和接口之间的关系</title>
      <link>https://imzsh.com/posts/20201121/</link>
      <pubDate>Sat, 21 Nov 2020 13:01:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201121/</guid>
      <description>类是对的类型，类是具有相同属性和方法的一组集合，一个类可以对应多个对象，对象通过他们公开的方法来定义他们与外界的交互行为，而方法就形成了与外界交互的接口
类，对象和接口 1.类和对象 区别：
 对象是类的一个实例。就比如一个人，他有具体的属性，身高，体重，姓名等状态，跑步，跳舞等行为 类是抽象的概念，代表一类事物的模版。对一类对象的行为和状态进行描述，抽离出其共性，形成类  关系：
 类就是对事物的一种描述，对象是具体存在的一个实例   类是对的类型，类是具有相同属性和方法的一组集合，一个类可以对应多个对象
 2.什么是接口？ 对象通过他们公开的方法来定义他们与外界的交互行为，而方法就形成了与外界交互的接口
更深层次的含义是：使定义和实现分离开，他是交互的具体实现的抽象化
接口是面向对象编程的基础，它是一组包含了函数方法的数据结构，他是一个比类更抽象化的东西
可以这么说，类是对象的抽象化，接口是类的抽象化
 比如生活中的接口，机顶盒，人们利用它来实现收看不同频道和信号的节目，它犹如对不同类型的信息进行集合和封装的设备，最后把各种不同类型的信息转换为电视能够识别的信息。
  在编程语言中的接口，实际上是不同类的封装并提供统一的外部联系通道，这样其他对象就可以利用接口来调用不同类的成员了
 接口和类，实际上都是相同的数据结构
在接口中，可以声明属性，方法，事件，类型，但是不能声明变量，也就是说，接口只能定义成员，不能给成员赋值
使用接口的好处，提高代码灵活性，降低对象之间的耦合度，在实际项目中非常有用</description>
    </item>
    
    <item>
      <title>vue使用cli脚手架构建项目工程</title>
      <link>https://imzsh.com/posts/20201120/</link>
      <pubDate>Fri, 20 Nov 2020 13:03:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201120/</guid>
      <description>vue使用cli脚手架构建项目工程，执行的命令以及遇到的相关的问题
1.下载安装node 测试一下是否成功安装，
$ node -v // 返回下载的版本号 2.安装webpack环境 $ npm install webpack -g // 如果失败，可能是因为用户没有权限 // 使用下面这种，管理员权限 $ sudo npm install webpack -g 如果返回版本号代表成功，如果没有，则需要输入下面的命令
$ npm install webpack webpack-cli -g  webpack 4.X 开始，需要安装 webpack-cli 依赖
 3.全局安装vue-cli $ npm install --global vue-cli // 如果失败，使用sudo $ sudo npm install --global vue-cli 安装完成之后，输入
$ vue -V 如果返会版本号，说明安装成功
4.构建项目 前面那些命令执行完之后，就可以构建ci项目了，找到我们想要放置项目的文件夹，进入终端，cd到这个文件夹
输入命令：
$ vue init webpack vuedemo // 名字自己根据要求起,vuedemo  Project name (vuedomo)： &amp;mdash;&amp;ndash;项目名称，直接回车，按照括号中默认名字（注意这里的名字不能有大写字母，如果有会报错Sorry, name can no longer contain capital letters） Project description (A Vue.</description>
    </item>
    
    <item>
      <title>react学习路径－－怎么学习react？</title>
      <link>https://imzsh.com/posts/20201119/</link>
      <pubDate>Thu, 19 Nov 2020 13:02:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201119/</guid>
      <description>转载于:https://github.com/petehunt/react-howto，react开源作者对于react框架的一个学习路径的建议，个人感觉还是相当不错的学习路线
 如何学习React? 如果你是一个 React (或者前端) 新手, 出于以下的原因, 你可能会对这个生态圈感到困惑:
 React 的目标群体历来是喜欢尝试新事物的开发者和前端专家. Facebook 开源的内容是应用在他们的实际应用中, 因此他们没有关注那些比 Facebook 小的工程需求. 现有的 React 指引水平参差不齐.  在本文中, 我会假设你已有使用 HTML, CSS 和 JavaScript 开发网页的基础.
为什么要听我的? 关于 React, 现在已经有大量的相互冲突的建议了, 为什么要听我的?
因为我是在 Facebook 构建并开源 React 的最初成员之一. 现在我离开了 Facebook 并加入了一家初创公司, 所以我也不会站在 Facebook 的立场上来表态.
如何踏入 React 生态圈 所有的软件都是建立在某个技术栈之上的, 你需要对整个技术栈有足够深入的理解, 才能建造你的应用. 为什么 React 生态圈的工具似乎总让人感觉压力山大呢, 因为它总是以错误的顺序被解释:
你应该按照以下的顺序进行学习, 而不是跳着学或者同时学习:
 React npm JavaScript “打包工具” ES6 Routing Flux  你不需要把这些都学完才去使用 React. 只需要在你遇到问题需要解决的时候, 才进入下一步的学习.
另外, 在 React 社区中, 有一些前沿主题是经常被提及到的, 以下的这些主题很有意思, 但也很难弄懂, 所以它们远没有上面的主题流行, 大多数应用也不需要用到这些.</description>
    </item>
    
    <item>
      <title>在js中运算不能随便把value属性定义成变量</title>
      <link>https://imzsh.com/posts/20201118/</link>
      <pubDate>Wed, 18 Nov 2020 13:00:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201118/</guid>
      <description>在写一个小demo的时候，无意中发现定义变量的时候直接写入value，会导致获取不到数据，或者获取的不是我们想要的内容，在js中运算不能随便把value属性定义成变量
先看一段代码
&amp;lt;input type=&amp;#34;text&amp;#34;&amp;#34; id=&amp;#34;a&amp;#34;&amp;gt; &amp;lt;span&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;b&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;button&amp;#34; value=&amp;#34;=&amp;#34; onclick=&amp;#34;beto()&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;sub&amp;#34; disabled&amp;gt; &amp;lt;script&amp;gt; function beto() { var a = document.getElementById(&amp;#39;a&amp;#39;).value var b = document.getElementById(&amp;#39;b&amp;#39;).value var sub = document.getElementById(&amp;#39;sub&amp;#39;).value sub = a + b } &amp;lt;/script&amp;gt; 就这么一看，逻辑貌似没有问题，获取a和b的value，乘法运算，然后输出sub
但是放在浏览器运行的时候，发现完全没有反应
为什么呢？
（假装思考五分钟&amp;hellip;）
因为sub.value不能直接定义在变量中
// 先定义id为sub的input框 var sub = document.getElementById(&amp;#39;sub&amp;#39;) // 然后在运算的时候在直接使用sub.value sub.value = a * b 顺手放一个写demo时候用的简易计算器
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;简易计算器&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34;&amp;#34; id=&amp;#34;a&amp;#34;&amp;gt; &amp;lt;select id=&amp;#34;c&amp;#34;&amp;gt; &amp;lt;option value=&amp;#34;+&amp;#34;&amp;gt;+&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;-&amp;#34;&amp;gt;-&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;*&amp;#34;&amp;gt;*&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;/&amp;#34;&amp;gt;/&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;b&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;button&amp;#34; value=&amp;#34;=&amp;#34; onclick=&amp;#34;beto()&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;sub&amp;#34; disabled&amp;gt; &amp;lt;script&amp;gt; function beto() { var a = document.</description>
    </item>
    
    <item>
      <title>事件监听函数，以及事件的捕获和冒泡机制</title>
      <link>https://imzsh.com/posts/20201117/</link>
      <pubDate>Tue, 17 Nov 2020 13:00:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201117/</guid>
      <description>事件一般是用于浏览器和用户操作之间的交互，当用户执行某些特殊的操作时，浏览器给予反应，触发绑定的事件，事件流，事件发生时会在元素节点和根节点之间按照约定的顺序传播，事件经过的所有节点都会受到事件的影响，这个传播过程被称为DOM事件流
函数事件 事件一般是用于浏览器和用户操作之间的交互，当用户执行某些特殊的操作时，浏览器给予反应，触发绑定的事件
事件流，事件发生时会在元素节点和根节点之间按照约定的顺序传播，事件经过的所有节点都会受到事件的影响，这个传播过程被称为DOM事件流
true是捕获，false是冒泡，默认为冒泡事件
1.addEventListener()－－添加事件监听函数 给元素添加一个事件，假如有多个事件，不会覆盖，会依次执行
&amp;lt;div id=&amp;#34;demo&amp;#34;&amp;gt;dom&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; document.getElementById(&amp;#39;demo&amp;#39;).addEventListener(&amp;#34;click&amp;#34;, myfun) document.getElementById(&amp;#39;demo&amp;#39;).addEventListener(&amp;#34;click&amp;#34;, myfun1) function myfun() { console.log(&amp;#39;事件监听函数&amp;#39;) } function myfun1() { console.log(&amp;#39;addEventListener&amp;#39;) } &amp;lt;/script&amp;gt;  注意： 1.这里有一个细节，addEventListener()里面有两个参数，第一个表示触发的条件，第二个表示触发的事件 正常情况下，第二个参数直接写函数名并且不加参数()，如果加了参数()则表示立即执行，不需要触发第一个参数要求的条件
  2.在这里绑定事件的时候，事件名不能和定义的变量名一样，否则无效
 2.removeEventListener()－－移除事件监听函数 下面这个demo，当鼠标在div中移动的时候，出现随机数，点击按钮后，移除事件监听函数
&amp;lt;!-- css --&amp;gt; &amp;lt;style&amp;gt; #demo { width: 100px; height: 100px; border: 1px solid #000; } &amp;lt;/style&amp;gt; &amp;lt;!-- html --&amp;gt; &amp;lt;div id=&amp;#34;demo&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;input type=&amp;#34;button&amp;#34; value=&amp;#34;点击移除&amp;#34; onclick=&amp;#34;remove()&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;show&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- js --&amp;gt; &amp;lt;script&amp;gt; document.getElementById(&amp;#39;demo&amp;#39;).addEventListener(&amp;#34;mousemove&amp;#34;, myfun) function myfun() { document.</description>
    </item>
    
    <item>
      <title>getElementBy系列和querySelector系列的区别</title>
      <link>https://imzsh.com/posts/20201116/</link>
      <pubDate>Mon, 16 Nov 2020 12:59:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201116/</guid>
      <description>querySelector和querySelectorAll的用法和getElementBy大致一样，获取的时候带上符号，getElementBy获取的是元素的动态集合，querySelector获取的是元素的静态集合。
但是需要注意：getElementBy系列和querySelector系列的区别
比如，我们写一个for循环，每次获取li标签的时候，ul生成一个li子元素
&amp;lt;ul id=&amp;#34;ul&amp;#34;&amp;gt; &amp;lt;li&amp;gt;a&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;b&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;c&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;script&amp;gt; var ul = document.getElementById(&amp;#39;ul&amp;#39;); var li = document.getElementsByTagName(&amp;#39;li&amp;#39;); for(var i = 0;i &amp;lt; li.length; i++) { ul.appendChild(document.createElement(&amp;#39;li&amp;#39;)) }; console.log(li.length); // 陷入死循环 &amp;lt;/script&amp;gt; 用i &amp;lt; li.length来进行判断时，会导致浏览器死循环，因为循环一次的时候，浏览器又重新获取li标签数组，每调用一次就会重新对文档进行查询，就会进入死循环
进行修改：把i &amp;lt; li.length改成i &amp;lt; 3，把li标签数组静态化，然后打印
conosle.log(li.length) // 6 重新用querySelector获取一遍元素
&amp;lt;ul id=&amp;#34;ul&amp;#34;&amp;gt; &amp;lt;li&amp;gt;a&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;b&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;c&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;script&amp;gt; var ul = document.querySelector(&amp;#39;ul&amp;#39;); var li = document.querySelectorAll(&amp;#39;li&amp;#39;); for(var i = 0;i&amp;lt;li.length;i++) { ul.appendChild(document.createElement(&amp;#39;li&amp;#39;)) }; console.log(li.length); // 输出对结果是原来的li.length = 3，而不是增加后的 6 &amp;lt;/script&amp;gt; 静态集合体现在querySelectorAll(&#39;li&#39;)获取到ul里所有li后，不管后续再动态添加了多少li，都是不会对其参数影响</description>
    </item>
    
    <item>
      <title>DOM－－文档对象模型</title>
      <link>https://imzsh.com/posts/20201115/</link>
      <pubDate>Sun, 15 Nov 2020 12:58:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201115/</guid>
      <description>DOM中文名文档对象模型，英文名Document Object Model，我们简称为DOM，是针对html和xml文档的一种API，将html以一种树状结构呈现出来，可以更直观去研究文档结构，我们将这种树状文档结构称为－－DOM树，或者节点树，一样的概念
一、什么是DOM？ DOM中文名文档对象模型，英文名Document Object Model，我们简称为DOM，是针对html和xml文档的一种API，将html以一种树状结构呈现出来，可以更直观去研究文档结构，我们将这种树状文档结构称为－－DOM树，或者节点树，一样的概念
js通过dom节点，可以对文档的html标签，属性，css样式，以及具体的内容做出修改，并对页面中的所有事件进行响应
二、节点树 1.节点类型  文档节点－－Document 标签节点－－Element 文本节点－－Text 注释节点－－Comment 属性节点－－Attr  2. 属性  节点类型－－nodeType 节点名称－－nodeName 节点值－－nodeValue 子节点－－childNodes 父节点－－parentNodes 上一个节点－－previousSibling 下一个节点－－nextSibling 第一个子节点－－firstChild 最后一个子节点－－lastChild  3.文档节点－－document (1) 获取  getElementById()－－通过id获取元素  &amp;lt;div id=&amp;#34;demo&amp;#34;&amp;gt;通过id获取元素&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var demo = document.getElementById(&amp;#39;demo&amp;#39;); demo.onclick = function() { console.log(&amp;#39;通过id获取元素&amp;#39;) } &amp;lt;/script&amp;gt; &amp;lt;!-- 点击id为demo的元素，控制台输出&amp;#39;通过id获取元素&amp;#39; --&amp;gt; getElementsByName()－－通过name获取元素  &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;int&amp;#34; value=&amp;#34;通过name获取元素1&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;int&amp;#34; value=&amp;#34;通过name获取元素2&amp;#34;&amp;gt; &amp;lt;script&amp;gt; var int = document.getElementsByName(&amp;#39;int&amp;#39;); for(var i = 0;i &amp;lt; int.</description>
    </item>
    
    <item>
      <title>有关js函数，方法的一些补充总结</title>
      <link>https://imzsh.com/posts/20201114/</link>
      <pubDate>Sat, 14 Nov 2020 12:57:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201114/</guid>
      <description>数据类型，构造函数，原型和原型链的一些讲解补充
一、数据类型 1.5个基本类型 string number boolean undefined 未定义 null 值为空 symbol 表示一个符号，符号类型是唯一的并且是不可修改的
最常见的还是前三种，字符串，数字，布尔值
2.常见的引用类型 引用类型是一种数据结构，用于将数据和功能组织在一起
对象－Object, 数组－Array, 函数－Function, 正则－RegExp, 日期－Date等
二、函数 1.什么是函数？  具有独立功能的代码块，在js中使用function关键字定义函数 让代码结构更加清晰，提高代码可用性 js函数的分类：自定义函数和系统函数  2.自定义函数 有一种匿名函数，没有名字的函数，创建闭包，避免造成全局变量的污染
匿名自执行函数
 概念：匿名函数的定义完成后立即执行，执行函数表达式 作用：实现闭包和创建独立的命名空间 使用：分组操作符()，void操作符，~操作符，!操作符等等 使用场景：函数表达式，对象属性，事件，事件参数，返回值 定义完匿名函数后，一定要调用  // 函数表达式 window.onload = function() { let funcobj = function() { alert(&amp;#34;函数表达式中的匿名函数&amp;#34;) } funcobj(); } // 对象属性 window.onload = function() { let obj = { name: function() { alert(&amp;#39;对象属性中的匿名函数&amp;#39;) } } obj.name(); } 3.</description>
    </item>
    
    <item>
      <title>为什么getTime()返回1970年至今的毫秒？</title>
      <link>https://imzsh.com/posts/20201113/</link>
      <pubDate>Fri, 13 Nov 2020 12:56:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201113/</guid>
      <description>今天在写new Date()时候，无意中发现了一个很有意思的方法，getTime()，百度了一下，有人说是计算从1970年1月1日至今的毫秒数
 为什么要是1970年呢？
 new Date().getTime(); // xxxxxxxxxxx 这个起源于unix的诞生，因为Unix在1969年被开发出来，1971年正式发布，在这之前没有机器会需要来表示1970-01-01-00:00:00之前的时间，后面的语言很多就沿用了这一习惯，js只是也沿用了这种习惯而已。
当然，这一做法现在看来是很有问题的，例如不方便用它表示更早的时间而且精度有限。
定义time从1970年1月1日开始，忽然想到在JAVA里，Oracle数据库时间也是从1970年1月1日开始计算。
比如java类代码:
Date date = new Date(0); System.out.println(date); // 打印出来的结果：Thu Jan 01 08:00:00 CST 1970也 是1970年1月1日，实际上时分秒是0点0分0秒(这里打印出来是8点，稍后会作解释)。
为什么这个时间会定义在1970年1月1日这个时候呢?
于是开始了Google，中文网页根本找不到答案。于是试着搜索英文关键字,在Sun java论坛总算找到准确的帖子:
http://forums.sun.com/thread.jspa?threadID=595140&amp;amp;start=15
其中有一个回复:
I suspect that Java was born and raised on a UNIX system. UNIX considers the epoch (when did time begin) to be midnight, January 1, 1970. 是说java起源于UNIX系统，而UNIX认为1970年1月1日0点是时间纪元.
但这依然没很好的解释&amp;quot;为什么&amp;quot;,出于好奇，继续Google，总算找到了答案:
http://en.wikipedia.org/wiki/Unix_time
这里的解释是:
最初计算机操作系统是32位，而时间也是用32位表示。
System.out.println(Integer.MAX_VALUE);
2147483647
Integer在JAVA内用32位表示，因此32位能表示的最大值是2147483647。另外1年365天的总秒数是31536000，2147483647/31536000 = 68.1,也就是说32位能表示的最长时间是68年，而实际上到2038年01月19日03时14分07秒，便会到达最大时间，过了这个时间点，所有32位操作系统时间便会变为10000000 00000000 00000000 00000000也就是1901年12月13日20时45分52秒，这样便会出现时间回归的现象，很多软件便会运行异常了。</description>
    </item>
    
    <item>
      <title>面向对象编程</title>
      <link>https://imzsh.com/posts/20201112/</link>
      <pubDate>Thu, 12 Nov 2020 12:58:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201112/</guid>
      <description>面向对象把构成问题的transaction分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为，意在写出通用代码，加强代码重用，屏蔽差异性。
一、什么是面向对象编程 js是基于原型的，基于面向对象编程
面向对象就是把数据和对数据的操作方法放在一起，作为一个整体——对象。对同类对象抽象出其共性，形成类
1.面向过程程序设计 将一个项目（或者一个事件）从头到尾按顺序，一步一步完成，先做什么，后做什么，一直到结束，也是我们人做事的方法。
自上而下，先确定一个整体的框架，然后添砖加瓦，逐步实现想要得到的效果，适用于简单的系统，容易理解。但是难以应对复杂的系统，不易维护扩展，难以复用
面向过程是分析解决问题的步骤，然后用函数把这些步骤一步一步的实现，然后在使用的时候一一调用则可。强调的是完成这件事儿的动作，更接近我们日常处理事情的思维。
2.面向对象程序设计 将一个项目（或者一个事件）分成更小的项目，每一个部分负责一方面的功能，最后由这些部分组成一个整体，先设计组件，在完成拼装，适用于大型复杂的系统
面向对象把构成问题的transaction分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为，意在写出通用代码，加强代码重用，屏蔽差异性。
想要弄明白面向对象，需要先理解类和对象的概念
《什么是类和对象？》
二、创建对象的方法 1.创建字面量和实例 window.onload = function() { // 实例  var person = new Object(); person.name = &amp;#39;小明&amp;#39;; person.age = 22; person.year = function() { console.log(this.name + &amp;#39;今年&amp;#39; + this.age + &amp;#39;岁了！&amp;#39;) }; person.year(); // 字面量  var student = { name: &amp;#39;小明&amp;#39;, age: 22, year: function () { console.log(this.name + &amp;#39;今年&amp;#39; + this.age + &amp;#39;岁了！&amp;#39;) } } student.</description>
    </item>
    
    <item>
      <title>javascript——函数、变量和方法</title>
      <link>https://imzsh.com/posts/20201104/</link>
      <pubDate>Wed, 04 Nov 2020 21:12:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201104/</guid>
      <description>当代码出现有规律的重复之后，可以利用函数，定义变量，调用方法，不用去重复的改动代码，只需要进行函数的修改。基本上所有的高级语言都支持函数，javascript也不例外，它可以像变量一样被使用，方便且强大，因此本文对js函数进行系统的学习，并在学习过程中做了详细的笔记以及样例。
一、函数的定义和调用 1.定义函数 function abs(x) { if(x = 0) { return x; } else { return -x; } }  function()指出这是一个函数定义 abs是函数的代码 (x)里面的内容是函数的参数 {...}的内容是函数体，可以包括若干语句，甚至可以没有任何语句   函数体中，必须以return结尾，才可以把结果返回，如果不用return结尾的话，就会返回undefined
 也可以直接定义一个对象，这个对象也可以写成函数的方式
var abs = function (x) { if (x&amp;gt;=0) { return x }else { return -x } }； function(x)就是一个匿名函数，这个函数被赋值给了变量abs，所以可以直接通过abs调用该函数
 这两种定义函数的方式完全一致，，但是用变量定义的时候需要注意，要用;结尾，代表函数语句结束
 2.调用函数 调用函数时，直接传参即可 abs(10)，根据函数定义，将10代入进去即可，返回的结果是x , 即10
3.检查参数 可以对参数进行检查，看看是否是自己想要的参数对类型
如果传入对参数abs(x)中非数字，控制台返回结果this is not number，如果传参为数字，则进行条件判断
function abs(x) { // 检查参数x是否为数字  if (typeof x !</description>
    </item>
    
    <item>
      <title>HTML事件属性--DOM</title>
      <link>https://imzsh.com/posts/20201029/</link>
      <pubDate>Thu, 29 Oct 2020 21:12:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201029/</guid>
      <description>研究html的对象，事件和方法，从js的角度来思考，这个标签的属性是通过什么方法，触发什么事件来实现的
  键盘鼠标事件   页面窗口事件   表单事件   一、window事件属性 针对window对象触发的事件，在&amp;lt;body&amp;gt;中执行
1.onbeforeprint／onafterprint 在浏览器打印之间/后触发
&amp;lt;body onbeforeprint = print()&amp;gt; &amp;lt;script&amp;gt; function print() { alert(&amp;#34;打印之间！&amp;#34;) } &amp;lt;/script&amp;gt; 打印前和打印后的事件方法类似，一个是在打印前触发事件，一个是在打印这个事件结束之后触发onafterprint这个事件
demo查看
2.onbeforeunload/unload 离开页面之间触发的事件／之后触发的事件
打开f12，然后刷新，或者关闭浏览器，可以在浏览器触发事件
&amp;lt;script&amp;gt; window.onbeforeunload = function(){ return &amp;#34;提示&amp;#34; //返回的内容不会显示，  //在刷新的时候触发，或者关闭浏览器，浏览会直接提示是否重新加载，不能直接返回return  } &amp;lt;/script&amp;gt; demo查看
3.onerror 当图片出错是可以触发该事件，支持该事件的标签只有 &amp;lt;img&amp;gt;,&amp;lt;object&amp;gt;,&amp;lt;style&amp;gt;
&amp;lt;img src=&amp;#34;1.gif&amp;#34; onerror = &amp;#34;myfun()&amp;#34;&amp;gt; &amp;lt;script&amp;gt; function myfun() { alert(&amp;#34;图片出错&amp;#34;) } &amp;lt;/script&amp;gt; 1.gif不存在，因此触发了一个myfun()事件，弹出窗口
demo查看
4.onhashchange 当文档改变时发生的脚本 ？？？
5.onload 页面加载完成之后触发
demo查看
6.onmessage 在消息被触发时运行 ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://imzsh.com/posts/20201021/</link>
      <pubDate>Wed, 21 Oct 2020 21:11:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20201021/</guid>
      <description>在学习js基本语法的过程中，把遇见的知识点和问题记录喜下来，以便未来复习和参考。
数据类型有：数据，字符串，数组，数字，布尔值等。
一、数据类型 1.number 2.布尔值 只有true和false两种，可以直接用true和false来表达，比如：
true;	//true false;	//false 2&amp;gt;1;	//true 2&amp;gt;3;	//fasle 与	&amp;amp;&amp;amp; 两者同时为true，运算结果为true
或	|| 只要有一个为true，运算结果就是true
非	！ 当程序为true时，运算结果取反为false
var age = 15; if(age &amp;gt;= 18) { alert(&amp;#39;adult&amp;#39;) }else{ alert(&amp;#39;teenager&amp;#39;) } age值是15，当age大于且等于18的时候浏览器弹出adult，反之弹出teenager
3.字符串 4.比较运算符 ==和===
当使用==进行比较的时候，一般会自动转换类型然后再进行比较
当使用===进行比较的时候，如果数据类型不一样，直接返回false，等到类型一致了，然后再进行比较
有一个特殊的number就是NaN，它不与任何值相等，包括它自己NaN
NaN === NaN	//false 5.null和undefined null表示一个空值，0表示一个数值，&#39;&#39;表示长度为0的字符串，但是null表示空
undefined表示未定义
但是区分两者意义不大，大多数还是在用null，undefined仅仅在判断函数参数是否传递的情况下有用
6.数组Array [ ] ，表示一组按顺序排列的集合，其中的每个值称为元素
new Array(1,2,3)	//[1,2,3] 数组的索引
二、对象和变量 var person = { name: &amp;#39;jack&amp;#39;, age: 20, city: &amp;#39;hangzhou&amp;#39; } person是对象变量，name: &#39;jack&#39;这就是一个键值对，name是属性名，&#39;jack&#39;是属性</description>
    </item>
    
    <item>
      <title>chrome浏览器中对autoplay的一些处理技巧</title>
      <link>https://imzsh.com/posts/20200911/</link>
      <pubDate>Fri, 11 Sep 2020 21:08:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20200911/</guid>
      <description>我在写博客的时候，想给博客网页添加自己喜欢的音乐，这样我在写作和阅读的时候，心情也会比较愉悦，这个时候，我们就需要用到audio这个标签。
&amp;lt;audio src=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/audio&amp;gt; 同时audio标签还带有很多实用的属性，常用的有以下几个：
 src &amp;ndash; 这个就不说了，懂的都懂 autoplay &amp;ndash; 如果出现该属性，音频在就绪后马上播放 controls &amp;ndash; 网页中显示音频控件 loop &amp;ndash; 循环播放 muted &amp;ndash; 默认静音  但是我在设置 autoplay 的时候发现，chrome对自动播放深恶痛绝，直接从根源上限制了这个属性的开启，意思是说，这个属性直接禁用，在打开网页没有交互的情况下，不允许自动播放。
但仔细想一想，这个做法其实是对用户比较有利的。假设用户使用的时候宽带流量，直接自动播放视频、音频，就会对用户造成损失。甚至一些广告会自动播放，这就直接影响到了用户的体验。所以，对于chrome的做法我还是比较赞同的。
回过头一想，不对啊，我的目的是解决这个问题，不是夸赞谷歌的。我想给自己的个人博客添加喜欢的音乐，所以我找了一个不算办法的办法。我直接在模拟一个事件，当鼠标点击网页任意处的时候，自动触发autoplay的音频效果，直接上代码。
&amp;lt;script&amp;gt; function toggleSound() { var music = document.getElementById(&amp;#34;vd&amp;#34;); //获取ID  console.log(music); console.log(music.paused); if (music.paused) { //判读是否播放  music.paused=false; music.play(); //没有就播放  } } setInterval(&amp;#34;toggleSound()&amp;#34;,1); &amp;lt;/script&amp;gt; 这样处理过之后，插入音频，任意点击网页某个地方，都会触发播放效果，但凡事有利有弊，这样做的话，一旦开启播放，将无法启用暂停功能，也就是说会一直播放下去
如果是像我这样写个人博客，这个弊端倒是影响不大，我在这里记录一下这个方法。</description>
    </item>
    
    <item>
      <title>文字溢出隐藏以及和flex冲突的问题</title>
      <link>https://imzsh.com/posts/20200803/</link>
      <pubDate>Mon, 03 Aug 2020 21:08:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20200803/</guid>
      <description>在某些段落中，页面要求文字只显示一行，但是width固定，而文字过长，就会出现一个需求，超过长度限制的文字被隐藏且显示省略号，css 支持这样的属性。
单行文本溢出隐藏
div{ overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } 多行文本溢出隐藏
div { display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 3; overflow: hidden; } 简单的几行代码就可以达到我们的要求。
但是有一个我们需要注意的地方！！
flex布局是前端写代码经常使用的一种布局方式，简单便捷且有效，但是在使用flex布局的元素中不能同时使用文字溢出隐藏,也就是两者不能同时出现在同一标签中。
这里，我们也有对应的解决办法。
只要保证flex布局和隐藏的样式不在同级元素中就可以，所以在文字外部多包裹一层标签。
可以采用下面这段代码的写法；
&amp;lt;p&amp;gt; &amp;lt;!-- 我们在这一层的标签进行flex布局 --&amp;gt; &amp;lt;span&amp;gt; &amp;lt;!-- 这一层的标签我们引入文字过长隐藏的样式 --&amp;gt; &amp;lt;!-- 文本 --&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; </description>
    </item>
    
    <item>
      <title>vue生命周期</title>
      <link>https://imzsh.com/posts/20200619/</link>
      <pubDate>Fri, 19 Jun 2020 21:07:00 +0000</pubDate>
      
      <guid>https://imzsh.com/posts/20200619/</guid>
      <description>学习vue中一个非常重要的领域，就是生命周期，它包含了很多的内容。每个vue实例在被创建的时候都要经历一系列的初始化过程，这个过程就是vue的生命周期。
每个vue实例在被创建的时候都要经过一系列的初始化过程——例如，需要把设置数据监听、编译模板、将实例挂载到DOM并在数据变化时更新DOM等，我们要把这一系列的过程称为组件的生命周期（组件从注册到销毁的整个过程）。我们有时候需要在组件生命周期的某个过程中，执行某些代码，基于此，vue提供了生命周期钩子函数，给了用户在不同阶段添加自己的代码的机会。
但是在此之前，我们要详细的介绍下组件的生命周期，以及生命后期中每个阶段组件完成和未完成的部分。
一、组件的生命周期 放一张大家都很熟悉的官网文章中对生命周期的注释图。
从图中可以看出，vue为生命周期提供了8个钩子函数，分别是：
 beforeCreate: 创建前 created: 创建后 beforeMount: 挂载前 mounted: 挂载后 beforeUpate: 更新前 upated: 更新后 beforeDestoy: 销毁前 destoyed: 销毁后  1.beforeCreate beforeCreate在vue实例发生之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。
我们在上面的例子中在的beforeCreate钩子中调用Vue的data和method，来看一下结果：
可以看到Vue中的data和方法都是去不到的，并且是在wath之前执行
2.created 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。
主要应用：调用数据，调用方法，调用异步函数
console输出的结果我们看一下
可以看到：created钩子可以获取Vue的data，调用Vue方法，获取原本HTML上的直接加载出来的DOM，但是无法获取到通过挂载模板生成的DOM（例如：v-for循环遍历Vue.list生成li）
3.beforeMount 在挂载开始之前被调用：相关的 render 函数（模板）首次被调用。
例如通过v-for生成的html还没有被挂载到页面上
beforeMount: function () { console.log(&amp;#39;beforeMount:&amp;#39;,document.getElementsByTagName(&amp;#39;li&amp;#39;).length); }, console打印出来的beforeMount为1
4.mounted el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。
有初始值的DOM渲染，例如我们的初始数据list,渲染出来的li，只有这里才能获取
mounted: function () { console.log(&amp;#39;mounted:&amp;#39;,document.getElementsByTagName(&amp;#39;li&amp;#39;).length); }, 结果 mounted: 3 , 可以看到到这里为止，挂载到实例上了，我们可以获取到li的个数了</description>
    </item>
    
  </channel>
</rss>
